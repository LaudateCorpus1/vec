//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_add_int64(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB0_8
	WORD $0xf983; BYTE $0x04                   // cmp    ecx, 4
	JB   LBB0_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB0_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB0_4

LBB0_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB0_12:
	LONG $0x446ffec5; WORD $0xa006 // vmovdqu    ymm0, yword [rsi + rax - 96]
	LONG $0x44d4fdc5; WORD $0xa007 // vpaddq    ymm0, ymm0, yword [rdi + rax - 96]
	LONG $0x447ffec5; WORD $0xa002 // vmovdqu    yword [rdx + rax - 96], ymm0
	LONG $0x446ffec5; WORD $0xc006 // vmovdqu    ymm0, yword [rsi + rax - 64]
	LONG $0x44d4fdc5; WORD $0xc007 // vpaddq    ymm0, ymm0, yword [rdi + rax - 64]
	LONG $0x447ffec5; WORD $0xc002 // vmovdqu    yword [rdx + rax - 64], ymm0
	LONG $0x446ffec5; WORD $0xe006 // vmovdqu    ymm0, yword [rsi + rax - 32]
	LONG $0x44d4fdc5; WORD $0xe007 // vpaddq    ymm0, ymm0, yword [rdi + rax - 32]
	LONG $0x447ffec5; WORD $0xe002 // vmovdqu    yword [rdx + rax - 32], ymm0
	LONG $0x046ffec5; BYTE $0x06   // vmovdqu    ymm0, yword [rsi + rax]
	LONG $0x04d4fdc5; BYTE $0x07   // vpaddq    ymm0, ymm0, yword [rdi + rax]
	LONG $0x047ffec5; BYTE $0x02   // vmovdqu    yword [rdx + rax], ymm0
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB0_12

LBB0_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB0_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x160c8d4e         // lea    r9, [rsi + r10]
	LONG $0x171c8d4a         // lea    rbx, [rdi + r10]
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xc031             // xor    eax, eax

LBB0_6:
	LONG $0x6f7ec1c4; WORD $0x0104 // vmovdqu    ymm0, yword [r9 + rax]
	LONG $0x04d4fdc5; BYTE $0x03   // vpaddq    ymm0, ymm0, yword [rbx + rax]
	LONG $0x7f7ec1c4; WORD $0x0204 // vmovdqu    yword [r10 + rax], ymm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB0_6

LBB0_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4

LBB0_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB0_21
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x0ff88341         // cmp    r8d, 15
	JAE  LBB0_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_20

LBB0_13:
	LONG $0xca148d4e         // lea    r10, [rdx + 8*r9]
	LONG $0x081c8d4b         // lea    rbx, [r8 + r9]
	LONG $0xda048d48         // lea    rax, [rdx + 8*rbx]
	LONG $0x08c08348         // add    rax, 8
	LONG $0xcf1c8d4e         // lea    r11, [rdi + 8*r9]
	LONG $0xdf348d4c         // lea    r14, [rdi + 8*rbx]
	LONG $0x08c68349         // add    r14, 8
	LONG $0xce3c8d4e         // lea    r15, [rsi + 8*r9]
	LONG $0xde1c8d48         // lea    rbx, [rsi + 8*rbx]
	LONG $0x08c38348         // add    rbx, 8
	WORD $0x394d; BYTE $0xf2 // cmp    r10, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x3949; BYTE $0xc3 // cmp    r11, rax
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3 // setb    bl
	WORD $0x3949; BYTE $0xc7 // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB0_14
	WORD $0xc320             // and    bl, al
	JNE  LBB0_16
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xf0e28349         // and    r10, -16
	LONG $0x0a048d4b         // lea    rax, [r10 + r9]
	LONG $0xcf1c8d4e         // lea    r11, [rdi + 8*r9]
	LONG $0x60c38349         // add    r11, 96
	LONG $0xce348d4e         // lea    r14, [rsi + 8*r9]
	LONG $0x60c68349         // add    r14, 96
	LONG $0xca0c8d4e         // lea    r9, [rdx + 8*r9]
	LONG $0x60c18349         // add    r9, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB0_18:
	LONG $0x6f7ec1c4; WORD $0xde44; BYTE $0xa0 // vmovdqu    ymm0, yword [r14 + 8*rbx - 96]
	LONG $0x6f7ec1c4; WORD $0xde4c; BYTE $0xc0 // vmovdqu    ymm1, yword [r14 + 8*rbx - 64]
	LONG $0x6f7ec1c4; WORD $0xde54; BYTE $0xe0 // vmovdqu    ymm2, yword [r14 + 8*rbx - 32]
	LONG $0x6f7ec1c4; WORD $0xde1c             // vmovdqu    ymm3, yword [r14 + 8*rbx]
	LONG $0xd47dc1c4; WORD $0xdb44; BYTE $0xa0 // vpaddq    ymm0, ymm0, yword [r11 + 8*rbx - 96]
	LONG $0xd475c1c4; WORD $0xdb4c; BYTE $0xc0 // vpaddq    ymm1, ymm1, yword [r11 + 8*rbx - 64]
	LONG $0xd46dc1c4; WORD $0xdb54; BYTE $0xe0 // vpaddq    ymm2, ymm2, yword [r11 + 8*rbx - 32]
	LONG $0xd465c1c4; WORD $0xdb1c             // vpaddq    ymm3, ymm3, yword [r11 + 8*rbx]
	LONG $0x7f7ec1c4; WORD $0xd944; BYTE $0xa0 // vmovdqu    yword [r9 + 8*rbx - 96], ymm0
	LONG $0x7f7ec1c4; WORD $0xd94c; BYTE $0xc0 // vmovdqu    yword [r9 + 8*rbx - 64], ymm1
	LONG $0x7f7ec1c4; WORD $0xd954; BYTE $0xe0 // vmovdqu    yword [r9 + 8*rbx - 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd91c             // vmovdqu    yword [r9 + 8*rbx], ymm3
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB0_18
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB0_20
	JMP  LBB0_21

LBB0_14:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_20

LBB0_16:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB0_20:
	LONG $0xc61c8b48 // mov    rbx, qword [rsi + 8*rax]
	LONG $0xc71c0348 // add    rbx, qword [rdi + 8*rax]
	LONG $0xc21c8948 // mov    qword [rdx + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB0_20

LBB0_21:
	VZEROUPPER
	RET

TEXT ·_sub_int64(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB1_8
	WORD $0xf983; BYTE $0x04                   // cmp    ecx, 4
	JB   LBB1_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB1_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB1_4

LBB1_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB1_12:
	LONG $0x446ffec5; WORD $0xa007 // vmovdqu    ymm0, yword [rdi + rax - 96]
	LONG $0x44fbfdc5; WORD $0xa006 // vpsubq    ymm0, ymm0, yword [rsi + rax - 96]
	LONG $0x447ffec5; WORD $0xa002 // vmovdqu    yword [rdx + rax - 96], ymm0
	LONG $0x446ffec5; WORD $0xc007 // vmovdqu    ymm0, yword [rdi + rax - 64]
	LONG $0x44fbfdc5; WORD $0xc006 // vpsubq    ymm0, ymm0, yword [rsi + rax - 64]
	LONG $0x447ffec5; WORD $0xc002 // vmovdqu    yword [rdx + rax - 64], ymm0
	LONG $0x446ffec5; WORD $0xe007 // vmovdqu    ymm0, yword [rdi + rax - 32]
	LONG $0x44fbfdc5; WORD $0xe006 // vpsubq    ymm0, ymm0, yword [rsi + rax - 32]
	LONG $0x447ffec5; WORD $0xe002 // vmovdqu    yword [rdx + rax - 32], ymm0
	LONG $0x046ffec5; BYTE $0x07   // vmovdqu    ymm0, yword [rdi + rax]
	LONG $0x04fbfdc5; BYTE $0x06   // vpsubq    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x02   // vmovdqu    yword [rdx + rax], ymm0
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB1_12

LBB1_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB1_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x160c8d4e         // lea    r9, [rsi + r10]
	LONG $0x171c8d4a         // lea    rbx, [rdi + r10]
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xc031             // xor    eax, eax

LBB1_6:
	LONG $0x046ffec5; BYTE $0x03   // vmovdqu    ymm0, yword [rbx + rax]
	LONG $0xfb7dc1c4; WORD $0x0104 // vpsubq    ymm0, ymm0, yword [r9 + rax]
	LONG $0x7f7ec1c4; WORD $0x0204 // vmovdqu    yword [r10 + rax], ymm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB1_6

LBB1_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4

LBB1_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB1_21
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x0ff88341         // cmp    r8d, 15
	JAE  LBB1_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_20

LBB1_13:
	LONG $0xca148d4e         // lea    r10, [rdx + 8*r9]
	LONG $0x081c8d4b         // lea    rbx, [r8 + r9]
	LONG $0xda048d48         // lea    rax, [rdx + 8*rbx]
	LONG $0x08c08348         // add    rax, 8
	LONG $0xcf1c8d4e         // lea    r11, [rdi + 8*r9]
	LONG $0xdf348d4c         // lea    r14, [rdi + 8*rbx]
	LONG $0x08c68349         // add    r14, 8
	LONG $0xce3c8d4e         // lea    r15, [rsi + 8*r9]
	LONG $0xde1c8d48         // lea    rbx, [rsi + 8*rbx]
	LONG $0x08c38348         // add    rbx, 8
	WORD $0x394d; BYTE $0xf2 // cmp    r10, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x3949; BYTE $0xc3 // cmp    r11, rax
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3 // setb    bl
	WORD $0x3949; BYTE $0xc7 // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB1_14
	WORD $0xc320             // and    bl, al
	JNE  LBB1_16
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xf0e28349         // and    r10, -16
	LONG $0x0a048d4b         // lea    rax, [r10 + r9]
	LONG $0xcf1c8d4e         // lea    r11, [rdi + 8*r9]
	LONG $0x60c38349         // add    r11, 96
	LONG $0xce348d4e         // lea    r14, [rsi + 8*r9]
	LONG $0x60c68349         // add    r14, 96
	LONG $0xca0c8d4e         // lea    r9, [rdx + 8*r9]
	LONG $0x60c18349         // add    r9, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB1_18:
	LONG $0x6f7ec1c4; WORD $0xdb44; BYTE $0xa0 // vmovdqu    ymm0, yword [r11 + 8*rbx - 96]
	LONG $0x6f7ec1c4; WORD $0xdb4c; BYTE $0xc0 // vmovdqu    ymm1, yword [r11 + 8*rbx - 64]
	LONG $0x6f7ec1c4; WORD $0xdb54; BYTE $0xe0 // vmovdqu    ymm2, yword [r11 + 8*rbx - 32]
	LONG $0x6f7ec1c4; WORD $0xdb1c             // vmovdqu    ymm3, yword [r11 + 8*rbx]
	LONG $0xfb7dc1c4; WORD $0xde44; BYTE $0xa0 // vpsubq    ymm0, ymm0, yword [r14 + 8*rbx - 96]
	LONG $0xfb75c1c4; WORD $0xde4c; BYTE $0xc0 // vpsubq    ymm1, ymm1, yword [r14 + 8*rbx - 64]
	LONG $0xfb6dc1c4; WORD $0xde54; BYTE $0xe0 // vpsubq    ymm2, ymm2, yword [r14 + 8*rbx - 32]
	LONG $0xfb65c1c4; WORD $0xde1c             // vpsubq    ymm3, ymm3, yword [r14 + 8*rbx]
	LONG $0x7f7ec1c4; WORD $0xd944; BYTE $0xa0 // vmovdqu    yword [r9 + 8*rbx - 96], ymm0
	LONG $0x7f7ec1c4; WORD $0xd94c; BYTE $0xc0 // vmovdqu    yword [r9 + 8*rbx - 64], ymm1
	LONG $0x7f7ec1c4; WORD $0xd954; BYTE $0xe0 // vmovdqu    yword [r9 + 8*rbx - 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd91c             // vmovdqu    yword [r9 + 8*rbx], ymm3
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB1_18
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB1_20
	JMP  LBB1_21

LBB1_14:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_20

LBB1_16:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB1_20:
	LONG $0xc71c8b48 // mov    rbx, qword [rdi + 8*rax]
	LONG $0xc61c2b48 // sub    rbx, qword [rsi + 8*rax]
	LONG $0xc21c8948 // mov    qword [rdx + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB1_20

LBB1_21:
	VZEROUPPER
	RET

TEXT ·_mul_int64(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB2_7
	WORD $0xf983; BYTE $0x04       // cmp    ecx, 4
	JB   LBB2_6
	WORD $0x8949; BYTE $0xc8       // mov    r8, rcx
	LONG $0x02e8c149               // shr    r8, 2
	WORD $0x8944; BYTE $0xc3       // mov    ebx, r8d
	LONG $0xffffe381; WORD $0x3fff // and    ebx, 1073741823
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01fb8348               // cmp    rbx, 1
	JNE  LBB2_10
	WORD $0xdb31                   // xor    ebx, ebx
	JMP  LBB2_4

LBB2_10:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xd8 // sub    rax, rbx
	WORD $0xdb31             // xor    ebx, ebx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_11:
	LONG $0x0c6ffec5; BYTE $0xdf   // vmovdqu    ymm1, yword [rdi + 8*rbx]
	LONG $0x146ffec5; BYTE $0xde   // vmovdqu    ymm2, yword [rsi + 8*rbx]
	LONG $0xda70fdc5; BYTE $0xb1   // vpshufd    ymm3, ymm2, 177
	LONG $0x4065e2c4; BYTE $0xd9   // vpmulld    ymm3, ymm3, ymm1
	LONG $0x0265e2c4; BYTE $0xd8   // vphaddd    ymm3, ymm3, ymm0
	LONG $0xdb70fdc5; BYTE $0x73   // vpshufd    ymm3, ymm3, 115
	LONG $0xc9f4edc5               // vpmuludq    ymm1, ymm2, ymm1
	LONG $0xcbd4f5c5               // vpaddq    ymm1, ymm1, ymm3
	LONG $0x0c7ffec5; BYTE $0xda   // vmovdqu    yword [rdx + 8*rbx], ymm1
	LONG $0x4c6ffec5; WORD $0x20df // vmovdqu    ymm1, yword [rdi + 8*rbx + 32]
	LONG $0x546ffec5; WORD $0x20de // vmovdqu    ymm2, yword [rsi + 8*rbx + 32]
	LONG $0xda70fdc5; BYTE $0xb1   // vpshufd    ymm3, ymm2, 177
	LONG $0x4065e2c4; BYTE $0xd9   // vpmulld    ymm3, ymm3, ymm1
	LONG $0x0265e2c4; BYTE $0xd8   // vphaddd    ymm3, ymm3, ymm0
	LONG $0xdb70fdc5; BYTE $0x73   // vpshufd    ymm3, ymm3, 115
	LONG $0xc9f4edc5               // vpmuludq    ymm1, ymm2, ymm1
	LONG $0xcbd4f5c5               // vpaddq    ymm1, ymm1, ymm3
	LONG $0x4c7ffec5; WORD $0x20da // vmovdqu    yword [rdx + 8*rbx + 32], ymm1
	LONG $0x08c38348               // add    rbx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB2_11

LBB2_4:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB2_6
	LONG $0x046ffec5; BYTE $0xdf // vmovdqu    ymm0, yword [rdi + 8*rbx]
	LONG $0x0c6ffec5; BYTE $0xde // vmovdqu    ymm1, yword [rsi + 8*rbx]
	LONG $0xd170fdc5; BYTE $0xb1 // vpshufd    ymm2, ymm1, 177
	LONG $0x406de2c4; BYTE $0xd0 // vpmulld    ymm2, ymm2, ymm0
	LONG $0xdbefe1c5             // vpxor    xmm3, xmm3, xmm3
	LONG $0x026de2c4; BYTE $0xd3 // vphaddd    ymm2, ymm2, ymm3
	LONG $0xd270fdc5; BYTE $0x73 // vpshufd    ymm2, ymm2, 115
	LONG $0xc0f4f5c5             // vpmuludq    ymm0, ymm1, ymm0
	LONG $0xc2d4fdc5             // vpaddq    ymm0, ymm0, ymm2
	LONG $0x047ffec5; BYTE $0xda // vmovdqu    yword [rdx + 8*rbx], ymm0

LBB2_6:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4

LBB2_7:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB2_20
	WORD $0x6349; BYTE $0xd8 // movsxd    rbx, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x0ff88341         // cmp    r8d, 15
	JAE  LBB2_12
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	JMP  LBB2_19

LBB2_12:
	LONG $0xda0c8d4c         // lea    r9, [rdx + 8*rbx]
	LONG $0x18048d49         // lea    rax, [r8 + rbx]
	LONG $0xc2148d4c         // lea    r10, [rdx + 8*rax]
	LONG $0x08c28349         // add    r10, 8
	LONG $0xdf1c8d4c         // lea    r11, [rdi + 8*rbx]
	LONG $0xc7348d4c         // lea    r14, [rdi + 8*rax]
	LONG $0x08c68349         // add    r14, 8
	LONG $0xde3c8d4c         // lea    r15, [rsi + 8*rbx]
	LONG $0xc6048d48         // lea    rax, [rsi + 8*rax]
	LONG $0x08c08348         // add    rax, 8
	WORD $0x394d; BYTE $0xf1 // cmp    r9, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x394d; BYTE $0xd3 // cmp    r11, r10
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xc1 // cmp    r9, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x394d; BYTE $0xd7 // cmp    r15, r10
	LONG $0xc1920f41         // setb    r9b
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB2_13
	WORD $0x2044; BYTE $0xc8 // and    al, r9b
	JNE  LBB2_15
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8
	LONG $0xf0e18349         // and    r9, -16
	LONG $0x19048d49         // lea    rax, [r9 + rbx]
	LONG $0xdf148d4c         // lea    r10, [rdi + 8*rbx]
	LONG $0x60c28349         // add    r10, 96
	LONG $0xde1c8d4c         // lea    r11, [rsi + 8*rbx]
	LONG $0x60c38349         // add    r11, 96
	LONG $0xda348d4c         // lea    r14, [rdx + 8*rbx]
	LONG $0x60c68349         // add    r14, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB2_17:
	LONG $0x6f7ec1c4; WORD $0xda4c; BYTE $0xa0 // vmovdqu    ymm1, yword [r10 + 8*rbx - 96]
	LONG $0x6f7ec1c4; WORD $0xda54; BYTE $0xc0 // vmovdqu    ymm2, yword [r10 + 8*rbx - 64]
	LONG $0x6f7ec1c4; WORD $0xda5c; BYTE $0xe0 // vmovdqu    ymm3, yword [r10 + 8*rbx - 32]
	LONG $0x6f7ec1c4; WORD $0xda04             // vmovdqu    ymm0, yword [r10 + 8*rbx]
	LONG $0x6f7ec1c4; WORD $0xdb64; BYTE $0xa0 // vmovdqu    ymm4, yword [r11 + 8*rbx - 96]
	LONG $0x6f7ec1c4; WORD $0xdb6c; BYTE $0xc0 // vmovdqu    ymm5, yword [r11 + 8*rbx - 64]
	LONG $0x6f7ec1c4; WORD $0xdb74; BYTE $0xe0 // vmovdqu    ymm6, yword [r11 + 8*rbx - 32]
	LONG $0x6f7ec1c4; WORD $0xdb3c             // vmovdqu    ymm7, yword [r11 + 8*rbx]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xde4c; BYTE $0xa0 // vmovdqu    yword [r14 + 8*rbx - 96], ymm1
	LONG $0x7f7ec1c4; WORD $0xde54; BYTE $0xc0 // vmovdqu    yword [r14 + 8*rbx - 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xde5c; BYTE $0xe0 // vmovdqu    yword [r14 + 8*rbx - 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xde04             // vmovdqu    yword [r14 + 8*rbx], ymm0
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB2_17
	WORD $0x394d; BYTE $0xc8                   // cmp    r8, r9
	JNE  LBB2_19
	JMP  LBB2_20

LBB2_13:
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	JMP  LBB2_19

LBB2_15:
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx

LBB2_19:
	LONG $0xc61c8b48             // mov    rbx, qword [rsi + 8*rax]
	LONG $0x1caf0f48; BYTE $0xc7 // imul    rbx, qword [rdi + 8*rax]
	LONG $0xc21c8948             // mov    qword [rdx + 8*rax], rbx
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc839                 // cmp    eax, ecx
	JB   LBB2_19

LBB2_20:
	VZEROUPPER
	RET
