//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_hsum_float32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x000006c7; WORD $0x0000 // mov    dword [rsi], 0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB0_1
	LONG $0xc057f8c5               // vxorps    xmm0, xmm0, xmm0
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JB   LBB0_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x03e8c149               // shr    r8, 3
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x1fff // and    ecx, 536870911
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB0_13
	LONG $0xc057f8c5               // vxorps    xmm0, xmm0, xmm0
	WORD $0xc931                   // xor    ecx, ecx
	JMP  LBB0_5

LBB0_1:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JB   LBB0_9
	JMP  LBB0_12

LBB0_13:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx

LBB0_14:
	LONG $0x4c10f8c5; WORD $0x108f // vmovups    xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0c58f0c5; BYTE $0x8f   // vaddps    xmm1, xmm1, oword [rdi + 4*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xc058f2c5               // vaddss    xmm0, xmm1, xmm0
	LONG $0xc258fac5               // vaddss    xmm0, xmm0, xmm2
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4c10f8c5; WORD $0x308f // vmovups    xmm1, oword [rdi + 4*rcx + 48]
	LONG $0x4c58f0c5; WORD $0x208f // vaddps    xmm1, xmm1, oword [rdi + 4*rcx + 32]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca58f2c5               // vaddss    xmm1, xmm1, xmm2
	LONG $0xc158fac5               // vaddss    xmm0, xmm0, xmm1
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x10c18348               // add    rcx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_14

LBB0_5:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_7
	LONG $0x4c10f8c5; WORD $0x108f // vmovups    xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0c58f0c5; BYTE $0x8f   // vaddps    xmm1, xmm1, oword [rdi + 4*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xc058f2c5               // vaddss    xmm0, xmm1, xmm0
	LONG $0xc258fac5               // vaddss    xmm0, xmm0, xmm2
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0

LBB0_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB0_12

LBB0_9:
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JE   LBB0_11

LBB0_10:
	LONG $0x0458fac5; BYTE $0x87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0611fac5             // vmovss    dword [rsi], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc183; BYTE $0xff     // add    ecx, -1
	JNE  LBB0_10

LBB0_11:
	LONG $0x03f88341 // cmp    r8d, 3
	JB   LBB0_12

LBB0_15:
	LONG $0x0458fac5; BYTE $0x87   // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0487 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 4]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0887 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 8]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0c87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 12]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0xd039                   // cmp    eax, edx
	JB   LBB0_15

LBB0_12:
	RET
