//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_hsum_int32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x000006c7; WORD $0x0000 // mov    dword [rsi], 0
	WORD $0x8948; BYTE $0xd1       // mov    rcx, rdx
	LONG $0x20e9c148               // shr    rcx, 32
	WORD $0xc031                   // xor    eax, eax
	LONG $0x0000b841; WORD $0x0000 // mov    r8d, 0
	WORD $0xf983; BYTE $0x01       // cmp    ecx, 1
	JNE  LBB0_7
	WORD $0xc031                   // xor    eax, eax
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JB   LBB0_6
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x03e8c149               // shr    r8, 3
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	LONG $0xffffff25; BYTE $0x1f   // and    eax, 536870911
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f88348               // cmp    rax, 1
	JNE  LBB0_12
	WORD $0xc031                   // xor    eax, eax
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	JMP  LBB0_4

LBB0_12:
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8
	WORD $0x2949; BYTE $0xc1 // sub    r9, rax
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	WORD $0xc031             // xor    eax, eax

LBB0_13:
	LONG $0x6f7aa1c4; WORD $0x9744; BYTE $0x10 // vmovdqu    xmm0, oword [rdi + 4*r10 + 16]
	LONG $0xfe79a1c4; WORD $0x9704             // vpaddd    xmm0, xmm0, oword [rdi + 4*r10]
	LONG $0xc870f9c5; BYTE $0xee               // vpshufd    xmm1, xmm0, 238
	LONG $0xc1fef9c5                           // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55               // vpshufd    xmm1, xmm0, 85
	LONG $0xc0fef1c5                           // vpaddd    xmm0, xmm1, xmm0
	LONG $0xc17ef9c5                           // vmovd    ecx, xmm0
	WORD $0xc101                               // add    ecx, eax
	WORD $0x0e89                               // mov    dword [rsi], ecx
	LONG $0x6f7aa1c4; WORD $0x9744; BYTE $0x30 // vmovdqu    xmm0, oword [rdi + 4*r10 + 48]
	LONG $0xfe79a1c4; WORD $0x9744; BYTE $0x20 // vpaddd    xmm0, xmm0, oword [rdi + 4*r10 + 32]
	LONG $0xc870f9c5; BYTE $0xee               // vpshufd    xmm1, xmm0, 238
	LONG $0xc1fef9c5                           // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55               // vpshufd    xmm1, xmm0, 85
	LONG $0xc0fef1c5                           // vpaddd    xmm0, xmm1, xmm0
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0xc801                               // add    eax, ecx
	WORD $0x0689                               // mov    dword [rsi], eax
	LONG $0x10c28349                           // add    r10, 16
	LONG $0x02c18349                           // add    r9, 2
	JNE  LBB0_13

LBB0_4:
	WORD $0x854d; BYTE $0xc0                   // test    r8, r8
	JE   LBB0_6
	LONG $0x6f7aa1c4; WORD $0x9744; BYTE $0x10 // vmovdqu    xmm0, oword [rdi + 4*r10 + 16]
	LONG $0xfe79a1c4; WORD $0x9704             // vpaddd    xmm0, xmm0, oword [rdi + 4*r10]
	LONG $0xc870f9c5; BYTE $0xee               // vpshufd    xmm1, xmm0, 238
	LONG $0xc1fef9c5                           // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55               // vpshufd    xmm1, xmm0, 85
	LONG $0xc0fef1c5                           // vpaddd    xmm0, xmm1, xmm0
	LONG $0xc17ef9c5                           // vmovd    ecx, xmm0
	WORD $0xc101                               // add    ecx, eax
	WORD $0x0e89                               // mov    dword [rsi], ecx
	WORD $0xc889                               // mov    eax, ecx

LBB0_6:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8

LBB0_7:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB0_11
	WORD $0x6349; BYTE $0xc8 // movsxd    rcx, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	JE   LBB0_10

LBB0_9:
	WORD $0x0403; BYTE $0x8f // add    eax, dword [rdi + 4*rcx]
	WORD $0x0689             // mov    dword [rsi], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc18341         // add    r9d, -1
	JNE  LBB0_9

LBB0_10:
	LONG $0x03f88341 // cmp    r8d, 3
	JB   LBB0_11

LBB0_14:
	WORD $0x0403; BYTE $0x8f // add    eax, dword [rdi + 4*rcx]
	WORD $0x0689             // mov    dword [rsi], eax
	LONG $0x048f4403         // add    eax, dword [rdi + 4*rcx + 4]
	WORD $0x0689             // mov    dword [rsi], eax
	LONG $0x088f4403         // add    eax, dword [rdi + 4*rcx + 8]
	WORD $0x0689             // mov    dword [rsi], eax
	LONG $0x0c8f4403         // add    eax, dword [rdi + 4*rcx + 12]
	WORD $0x0689             // mov    dword [rsi], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0xd139             // cmp    ecx, edx
	JB   LBB0_14

LBB0_11:
	RET

TEXT ·_hmax_int32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x8b44; BYTE $0x0f // mov    r9d, dword [rdi]
	WORD $0x8944; BYTE $0x0e // mov    dword [rsi], r9d
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01 // cmp    eax, 1
	JNE  LBB1_7
	WORD $0xfa83; BYTE $0x08 // cmp    edx, 8
	JAE  LBB1_2

LBB1_6:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8

LBB1_7:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB1_22
	WORD $0x6349; BYTE $0xc8 // movsxd    rcx, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	JNE  LBB1_9

LBB1_12:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB1_13

LBB1_22:
	RET

LBB1_11:
	LONG $0x01c18348         // add    rcx, 1
	WORD $0xc083; BYTE $0xff // add    eax, -1
	JE   LBB1_12

LBB1_9:
	LONG $0x8f148b44         // mov    r10d, dword [rdi + 4*rcx]
	WORD $0x3945; BYTE $0xca // cmp    r10d, r9d
	JLE  LBB1_11
	WORD $0x8944; BYTE $0x16 // mov    dword [rsi], r10d
	WORD $0x8945; BYTE $0xd1 // mov    r9d, r10d
	JMP  LBB1_11

LBB1_21:
	LONG $0x04c18348 // add    rcx, 4
	WORD $0xd139     // cmp    ecx, edx
	JAE  LBB1_22

LBB1_13:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JG   LBB1_14
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JG   LBB1_16

LBB1_17:
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JG   LBB1_18

LBB1_19:
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JLE  LBB1_21
	JMP  LBB1_20

LBB1_14:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JLE  LBB1_17

LBB1_16:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JLE  LBB1_19

LBB1_18:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JLE  LBB1_21

LBB1_20:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	JMP  LBB1_21

LBB1_2:
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe9c1; BYTE $0x03 // shr    ecx, 3
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	JMP  LBB1_3

LBB1_5:
	LONG $0x20c08348 // add    rax, 32
	LONG $0xffc18348 // add    rcx, -1
	JE   LBB1_6

LBB1_3:
	LONG $0x006ffac5               // vmovdqu    xmm0, oword [rax]
	LONG $0x3d79e2c4; WORD $0x1040 // vpmaxsd    xmm0, xmm0, oword [rax + 16]
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd    xmm1, xmm0, 238
	LONG $0x3d71e2c4; BYTE $0xc0   // vpmaxsd    xmm0, xmm1, xmm0
	LONG $0xc870f9c5; BYTE $0xb1   // vpshufd    xmm1, xmm0, 177
	LONG $0x3d79e2c4; BYTE $0xc1   // vpmaxsd    xmm0, xmm0, xmm1
	LONG $0x7e79c1c4; BYTE $0xc0   // vmovd    r8d, xmm0
	WORD $0x3945; BYTE $0xc8       // cmp    r8d, r9d
	JLE  LBB1_5
	WORD $0x8944; BYTE $0x06       // mov    dword [rsi], r8d
	WORD $0x8945; BYTE $0xc1       // mov    r9d, r8d
	JMP  LBB1_5

TEXT ·_hmin_int32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x8b44; BYTE $0x0f // mov    r9d, dword [rdi]
	WORD $0x8944; BYTE $0x0e // mov    dword [rsi], r9d
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01 // cmp    eax, 1
	JNE  LBB2_7
	WORD $0xfa83; BYTE $0x08 // cmp    edx, 8
	JAE  LBB2_2

LBB2_6:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8

LBB2_7:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB2_22
	WORD $0x6349; BYTE $0xc8 // movsxd    rcx, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd089             // mov    eax, edx
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	JNE  LBB2_9

LBB2_12:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB2_13

LBB2_22:
	RET

LBB2_11:
	LONG $0x01c18348         // add    rcx, 1
	WORD $0xc083; BYTE $0xff // add    eax, -1
	JE   LBB2_12

LBB2_9:
	LONG $0x8f148b44         // mov    r10d, dword [rdi + 4*rcx]
	WORD $0x3945; BYTE $0xca // cmp    r10d, r9d
	JGE  LBB2_11
	WORD $0x8944; BYTE $0x16 // mov    dword [rsi], r10d
	WORD $0x8945; BYTE $0xd1 // mov    r9d, r10d
	JMP  LBB2_11

LBB2_21:
	LONG $0x04c18348 // add    rcx, 4
	WORD $0xd139     // cmp    ecx, edx
	JAE  LBB2_22

LBB2_13:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JL   LBB2_14
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JL   LBB2_16

LBB2_17:
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JL   LBB2_18

LBB2_19:
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JGE  LBB2_21
	JMP  LBB2_20

LBB2_14:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JGE  LBB2_17

LBB2_16:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JGE  LBB2_19

LBB2_18:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	WORD $0x3944; BYTE $0xc8 // cmp    eax, r9d
	JGE  LBB2_21

LBB2_20:
	WORD $0x0689             // mov    dword [rsi], eax
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	JMP  LBB2_21

LBB2_2:
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe9c1; BYTE $0x03 // shr    ecx, 3
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	JMP  LBB2_3

LBB2_5:
	LONG $0x20c08348 // add    rax, 32
	LONG $0xffc18348 // add    rcx, -1
	JE   LBB2_6

LBB2_3:
	LONG $0x006ffac5               // vmovdqu    xmm0, oword [rax]
	LONG $0x3979e2c4; WORD $0x1040 // vpminsd    xmm0, xmm0, oword [rax + 16]
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd    xmm1, xmm0, 238
	LONG $0x3971e2c4; BYTE $0xc0   // vpminsd    xmm0, xmm1, xmm0
	LONG $0xc870f9c5; BYTE $0xb1   // vpshufd    xmm1, xmm0, 177
	LONG $0x3979e2c4; BYTE $0xc1   // vpminsd    xmm0, xmm0, xmm1
	LONG $0x7e79c1c4; BYTE $0xc0   // vmovd    r8d, xmm0
	WORD $0x3945; BYTE $0xc8       // cmp    r8d, r9d
	JGE  LBB2_5
	WORD $0x8944; BYTE $0x06       // mov    dword [rsi], r8d
	WORD $0x8945; BYTE $0xc1       // mov    r9d, r8d
	JMP  LBB2_5
