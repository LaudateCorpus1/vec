//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_hsum_float64(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0006c748; WORD $0x0000; BYTE $0x00 // mov    qword [rsi], 0
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB0_1
	LONG $0xc057f9c5                           // vxorpd    xmm0, xmm0, xmm0
	WORD $0xfa83; BYTE $0x04                   // cmp    edx, 4
	JB   LBB0_7
	WORD $0x8949; BYTE $0xd0                   // mov    r8, rdx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8944; BYTE $0xc1                   // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x3fff             // and    ecx, 1073741823
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98348                           // cmp    rcx, 1
	JNE  LBB0_13
	LONG $0xc057f9c5                           // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc931                               // xor    ecx, ecx
	JMP  LBB0_5

LBB0_1:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JB   LBB0_9
	JMP  LBB0_12

LBB0_13:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx

LBB0_14:
	LONG $0x4c10f9c5; WORD $0x10cf // vmovupd    xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0c58f1c5; BYTE $0xcf   // vaddpd    xmm1, xmm1, oword [rdi + 8*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc058f3c5               // vaddsd    xmm0, xmm1, xmm0
	LONG $0xc258fbc5               // vaddsd    xmm0, xmm0, xmm2
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x4c10f9c5; WORD $0x30cf // vmovupd    xmm1, oword [rdi + 8*rcx + 48]
	LONG $0x4c58f1c5; WORD $0x20cf // vaddpd    xmm1, xmm1, oword [rdi + 8*rcx + 32]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca58f3c5               // vaddsd    xmm1, xmm1, xmm2
	LONG $0xc158fbc5               // vaddsd    xmm0, xmm0, xmm1
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x08c18348               // add    rcx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_14

LBB0_5:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_7
	LONG $0x4c10f9c5; WORD $0x10cf // vmovupd    xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0c58f1c5; BYTE $0xcf   // vaddpd    xmm1, xmm1, oword [rdi + 8*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc058f3c5               // vaddsd    xmm0, xmm1, xmm0
	LONG $0xc258fbc5               // vaddsd    xmm0, xmm0, xmm2
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0

LBB0_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB0_12

LBB0_9:
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JE   LBB0_11

LBB0_10:
	LONG $0x0458fbc5; BYTE $0xc7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0611fbc5             // vmovsd    qword [rsi], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc183; BYTE $0xff     // add    ecx, -1
	JNE  LBB0_10

LBB0_11:
	LONG $0x03f88341 // cmp    r8d, 3
	JB   LBB0_12

LBB0_15:
	LONG $0x0458fbc5; BYTE $0xc7   // vaddsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x4458fbc5; WORD $0x08c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 8]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x4458fbc5; WORD $0x10c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 16]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x4458fbc5; WORD $0x18c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 24]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0xd039                   // cmp    eax, edx
	JB   LBB0_15

LBB0_12:
	RET

TEXT ·_hmax_float64(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fbc5               // vmovsd    xmm0, qword [rdi]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB1_8
	WORD $0xfa83; BYTE $0x04       // cmp    edx, 4
	JB   LBB1_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x02e8c149               // shr    r8, 2
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x3fff // and    ecx, 1073741823
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB1_15
	WORD $0xc931                   // xor    ecx, ecx

LBB1_4:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB1_7
	LONG $0x0c10f9c5; BYTE $0xcf   // vmovupd    xmm1, oword [rdi + 8*rcx]
	LONG $0x4c5ff1c5; WORD $0x10cf // vmaxpd    xmm1, xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5ff3c5               // vmaxsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JBE  LBB1_7
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1

LBB1_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xfce08341         // and    r8d, -4

LBB1_8:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB1_14
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JNE  LBB1_10

LBB1_13:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB1_21

LBB1_14:
	RET

LBB1_12:
	LONG $0x01c08348         // add    rax, 1
	WORD $0xc183; BYTE $0xff // add    ecx, -1
	JE   LBB1_13

LBB1_10:
	LONG $0x0c10fbc5; BYTE $0xc7 // vmovsd    xmm1, qword [rdi + 8*rax]
	LONG $0xc12ef9c5             // vucomisd    xmm0, xmm1
	JAE  LBB1_12
	LONG $0x0e11fbc5             // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5             // vmovapd    xmm0, xmm1
	JMP  LBB1_12

LBB1_29:
	LONG $0x04c08348 // add    rax, 4
	WORD $0xd039     // cmp    eax, edx
	JAE  LBB1_14

LBB1_21:
	LONG $0x0c10fbc5; BYTE $0xc7   // vmovsd    xmm1, qword [rdi + 8*rax]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JB   LBB1_22
	LONG $0x4c10fbc5; WORD $0x08c7 // vmovsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JB   LBB1_24

LBB1_25:
	LONG $0x4c10fbc5; WORD $0x10c7 // vmovsd    xmm1, qword [rdi + 8*rax + 16]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JB   LBB1_26

LBB1_27:
	LONG $0x4c10fbc5; WORD $0x18c7 // vmovsd    xmm1, qword [rdi + 8*rax + 24]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JAE  LBB1_29
	JMP  LBB1_28

LBB1_22:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x08c7 // vmovsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JAE  LBB1_25

LBB1_24:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x10c7 // vmovsd    xmm1, qword [rdi + 8*rax + 16]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JAE  LBB1_27

LBB1_26:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x18c7 // vmovsd    xmm1, qword [rdi + 8*rax + 24]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JAE  LBB1_29

LBB1_28:
	LONG $0x0e11fbc5 // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5 // vmovapd    xmm0, xmm1
	JMP  LBB1_29

LBB1_15:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_16

LBB1_20:
	LONG $0x08c18348 // add    rcx, 8
	LONG $0x02c08348 // add    rax, 2
	JE   LBB1_4

LBB1_16:
	LONG $0x0c10f9c5; BYTE $0xcf   // vmovupd    xmm1, oword [rdi + 8*rcx]
	LONG $0x4c5ff1c5; WORD $0x10cf // vmaxpd    xmm1, xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5ff3c5               // vmaxsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JBE  LBB1_18
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1

LBB1_18:
	LONG $0x4c10f9c5; WORD $0x20cf // vmovupd    xmm1, oword [rdi + 8*rcx + 32]
	LONG $0x4c5ff1c5; WORD $0x30cf // vmaxpd    xmm1, xmm1, oword [rdi + 8*rcx + 48]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5ff3c5               // vmaxsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JBE  LBB1_20
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	JMP  LBB1_20

TEXT ·_hmin_float64(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fbc5               // vmovsd    xmm0, qword [rdi]
	LONG $0x0611fbc5               // vmovsd    qword [rsi], xmm0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB2_8
	WORD $0xfa83; BYTE $0x04       // cmp    edx, 4
	JB   LBB2_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x02e8c149               // shr    r8, 2
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x3fff // and    ecx, 1073741823
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB2_15
	WORD $0xc931                   // xor    ecx, ecx

LBB2_4:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB2_7
	LONG $0x0c10f9c5; BYTE $0xcf   // vmovupd    xmm1, oword [rdi + 8*rcx]
	LONG $0x4c5df1c5; WORD $0x10cf // vminpd    xmm1, xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5df3c5               // vminsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JAE  LBB2_7
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1

LBB2_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xfce08341         // and    r8d, -4

LBB2_8:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB2_14
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JNE  LBB2_10

LBB2_13:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB2_21

LBB2_14:
	RET

LBB2_12:
	LONG $0x01c08348         // add    rax, 1
	WORD $0xc183; BYTE $0xff // add    ecx, -1
	JE   LBB2_13

LBB2_10:
	LONG $0x0c10fbc5; BYTE $0xc7 // vmovsd    xmm1, qword [rdi + 8*rax]
	LONG $0xc12ef9c5             // vucomisd    xmm0, xmm1
	JBE  LBB2_12
	LONG $0x0e11fbc5             // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5             // vmovapd    xmm0, xmm1
	JMP  LBB2_12

LBB2_29:
	LONG $0x04c08348 // add    rax, 4
	WORD $0xd039     // cmp    eax, edx
	JAE  LBB2_14

LBB2_21:
	LONG $0x0c10fbc5; BYTE $0xc7   // vmovsd    xmm1, qword [rdi + 8*rax]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JA   LBB2_22
	LONG $0x4c10fbc5; WORD $0x08c7 // vmovsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JA   LBB2_24

LBB2_25:
	LONG $0x4c10fbc5; WORD $0x10c7 // vmovsd    xmm1, qword [rdi + 8*rax + 16]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JA   LBB2_26

LBB2_27:
	LONG $0x4c10fbc5; WORD $0x18c7 // vmovsd    xmm1, qword [rdi + 8*rax + 24]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JBE  LBB2_29
	JMP  LBB2_28

LBB2_22:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x08c7 // vmovsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JBE  LBB2_25

LBB2_24:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x10c7 // vmovsd    xmm1, qword [rdi + 8*rax + 16]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JBE  LBB2_27

LBB2_26:
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	LONG $0x4c10fbc5; WORD $0x18c7 // vmovsd    xmm1, qword [rdi + 8*rax + 24]
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	JBE  LBB2_29

LBB2_28:
	LONG $0x0e11fbc5 // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5 // vmovapd    xmm0, xmm1
	JMP  LBB2_29

LBB2_15:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_16

LBB2_20:
	LONG $0x08c18348 // add    rcx, 8
	LONG $0x02c08348 // add    rax, 2
	JE   LBB2_4

LBB2_16:
	LONG $0x0c10f9c5; BYTE $0xcf   // vmovupd    xmm1, oword [rdi + 8*rcx]
	LONG $0x4c5df1c5; WORD $0x10cf // vminpd    xmm1, xmm1, oword [rdi + 8*rcx + 16]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5df3c5               // vminsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JAE  LBB2_18
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1

LBB2_18:
	LONG $0x4c10f9c5; WORD $0x20cf // vmovupd    xmm1, oword [rdi + 8*rcx + 32]
	LONG $0x4c5df1c5; WORD $0x30cf // vminpd    xmm1, xmm1, oword [rdi + 8*rcx + 48]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xca5df3c5               // vminsd    xmm1, xmm1, xmm2
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	JAE  LBB2_20
	LONG $0x0e11fbc5               // vmovsd    qword [rsi], xmm1
	LONG $0xc128f9c5               // vmovapd    xmm0, xmm1
	JMP  LBB2_20
