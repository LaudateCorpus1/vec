//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_hsum_float32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x000006c7; WORD $0x0000 // mov    dword [rsi], 0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB0_1
	LONG $0xc057f8c5               // vxorps    xmm0, xmm0, xmm0
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JB   LBB0_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x03e8c149               // shr    r8, 3
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x1fff // and    ecx, 536870911
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB0_13
	LONG $0xc057f8c5               // vxorps    xmm0, xmm0, xmm0
	WORD $0xc931                   // xor    ecx, ecx
	JMP  LBB0_5

LBB0_1:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JB   LBB0_9
	JMP  LBB0_12

LBB0_13:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx

LBB0_14:
	LONG $0x4c10f8c5; WORD $0x108f // vmovups    xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0c58f0c5; BYTE $0x8f   // vaddps    xmm1, xmm1, oword [rdi + 4*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xc058f2c5               // vaddss    xmm0, xmm1, xmm0
	LONG $0xc258fac5               // vaddss    xmm0, xmm0, xmm2
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4c10f8c5; WORD $0x308f // vmovups    xmm1, oword [rdi + 4*rcx + 48]
	LONG $0x4c58f0c5; WORD $0x208f // vaddps    xmm1, xmm1, oword [rdi + 4*rcx + 32]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca58f2c5               // vaddss    xmm1, xmm1, xmm2
	LONG $0xc158fac5               // vaddss    xmm0, xmm0, xmm1
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x10c18348               // add    rcx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_14

LBB0_5:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_7
	LONG $0x4c10f8c5; WORD $0x108f // vmovups    xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0c58f0c5; BYTE $0x8f   // vaddps    xmm1, xmm1, oword [rdi + 4*rcx]
	LONG $0x0579e3c4; WORD $0x01d1 // vpermilpd    xmm2, xmm1, 1
	LONG $0xc958e8c5               // vaddps    xmm1, xmm2, xmm1
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xc058f2c5               // vaddss    xmm0, xmm1, xmm0
	LONG $0xc258fac5               // vaddss    xmm0, xmm0, xmm2
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0

LBB0_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB0_12

LBB0_9:
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JE   LBB0_11

LBB0_10:
	LONG $0x0458fac5; BYTE $0x87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0611fac5             // vmovss    dword [rsi], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc183; BYTE $0xff     // add    ecx, -1
	JNE  LBB0_10

LBB0_11:
	LONG $0x03f88341 // cmp    r8d, 3
	JB   LBB0_12

LBB0_15:
	LONG $0x0458fac5; BYTE $0x87   // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0487 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 4]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0887 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 8]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x4458fac5; WORD $0x0c87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 12]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0xd039                   // cmp    eax, edx
	JB   LBB0_15

LBB0_12:
	RET

TEXT ·_hmax_float32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fac5               // vmovss    xmm0, dword [rdi]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB1_8
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JB   LBB1_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x03e8c149               // shr    r8, 3
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x1fff // and    ecx, 536870911
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB1_15
	WORD $0xc931                   // xor    ecx, ecx

LBB1_4:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB1_7
	LONG $0x0c10f8c5; BYTE $0x8f   // vmovups    xmm1, oword [rdi + 4*rcx]
	LONG $0x4c5ff0c5; WORD $0x108f // vmaxps    xmm1, xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5ff0c5               // vmaxps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5ff2c5               // vmaxss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JBE  LBB1_7
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1

LBB1_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8

LBB1_8:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB1_14
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JNE  LBB1_10

LBB1_13:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB1_21

LBB1_14:
	RET

LBB1_12:
	LONG $0x01c08348         // add    rax, 1
	WORD $0xc183; BYTE $0xff // add    ecx, -1
	JE   LBB1_13

LBB1_10:
	LONG $0x0c10fac5; BYTE $0x87 // vmovss    xmm1, dword [rdi + 4*rax]
	LONG $0xc12ef8c5             // vucomiss    xmm0, xmm1
	JAE  LBB1_12
	LONG $0x0e11fac5             // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5             // vmovaps    xmm0, xmm1
	JMP  LBB1_12

LBB1_29:
	LONG $0x04c08348 // add    rax, 4
	WORD $0xd039     // cmp    eax, edx
	JAE  LBB1_14

LBB1_21:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss    xmm1, dword [rdi + 4*rax]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JB   LBB1_22
	LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JB   LBB1_24

LBB1_25:
	LONG $0x4c10fac5; WORD $0x0887 // vmovss    xmm1, dword [rdi + 4*rax + 8]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JB   LBB1_26

LBB1_27:
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss    xmm1, dword [rdi + 4*rax + 12]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JAE  LBB1_29
	JMP  LBB1_28

LBB1_22:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JAE  LBB1_25

LBB1_24:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0887 // vmovss    xmm1, dword [rdi + 4*rax + 8]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JAE  LBB1_27

LBB1_26:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss    xmm1, dword [rdi + 4*rax + 12]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JAE  LBB1_29

LBB1_28:
	LONG $0x0e11fac5 // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5 // vmovaps    xmm0, xmm1
	JMP  LBB1_29

LBB1_15:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_16

LBB1_20:
	LONG $0x10c18348 // add    rcx, 16
	LONG $0x02c08348 // add    rax, 2
	JE   LBB1_4

LBB1_16:
	LONG $0x0c10f8c5; BYTE $0x8f   // vmovups    xmm1, oword [rdi + 4*rcx]
	LONG $0x4c5ff0c5; WORD $0x108f // vmaxps    xmm1, xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5ff0c5               // vmaxps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5ff2c5               // vmaxss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JBE  LBB1_18
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1

LBB1_18:
	LONG $0x4c10f8c5; WORD $0x208f // vmovups    xmm1, oword [rdi + 4*rcx + 32]
	LONG $0x4c5ff0c5; WORD $0x308f // vmaxps    xmm1, xmm1, oword [rdi + 4*rcx + 48]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5ff0c5               // vmaxps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5ff2c5               // vmaxss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JBE  LBB1_20
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	JMP  LBB1_20

TEXT ·_hmin_float32(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fac5               // vmovss    xmm0, dword [rdi]
	LONG $0x0611fac5               // vmovss    dword [rsi], xmm0
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JNE  LBB2_8
	WORD $0xfa83; BYTE $0x08       // cmp    edx, 8
	JB   LBB2_7
	WORD $0x8949; BYTE $0xd0       // mov    r8, rdx
	LONG $0x03e8c149               // shr    r8, 3
	WORD $0x8944; BYTE $0xc1       // mov    ecx, r8d
	LONG $0xffffe181; WORD $0x1fff // and    ecx, 536870911
	LONG $0x01e08341               // and    r8d, 1
	LONG $0x01f98348               // cmp    rcx, 1
	JNE  LBB2_15
	WORD $0xc931                   // xor    ecx, ecx

LBB2_4:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB2_7
	LONG $0x0c10f8c5; BYTE $0x8f   // vmovups    xmm1, oword [rdi + 4*rcx]
	LONG $0x4c5df0c5; WORD $0x108f // vminps    xmm1, xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5df0c5               // vminps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5df2c5               // vminss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JAE  LBB2_7
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1

LBB2_7:
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0xf8e08341         // and    r8d, -8

LBB2_8:
	WORD $0x3941; BYTE $0xd0 // cmp    r8d, edx
	JAE  LBB2_14
	WORD $0x6349; BYTE $0xc0 // movsxd    rax, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xd0 // add    r8d, edx
	WORD $0xd189             // mov    ecx, edx
	WORD $0xe183; BYTE $0x03 // and    ecx, 3
	JNE  LBB2_10

LBB2_13:
	LONG $0x03f88341 // cmp    r8d, 3
	JAE  LBB2_21

LBB2_14:
	RET

LBB2_12:
	LONG $0x01c08348         // add    rax, 1
	WORD $0xc183; BYTE $0xff // add    ecx, -1
	JE   LBB2_13

LBB2_10:
	LONG $0x0c10fac5; BYTE $0x87 // vmovss    xmm1, dword [rdi + 4*rax]
	LONG $0xc12ef8c5             // vucomiss    xmm0, xmm1
	JBE  LBB2_12
	LONG $0x0e11fac5             // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5             // vmovaps    xmm0, xmm1
	JMP  LBB2_12

LBB2_29:
	LONG $0x04c08348 // add    rax, 4
	WORD $0xd039     // cmp    eax, edx
	JAE  LBB2_14

LBB2_21:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss    xmm1, dword [rdi + 4*rax]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JA   LBB2_22
	LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JA   LBB2_24

LBB2_25:
	LONG $0x4c10fac5; WORD $0x0887 // vmovss    xmm1, dword [rdi + 4*rax + 8]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JA   LBB2_26

LBB2_27:
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss    xmm1, dword [rdi + 4*rax + 12]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JBE  LBB2_29
	JMP  LBB2_28

LBB2_22:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JBE  LBB2_25

LBB2_24:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0887 // vmovss    xmm1, dword [rdi + 4*rax + 8]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JBE  LBB2_27

LBB2_26:
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss    xmm1, dword [rdi + 4*rax + 12]
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	JBE  LBB2_29

LBB2_28:
	LONG $0x0e11fac5 // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5 // vmovaps    xmm0, xmm1
	JMP  LBB2_29

LBB2_15:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_16

LBB2_20:
	LONG $0x10c18348 // add    rcx, 16
	LONG $0x02c08348 // add    rax, 2
	JE   LBB2_4

LBB2_16:
	LONG $0x0c10f8c5; BYTE $0x8f   // vmovups    xmm1, oword [rdi + 4*rcx]
	LONG $0x4c5df0c5; WORD $0x108f // vminps    xmm1, xmm1, oword [rdi + 4*rcx + 16]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5df0c5               // vminps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5df2c5               // vminss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JAE  LBB2_18
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1

LBB2_18:
	LONG $0x4c10f8c5; WORD $0x208f // vmovups    xmm1, oword [rdi + 4*rcx + 32]
	LONG $0x4c5df0c5; WORD $0x308f // vminps    xmm1, xmm1, oword [rdi + 4*rcx + 48]
	LONG $0x0579e3c4; WORD $0x03d1 // vpermilpd    xmm2, xmm1, 3
	LONG $0xca5df0c5               // vminps    xmm1, xmm1, xmm2
	LONG $0xd116fac5               // vmovshdup    xmm2, xmm1
	LONG $0xca5df2c5               // vminss    xmm1, xmm1, xmm2
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	JAE  LBB2_20
	LONG $0x0e11fac5               // vmovss    dword [rsi], xmm1
	LONG $0xc128f8c5               // vmovaps    xmm0, xmm1
	JMP  LBB2_20
