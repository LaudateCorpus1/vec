//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_add_scalar(SB), $0-32

	MOVQ input+0(FP), DI
	MOVQ output+8(FP), SI
	MOVQ value+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB0_8
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB0_7
	LONG $0xc26ef9c5                           // vmovd    xmm0, edx
	LONG $0x587de2c4; BYTE $0xc0               // vpbroadcastd    ymm0, xmm0
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB0_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB0_4

LBB0_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB0_12:
	LONG $0x4cfefdc5; WORD $0xa007 // vpaddd    ymm1, ymm0, yword [rdi + rax - 96]
	LONG $0x4c7ffec5; WORD $0xa006 // vmovdqu    yword [rsi + rax - 96], ymm1
	LONG $0x4cfefdc5; WORD $0xc007 // vpaddd    ymm1, ymm0, yword [rdi + rax - 64]
	LONG $0x4c7ffec5; WORD $0xc006 // vmovdqu    yword [rsi + rax - 64], ymm1
	LONG $0x4cfefdc5; WORD $0xe007 // vpaddd    ymm1, ymm0, yword [rdi + rax - 32]
	LONG $0x4c7ffec5; WORD $0xe006 // vmovdqu    yword [rsi + rax - 32], ymm1
	LONG $0x0cfefdc5; BYTE $0x07   // vpaddd    ymm1, ymm0, yword [rdi + rax]
	LONG $0x0c7ffec5; BYTE $0x06   // vmovdqu    yword [rsi + rax], ymm1
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB0_12

LBB0_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB0_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x17048d4a         // lea    rax, [rdi + r10]
	WORD $0x0149; BYTE $0xf2 // add    r10, rsi
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xdb31             // xor    ebx, ebx

LBB0_6:
	LONG $0x0cfefdc5; BYTE $0x18   // vpaddd    ymm1, ymm0, yword [rax + rbx]
	LONG $0x7f7ec1c4; WORD $0x1a0c // vmovdqu    yword [r10 + rbx], ymm1
	LONG $0x20c38348               // add    rbx, 32
	WORD $0x3949; BYTE $0xd8       // cmp    r8, rbx
	JNE  LBB0_6

LBB0_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8

LBB0_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB0_20
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB0_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_19

LBB0_13:
	LONG $0x8e148d4e         // lea    r10, [rsi + 4*r9]
	LONG $0x08048d4b         // lea    rax, [r8 + r9]
	LONG $0x871c8d48         // lea    rbx, [rdi + 4*rax]
	LONG $0x04c38348         // add    rbx, 4
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	JAE  LBB0_16
	LONG $0x86048d48         // lea    rax, [rsi + 4*rax]
	LONG $0x04c08348         // add    rax, 4
	LONG $0x8f1c8d4a         // lea    rbx, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xc3 // cmp    rbx, rax
	JAE  LBB0_16
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_19

LBB0_16:
	LONG $0x01c08349             // add    r8, 1
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xe0e28349             // and    r10, -32
	LONG $0x0a048d4b             // lea    rax, [r10 + r9]
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0x8f1c8d4e             // lea    r11, [rdi + 4*r9]
	LONG $0x60c38349             // add    r11, 96
	LONG $0x8e0c8d4e             // lea    r9, [rsi + 4*r9]
	LONG $0x60c18349             // add    r9, 96
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_17:
	LONG $0xfe7dc1c4; WORD $0x9b4c; BYTE $0xa0 // vpaddd    ymm1, ymm0, yword [r11 + 4*rbx - 96]
	LONG $0xfe7dc1c4; WORD $0x9b54; BYTE $0xc0 // vpaddd    ymm2, ymm0, yword [r11 + 4*rbx - 64]
	LONG $0xfe7dc1c4; WORD $0x9b5c; BYTE $0xe0 // vpaddd    ymm3, ymm0, yword [r11 + 4*rbx - 32]
	LONG $0xfe7dc1c4; WORD $0x9b24             // vpaddd    ymm4, ymm0, yword [r11 + 4*rbx]
	LONG $0x7f7ec1c4; WORD $0x994c; BYTE $0xa0 // vmovdqu    yword [r9 + 4*rbx - 96], ymm1
	LONG $0x7f7ec1c4; WORD $0x9954; BYTE $0xc0 // vmovdqu    yword [r9 + 4*rbx - 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x995c; BYTE $0xe0 // vmovdqu    yword [r9 + 4*rbx - 32], ymm3
	LONG $0x7f7ec1c4; WORD $0x9924             // vmovdqu    yword [r9 + 4*rbx], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB0_17
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JE   LBB0_20

LBB0_19:
	WORD $0x1c8b; BYTE $0x87 // mov    ebx, dword [rdi + 4*rax]
	WORD $0xd301             // add    ebx, edx
	WORD $0x1c89; BYTE $0x86 // mov    dword [rsi + 4*rax], ebx
	LONG $0x01c08348         // add    rax, 1
	WORD $0xc839             // cmp    eax, ecx
	JB   LBB0_19

LBB0_20:
	VZEROUPPER
	RET
