//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_add_float32(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB0_8
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB0_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB0_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB0_4

LBB0_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB0_12:
	LONG $0x4410fcc5; WORD $0xa006 // vmovups    ymm0, yword [rsi + rax - 96]
	LONG $0x4458fcc5; WORD $0xa007 // vaddps    ymm0, ymm0, yword [rdi + rax - 96]
	LONG $0x4411fcc5; WORD $0xa002 // vmovups    yword [rdx + rax - 96], ymm0
	LONG $0x4410fcc5; WORD $0xc006 // vmovups    ymm0, yword [rsi + rax - 64]
	LONG $0x4458fcc5; WORD $0xc007 // vaddps    ymm0, ymm0, yword [rdi + rax - 64]
	LONG $0x4411fcc5; WORD $0xc002 // vmovups    yword [rdx + rax - 64], ymm0
	LONG $0x4410fcc5; WORD $0xe006 // vmovups    ymm0, yword [rsi + rax - 32]
	LONG $0x4458fcc5; WORD $0xe007 // vaddps    ymm0, ymm0, yword [rdi + rax - 32]
	LONG $0x4411fcc5; WORD $0xe002 // vmovups    yword [rdx + rax - 32], ymm0
	LONG $0x0410fcc5; BYTE $0x06   // vmovups    ymm0, yword [rsi + rax]
	LONG $0x0458fcc5; BYTE $0x07   // vaddps    ymm0, ymm0, yword [rdi + rax]
	LONG $0x0411fcc5; BYTE $0x02   // vmovups    yword [rdx + rax], ymm0
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB0_12

LBB0_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB0_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x160c8d4e         // lea    r9, [rsi + r10]
	LONG $0x171c8d4a         // lea    rbx, [rdi + r10]
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xc031             // xor    eax, eax

LBB0_6:
	LONG $0x107cc1c4; WORD $0x0104 // vmovups    ymm0, yword [r9 + rax]
	LONG $0x0458fcc5; BYTE $0x03   // vaddps    ymm0, ymm0, yword [rbx + rax]
	LONG $0x117cc1c4; WORD $0x0204 // vmovups    yword [r10 + rax], ymm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB0_6

LBB0_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8

LBB0_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB0_21
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB0_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_20

LBB0_13:
	LONG $0x8a148d4e         // lea    r10, [rdx + 4*r9]
	LONG $0x081c8d4b         // lea    rbx, [r8 + r9]
	LONG $0x9a048d48         // lea    rax, [rdx + 4*rbx]
	LONG $0x04c08348         // add    rax, 4
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x9f348d4c         // lea    r14, [rdi + 4*rbx]
	LONG $0x04c68349         // add    r14, 4
	LONG $0x8e3c8d4e         // lea    r15, [rsi + 4*r9]
	LONG $0x9e1c8d48         // lea    rbx, [rsi + 4*rbx]
	LONG $0x04c38348         // add    rbx, 4
	WORD $0x394d; BYTE $0xf2 // cmp    r10, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x3949; BYTE $0xc3 // cmp    r11, rax
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3 // setb    bl
	WORD $0x3949; BYTE $0xc7 // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB0_14
	WORD $0xc320             // and    bl, al
	JNE  LBB0_16
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xe0e28349         // and    r10, -32
	LONG $0x0a048d4b         // lea    rax, [r10 + r9]
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x60c38349         // add    r11, 96
	LONG $0x8e348d4e         // lea    r14, [rsi + 4*r9]
	LONG $0x60c68349         // add    r14, 96
	LONG $0x8a0c8d4e         // lea    r9, [rdx + 4*r9]
	LONG $0x60c18349         // add    r9, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB0_18:
	LONG $0x107cc1c4; WORD $0x9e44; BYTE $0xa0 // vmovups    ymm0, yword [r14 + 4*rbx - 96]
	LONG $0x107cc1c4; WORD $0x9e4c; BYTE $0xc0 // vmovups    ymm1, yword [r14 + 4*rbx - 64]
	LONG $0x107cc1c4; WORD $0x9e54; BYTE $0xe0 // vmovups    ymm2, yword [r14 + 4*rbx - 32]
	LONG $0x107cc1c4; WORD $0x9e1c             // vmovups    ymm3, yword [r14 + 4*rbx]
	LONG $0x587cc1c4; WORD $0x9b44; BYTE $0xa0 // vaddps    ymm0, ymm0, yword [r11 + 4*rbx - 96]
	LONG $0x5874c1c4; WORD $0x9b4c; BYTE $0xc0 // vaddps    ymm1, ymm1, yword [r11 + 4*rbx - 64]
	LONG $0x586cc1c4; WORD $0x9b54; BYTE $0xe0 // vaddps    ymm2, ymm2, yword [r11 + 4*rbx - 32]
	LONG $0x5864c1c4; WORD $0x9b1c             // vaddps    ymm3, ymm3, yword [r11 + 4*rbx]
	LONG $0x117cc1c4; WORD $0x9944; BYTE $0xa0 // vmovups    yword [r9 + 4*rbx - 96], ymm0
	LONG $0x117cc1c4; WORD $0x994c; BYTE $0xc0 // vmovups    yword [r9 + 4*rbx - 64], ymm1
	LONG $0x117cc1c4; WORD $0x9954; BYTE $0xe0 // vmovups    yword [r9 + 4*rbx - 32], ymm2
	LONG $0x117cc1c4; WORD $0x991c             // vmovups    yword [r9 + 4*rbx], ymm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB0_18
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB0_20
	JMP  LBB0_21

LBB0_14:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_20

LBB0_16:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB0_20:
	LONG $0x0410fac5; BYTE $0x86 // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0458fac5; BYTE $0x87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc839                 // cmp    eax, ecx
	JB   LBB0_20

LBB0_21:
	VZEROUPPER
	RET

TEXT ·_sub_float32(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB1_8
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB1_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB1_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB1_4

LBB1_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB1_12:
	LONG $0x4410fcc5; WORD $0xa007 // vmovups    ymm0, yword [rdi + rax - 96]
	LONG $0x445cfcc5; WORD $0xa006 // vsubps    ymm0, ymm0, yword [rsi + rax - 96]
	LONG $0x4411fcc5; WORD $0xa002 // vmovups    yword [rdx + rax - 96], ymm0
	LONG $0x4410fcc5; WORD $0xc007 // vmovups    ymm0, yword [rdi + rax - 64]
	LONG $0x445cfcc5; WORD $0xc006 // vsubps    ymm0, ymm0, yword [rsi + rax - 64]
	LONG $0x4411fcc5; WORD $0xc002 // vmovups    yword [rdx + rax - 64], ymm0
	LONG $0x4410fcc5; WORD $0xe007 // vmovups    ymm0, yword [rdi + rax - 32]
	LONG $0x445cfcc5; WORD $0xe006 // vsubps    ymm0, ymm0, yword [rsi + rax - 32]
	LONG $0x4411fcc5; WORD $0xe002 // vmovups    yword [rdx + rax - 32], ymm0
	LONG $0x0410fcc5; BYTE $0x07   // vmovups    ymm0, yword [rdi + rax]
	LONG $0x045cfcc5; BYTE $0x06   // vsubps    ymm0, ymm0, yword [rsi + rax]
	LONG $0x0411fcc5; BYTE $0x02   // vmovups    yword [rdx + rax], ymm0
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB1_12

LBB1_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB1_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x160c8d4e         // lea    r9, [rsi + r10]
	LONG $0x171c8d4a         // lea    rbx, [rdi + r10]
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xc031             // xor    eax, eax

LBB1_6:
	LONG $0x0410fcc5; BYTE $0x03   // vmovups    ymm0, yword [rbx + rax]
	LONG $0x5c7cc1c4; WORD $0x0104 // vsubps    ymm0, ymm0, yword [r9 + rax]
	LONG $0x117cc1c4; WORD $0x0204 // vmovups    yword [r10 + rax], ymm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB1_6

LBB1_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8

LBB1_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB1_21
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB1_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_20

LBB1_13:
	LONG $0x8a148d4e         // lea    r10, [rdx + 4*r9]
	LONG $0x081c8d4b         // lea    rbx, [r8 + r9]
	LONG $0x9a048d48         // lea    rax, [rdx + 4*rbx]
	LONG $0x04c08348         // add    rax, 4
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x9f348d4c         // lea    r14, [rdi + 4*rbx]
	LONG $0x04c68349         // add    r14, 4
	LONG $0x8e3c8d4e         // lea    r15, [rsi + 4*r9]
	LONG $0x9e1c8d48         // lea    rbx, [rsi + 4*rbx]
	LONG $0x04c38348         // add    rbx, 4
	WORD $0x394d; BYTE $0xf2 // cmp    r10, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x3949; BYTE $0xc3 // cmp    r11, rax
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3 // setb    bl
	WORD $0x3949; BYTE $0xc7 // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB1_14
	WORD $0xc320             // and    bl, al
	JNE  LBB1_16
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xe0e28349         // and    r10, -32
	LONG $0x0a048d4b         // lea    rax, [r10 + r9]
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x60c38349         // add    r11, 96
	LONG $0x8e348d4e         // lea    r14, [rsi + 4*r9]
	LONG $0x60c68349         // add    r14, 96
	LONG $0x8a0c8d4e         // lea    r9, [rdx + 4*r9]
	LONG $0x60c18349         // add    r9, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB1_18:
	LONG $0x107cc1c4; WORD $0x9b44; BYTE $0xa0 // vmovups    ymm0, yword [r11 + 4*rbx - 96]
	LONG $0x107cc1c4; WORD $0x9b4c; BYTE $0xc0 // vmovups    ymm1, yword [r11 + 4*rbx - 64]
	LONG $0x107cc1c4; WORD $0x9b54; BYTE $0xe0 // vmovups    ymm2, yword [r11 + 4*rbx - 32]
	LONG $0x107cc1c4; WORD $0x9b1c             // vmovups    ymm3, yword [r11 + 4*rbx]
	LONG $0x5c7cc1c4; WORD $0x9e44; BYTE $0xa0 // vsubps    ymm0, ymm0, yword [r14 + 4*rbx - 96]
	LONG $0x5c74c1c4; WORD $0x9e4c; BYTE $0xc0 // vsubps    ymm1, ymm1, yword [r14 + 4*rbx - 64]
	LONG $0x5c6cc1c4; WORD $0x9e54; BYTE $0xe0 // vsubps    ymm2, ymm2, yword [r14 + 4*rbx - 32]
	LONG $0x5c64c1c4; WORD $0x9e1c             // vsubps    ymm3, ymm3, yword [r14 + 4*rbx]
	LONG $0x117cc1c4; WORD $0x9944; BYTE $0xa0 // vmovups    yword [r9 + 4*rbx - 96], ymm0
	LONG $0x117cc1c4; WORD $0x994c; BYTE $0xc0 // vmovups    yword [r9 + 4*rbx - 64], ymm1
	LONG $0x117cc1c4; WORD $0x9954; BYTE $0xe0 // vmovups    yword [r9 + 4*rbx - 32], ymm2
	LONG $0x117cc1c4; WORD $0x991c             // vmovups    yword [r9 + 4*rbx], ymm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB1_18
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB1_20
	JMP  LBB1_21

LBB1_14:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_20

LBB1_16:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB1_20:
	LONG $0x0410fac5; BYTE $0x87 // vmovss    xmm0, dword [rdi + 4*rax]
	LONG $0x045cfac5; BYTE $0x86 // vsubss    xmm0, xmm0, dword [rsi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc839                 // cmp    eax, ecx
	JB   LBB1_20

LBB1_21:
	VZEROUPPER
	RET

TEXT ·_mul_float32(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB2_8
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB2_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0xff418d49                           // lea    rax, [r9 - 1]
	LONG $0x03e08341                           // and    r8d, 3
	LONG $0x03f88348                           // cmp    rax, 3
	JAE  LBB2_11
	WORD $0x3145; BYTE $0xd2                   // xor    r10d, r10d
	JMP  LBB2_4

LBB2_11:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000060b8; BYTE $0x00 // mov    eax, 96
	WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d

LBB2_12:
	LONG $0x4410fcc5; WORD $0xa006 // vmovups    ymm0, yword [rsi + rax - 96]
	LONG $0x4459fcc5; WORD $0xa007 // vmulps    ymm0, ymm0, yword [rdi + rax - 96]
	LONG $0x4411fcc5; WORD $0xa002 // vmovups    yword [rdx + rax - 96], ymm0
	LONG $0x4410fcc5; WORD $0xc006 // vmovups    ymm0, yword [rsi + rax - 64]
	LONG $0x4459fcc5; WORD $0xc007 // vmulps    ymm0, ymm0, yword [rdi + rax - 64]
	LONG $0x4411fcc5; WORD $0xc002 // vmovups    yword [rdx + rax - 64], ymm0
	LONG $0x4410fcc5; WORD $0xe006 // vmovups    ymm0, yword [rsi + rax - 32]
	LONG $0x4459fcc5; WORD $0xe007 // vmulps    ymm0, ymm0, yword [rdi + rax - 32]
	LONG $0x4411fcc5; WORD $0xe002 // vmovups    yword [rdx + rax - 32], ymm0
	LONG $0x0410fcc5; BYTE $0x06   // vmovups    ymm0, yword [rsi + rax]
	LONG $0x0459fcc5; BYTE $0x07   // vmulps    ymm0, ymm0, yword [rdi + rax]
	LONG $0x0411fcc5; BYTE $0x02   // vmovups    yword [rdx + rax], ymm0
	LONG $0x04c28349               // add    r10, 4
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x394d; BYTE $0xd1       // cmp    r9, r10
	JNE  LBB2_12

LBB2_4:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB2_7
	LONG $0x05e2c149         // shl    r10, 5
	LONG $0x160c8d4e         // lea    r9, [rsi + r10]
	LONG $0x171c8d4a         // lea    rbx, [rdi + r10]
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x05e0c149         // shl    r8, 5
	WORD $0xc031             // xor    eax, eax

LBB2_6:
	LONG $0x107cc1c4; WORD $0x0104 // vmovups    ymm0, yword [r9 + rax]
	LONG $0x0459fcc5; BYTE $0x03   // vmulps    ymm0, ymm0, yword [rbx + rax]
	LONG $0x117cc1c4; WORD $0x0204 // vmovups    yword [r10 + rax], ymm0
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB2_6

LBB2_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8

LBB2_8:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB2_21
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB2_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB2_20

LBB2_13:
	LONG $0x8a148d4e         // lea    r10, [rdx + 4*r9]
	LONG $0x081c8d4b         // lea    rbx, [r8 + r9]
	LONG $0x9a048d48         // lea    rax, [rdx + 4*rbx]
	LONG $0x04c08348         // add    rax, 4
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x9f348d4c         // lea    r14, [rdi + 4*rbx]
	LONG $0x04c68349         // add    r14, 4
	LONG $0x8e3c8d4e         // lea    r15, [rsi + 4*r9]
	LONG $0x9e1c8d48         // lea    rbx, [rsi + 4*rbx]
	LONG $0x04c38348         // add    rbx, 4
	WORD $0x394d; BYTE $0xf2 // cmp    r10, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x3949; BYTE $0xc3 // cmp    r11, rax
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xda // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3 // setb    bl
	WORD $0x3949; BYTE $0xc7 // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB2_14
	WORD $0xc320             // and    bl, al
	JNE  LBB2_16
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xe0e28349         // and    r10, -32
	LONG $0x0a048d4b         // lea    rax, [r10 + r9]
	LONG $0x8f1c8d4e         // lea    r11, [rdi + 4*r9]
	LONG $0x60c38349         // add    r11, 96
	LONG $0x8e348d4e         // lea    r14, [rsi + 4*r9]
	LONG $0x60c68349         // add    r14, 96
	LONG $0x8a0c8d4e         // lea    r9, [rdx + 4*r9]
	LONG $0x60c18349         // add    r9, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB2_18:
	LONG $0x107cc1c4; WORD $0x9e44; BYTE $0xa0 // vmovups    ymm0, yword [r14 + 4*rbx - 96]
	LONG $0x107cc1c4; WORD $0x9e4c; BYTE $0xc0 // vmovups    ymm1, yword [r14 + 4*rbx - 64]
	LONG $0x107cc1c4; WORD $0x9e54; BYTE $0xe0 // vmovups    ymm2, yword [r14 + 4*rbx - 32]
	LONG $0x107cc1c4; WORD $0x9e1c             // vmovups    ymm3, yword [r14 + 4*rbx]
	LONG $0x597cc1c4; WORD $0x9b44; BYTE $0xa0 // vmulps    ymm0, ymm0, yword [r11 + 4*rbx - 96]
	LONG $0x5974c1c4; WORD $0x9b4c; BYTE $0xc0 // vmulps    ymm1, ymm1, yword [r11 + 4*rbx - 64]
	LONG $0x596cc1c4; WORD $0x9b54; BYTE $0xe0 // vmulps    ymm2, ymm2, yword [r11 + 4*rbx - 32]
	LONG $0x5964c1c4; WORD $0x9b1c             // vmulps    ymm3, ymm3, yword [r11 + 4*rbx]
	LONG $0x117cc1c4; WORD $0x9944; BYTE $0xa0 // vmovups    yword [r9 + 4*rbx - 96], ymm0
	LONG $0x117cc1c4; WORD $0x994c; BYTE $0xc0 // vmovups    yword [r9 + 4*rbx - 64], ymm1
	LONG $0x117cc1c4; WORD $0x9954; BYTE $0xe0 // vmovups    yword [r9 + 4*rbx - 32], ymm2
	LONG $0x117cc1c4; WORD $0x991c             // vmovups    yword [r9 + 4*rbx], ymm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB2_18
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB2_20
	JMP  LBB2_21

LBB2_14:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB2_20

LBB2_16:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB2_20:
	LONG $0x0410fac5; BYTE $0x86 // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0459fac5; BYTE $0x87 // vmulss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc839                 // cmp    eax, ecx
	JB   LBB2_20

LBB2_21:
	VZEROUPPER
	RET

TEXT ·_div_float32(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	WORD $0xf883; BYTE $0x01     // cmp    eax, 1
	JNE  LBB3_7
	WORD $0xf983; BYTE $0x08     // cmp    ecx, 8
	JB   LBB3_6
	WORD $0x8949; BYTE $0xc8     // mov    r8, rcx
	LONG $0x03e8c149             // shr    r8, 3
	WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
	LONG $0xffffff25; BYTE $0x1f // and    eax, 536870911
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f88348             // cmp    rax, 1
	JNE  LBB3_10
	WORD $0xc031                 // xor    eax, eax
	JMP  LBB3_4

LBB3_10:
	WORD $0x894c; BYTE $0xc3 // mov    rbx, r8
	WORD $0x2948; BYTE $0xc3 // sub    rbx, rax
	WORD $0xc031             // xor    eax, eax

LBB3_11:
	LONG $0x0410fcc5; BYTE $0x86   // vmovups    ymm0, yword [rsi + 4*rax]
	LONG $0xc853fcc5               // vrcpps    ymm1, ymm0
	LONG $0x1410fcc5; BYTE $0x87   // vmovups    ymm2, yword [rdi + 4*rax]
	LONG $0xd959ecc5               // vmulps    ymm3, ymm2, ymm1
	LONG $0xc359fcc5               // vmulps    ymm0, ymm0, ymm3
	LONG $0xc05cecc5               // vsubps    ymm0, ymm2, ymm0
	LONG $0xc059f4c5               // vmulps    ymm0, ymm1, ymm0
	LONG $0xc058e4c5               // vaddps    ymm0, ymm3, ymm0
	LONG $0x0411fcc5; BYTE $0x82   // vmovups    yword [rdx + 4*rax], ymm0
	LONG $0x4410fcc5; WORD $0x2087 // vmovups    ymm0, yword [rdi + 4*rax + 32]
	LONG $0x4c10fcc5; WORD $0x2086 // vmovups    ymm1, yword [rsi + 4*rax + 32]
	LONG $0xd153fcc5               // vrcpps    ymm2, ymm1
	LONG $0xda59fcc5               // vmulps    ymm3, ymm0, ymm2
	LONG $0xcb59f4c5               // vmulps    ymm1, ymm1, ymm3
	LONG $0xc15cfcc5               // vsubps    ymm0, ymm0, ymm1
	LONG $0xc059ecc5               // vmulps    ymm0, ymm2, ymm0
	LONG $0xc058e4c5               // vaddps    ymm0, ymm3, ymm0
	LONG $0x4411fcc5; WORD $0x2082 // vmovups    yword [rdx + 4*rax + 32], ymm0
	LONG $0x10c08348               // add    rax, 16
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB3_11

LBB3_4:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB3_6
	LONG $0x0410fcc5; BYTE $0x86 // vmovups    ymm0, yword [rsi + 4*rax]
	LONG $0xc853fcc5             // vrcpps    ymm1, ymm0
	LONG $0x1410fcc5; BYTE $0x87 // vmovups    ymm2, yword [rdi + 4*rax]
	LONG $0xd959ecc5             // vmulps    ymm3, ymm2, ymm1
	LONG $0xc359fcc5             // vmulps    ymm0, ymm0, ymm3
	LONG $0xc05cecc5             // vsubps    ymm0, ymm2, ymm0
	LONG $0xc059f4c5             // vmulps    ymm0, ymm1, ymm0
	LONG $0xc058e4c5             // vaddps    ymm0, ymm3, ymm0
	LONG $0x0411fcc5; BYTE $0x82 // vmovups    yword [rdx + 4*rax], ymm0

LBB3_6:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8

LBB3_7:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB3_20
	WORD $0x6349; BYTE $0xd8 // movsxd    rbx, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB3_12
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	JMP  LBB3_19

LBB3_12:
	LONG $0x9a0c8d4c         // lea    r9, [rdx + 4*rbx]
	LONG $0x18048d49         // lea    rax, [r8 + rbx]
	LONG $0x82148d4c         // lea    r10, [rdx + 4*rax]
	LONG $0x04c28349         // add    r10, 4
	LONG $0x9f1c8d4c         // lea    r11, [rdi + 4*rbx]
	LONG $0x87348d4c         // lea    r14, [rdi + 4*rax]
	LONG $0x04c68349         // add    r14, 4
	LONG $0x9e3c8d4c         // lea    r15, [rsi + 4*rbx]
	LONG $0x86048d48         // lea    rax, [rsi + 4*rax]
	LONG $0x04c08348         // add    rax, 4
	WORD $0x394d; BYTE $0xf1 // cmp    r9, r14
	LONG $0xc6920f41         // setb    r14b
	WORD $0x394d; BYTE $0xd3 // cmp    r11, r10
	LONG $0xc3920f41         // setb    r11b
	WORD $0x3949; BYTE $0xc1 // cmp    r9, rax
	WORD $0x920f; BYTE $0xc0 // setb    al
	WORD $0x394d; BYTE $0xd7 // cmp    r15, r10
	LONG $0xc1920f41         // setb    r9b
	WORD $0x8445; BYTE $0xde // test    r14b, r11b
	JNE  LBB3_13
	WORD $0x2044; BYTE $0xc8 // and    al, r9b
	JNE  LBB3_15
	LONG $0x01c08349         // add    r8, 1
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8
	LONG $0xe0e18349         // and    r9, -32
	LONG $0x19048d49         // lea    rax, [r9 + rbx]
	LONG $0x9f148d4c         // lea    r10, [rdi + 4*rbx]
	LONG $0x60c28349         // add    r10, 96
	LONG $0x9e1c8d4c         // lea    r11, [rsi + 4*rbx]
	LONG $0x60c38349         // add    r11, 96
	LONG $0x9a348d4c         // lea    r14, [rdx + 4*rbx]
	LONG $0x60c68349         // add    r14, 96
	WORD $0xdb31             // xor    ebx, ebx

LBB3_17:
	LONG $0x107cc1c4; WORD $0x9a44; BYTE $0xa0 // vmovups    ymm0, yword [r10 + 4*rbx - 96]
	LONG $0x107cc1c4; WORD $0x9a4c; BYTE $0xc0 // vmovups    ymm1, yword [r10 + 4*rbx - 64]
	LONG $0x107cc1c4; WORD $0x9a54; BYTE $0xe0 // vmovups    ymm2, yword [r10 + 4*rbx - 32]
	LONG $0x107cc1c4; WORD $0x9a1c             // vmovups    ymm3, yword [r10 + 4*rbx]
	LONG $0x107cc1c4; WORD $0x9b64; BYTE $0xa0 // vmovups    ymm4, yword [r11 + 4*rbx - 96]
	LONG $0x107cc1c4; WORD $0x9b6c; BYTE $0xc0 // vmovups    ymm5, yword [r11 + 4*rbx - 64]
	LONG $0x107cc1c4; WORD $0x9b74; BYTE $0xe0 // vmovups    ymm6, yword [r11 + 4*rbx - 32]
	LONG $0xfc53fcc5                           // vrcpps    ymm7, ymm4
	LONG $0x107c41c4; WORD $0x9b04             // vmovups    ymm8, yword [r11 + 4*rbx]
	LONG $0xcf597cc5                           // vmulps    ymm9, ymm0, ymm7
	LONG $0xe459b4c5                           // vmulps    ymm4, ymm9, ymm4
	LONG $0xc45cfcc5                           // vsubps    ymm0, ymm0, ymm4
	LONG $0xc059c4c5                           // vmulps    ymm0, ymm7, ymm0
	LONG $0xe553fcc5                           // vrcpps    ymm4, ymm5
	LONG $0xc058b4c5                           // vaddps    ymm0, ymm9, ymm0
	LONG $0xfc59f4c5                           // vmulps    ymm7, ymm1, ymm4
	LONG $0xef59d4c5                           // vmulps    ymm5, ymm5, ymm7
	LONG $0xcd5cf4c5                           // vsubps    ymm1, ymm1, ymm5
	LONG $0xc959dcc5                           // vmulps    ymm1, ymm4, ymm1
	LONG $0xe653fcc5                           // vrcpps    ymm4, ymm6
	LONG $0xc958c4c5                           // vaddps    ymm1, ymm7, ymm1
	LONG $0xec59ecc5                           // vmulps    ymm5, ymm2, ymm4
	LONG $0xf559ccc5                           // vmulps    ymm6, ymm6, ymm5
	LONG $0xd65cecc5                           // vsubps    ymm2, ymm2, ymm6
	LONG $0xd259dcc5                           // vmulps    ymm2, ymm4, ymm2
	LONG $0x537cc1c4; BYTE $0xe0               // vrcpps    ymm4, ymm8
	LONG $0xd258d4c5                           // vaddps    ymm2, ymm5, ymm2
	LONG $0xec59e4c5                           // vmulps    ymm5, ymm3, ymm4
	LONG $0xf559bcc5                           // vmulps    ymm6, ymm8, ymm5
	LONG $0xde5ce4c5                           // vsubps    ymm3, ymm3, ymm6
	LONG $0xdb59dcc5                           // vmulps    ymm3, ymm4, ymm3
	LONG $0xdb58d4c5                           // vaddps    ymm3, ymm5, ymm3
	LONG $0x117cc1c4; WORD $0x9e44; BYTE $0xa0 // vmovups    yword [r14 + 4*rbx - 96], ymm0
	LONG $0x117cc1c4; WORD $0x9e4c; BYTE $0xc0 // vmovups    yword [r14 + 4*rbx - 64], ymm1
	LONG $0x117cc1c4; WORD $0x9e54; BYTE $0xe0 // vmovups    yword [r14 + 4*rbx - 32], ymm2
	LONG $0x117cc1c4; WORD $0x9e1c             // vmovups    yword [r14 + 4*rbx], ymm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xd9                   // cmp    r9, rbx
	JNE  LBB3_17
	WORD $0x394d; BYTE $0xc8                   // cmp    r8, r9
	JNE  LBB3_19
	JMP  LBB3_20

LBB3_13:
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	JMP  LBB3_19

LBB3_15:
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx

LBB3_19:
	LONG $0x0410fac5; BYTE $0x87 // vmovss    xmm0, dword [rdi + 4*rax]
	LONG $0x045efac5; BYTE $0x86 // vdivss    xmm0, xmm0, dword [rsi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	WORD $0xc839                 // cmp    eax, ecx
	JB   LBB3_19

LBB3_20:
	VZEROUPPER
	RET
