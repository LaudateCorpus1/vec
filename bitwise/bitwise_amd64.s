//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_and_avx512(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ size+24(FP), CX

	WORD $0xf983; BYTE $0x08 // cmp    ecx, 8
	JB   LBB0_5
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e8c141         // shr    r8d, 3
	LONG $0x01f88341         // cmp    r8d, 1
	JNE  LBB0_17
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_3

LBB0_17:
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0xfee18341             // and    r9d, -2
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB0_18:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff1e44db48fdf162                   // vpandq    zmm0, zmm0, zmmword [rsi + rbx - 64]
	QUAD $0xff1f447f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm0
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fdf162; WORD $0x04db; BYTE $0x1e // vpandq    zmm0, zmm0, zmmword [rsi + rbx]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm0
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc1                   // cmp    r9, rax
	JNE  LBB0_18

LBB0_3:
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB0_5
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fdf162; WORD $0x04db; BYTE $0x06 // vpandq    zmm0, zmm0, zmmword [rsi + rax]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm0

LBB0_5:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB0_16
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB0_8
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_15

LBB0_8:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB0_9
	WORD $0xc320                               // and    bl, al
	JNE  LBB0_11
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB0_13:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44db48fdd162                   // vpandq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cdb48f5d162                   // vpandq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54db48edd162                   // vpandq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cdb; BYTE $0xdb // vpandq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB0_13
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB0_15
	JMP  LBB0_16

LBB0_9:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB0_15

LBB0_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB0_15:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348 // and    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB0_15

LBB0_16:
	VZEROUPPER
	RET

TEXT ·_and_optimized(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB1_20
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB1_38
	WORD $0xf983; BYTE $0x04                   // cmp    ecx, 4
	JB   LBB1_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB1_18
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB1_5

LBB1_20:
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB1_25
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB1_36
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB1_23

LBB1_38:
	WORD $0xc985             // test    ecx, ecx
	JE   LBB1_50
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x20f88349         // cmp    r8, 32
	JAE  LBB1_41
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_46

LBB1_41:
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	LONG $0xc61c8d4a         // lea    rbx, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	LONG $0xc21c8d4a         // lea    rbx, [rdx + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	WORD $0x970f; BYTE $0xc3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc1970f41         // seta    r9b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xda // test    r10b, r11b
	JNE  LBB1_46
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	JNE  LBB1_46
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0xdb31             // xor    ebx, ebx

LBB1_44:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fdf162; WORD $0x04db; BYTE $0xde // vpandq    zmm0, zmm0, zmmword [rsi + 8*rbx]
	QUAD $0x01de4cdb48f5f162                   // vpandq    zmm1, zmm1, zmmword [rsi + 8*rbx + 64]
	QUAD $0x02de54db48edf162                   // vpandq    zmm2, zmm2, zmmword [rsi + 8*rbx + 128]
	QUAD $0x03de5cdb48e5f162                   // vpandq    zmm3, zmm3, zmmword [rsi + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x047f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm0
	QUAD $0x01df4c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm1
	QUAD $0x02df547f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm2
	QUAD $0x03df5c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB1_44
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB1_50

LBB1_46:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_48

LBB1_47:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348 // and    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB1_47

LBB1_48:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_50

LBB1_49:
	LONG $0xc20c8b48             // mov    rcx, qword [rdx + 8*rax]
	LONG $0xc60c2348             // and    rcx, qword [rsi + 8*rax]
	LONG $0xc70c8948             // mov    qword [rdi + 8*rax], rcx
	LONG $0xc24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rax + 8]
	LONG $0xc64c2348; BYTE $0x08 // and    rcx, qword [rsi + 8*rax + 8]
	LONG $0xc74c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rcx
	LONG $0xc24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rax + 16]
	LONG $0xc64c2348; BYTE $0x10 // and    rcx, qword [rsi + 8*rax + 16]
	LONG $0xc74c8948; BYTE $0x10 // mov    qword [rdi + 8*rax + 16], rcx
	LONG $0xc24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rax + 24]
	LONG $0xc64c2348; BYTE $0x18 // and    rcx, qword [rsi + 8*rax + 24]
	LONG $0xc74c8948; BYTE $0x18 // mov    qword [rdi + 8*rax + 24], rcx
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3949; BYTE $0xc0     // cmp    r8, rax
	JNE  LBB1_49
	JMP  LBB1_50

LBB1_18:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB1_19:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe01e // vandps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04dbfdc5; BYTE $0x1e   // vpand    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB1_19

LBB1_5:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB1_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04dbfdc5; BYTE $0x06 // vpand    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB1_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB1_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB1_10
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_17

LBB1_10:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB1_11
	WORD $0xc320                               // and    bl, al
	JNE  LBB1_13
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB1_15:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44db48fdd162                   // vpandq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cdb48f5d162                   // vpandq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54db48edd162                   // vpandq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cdb; BYTE $0xdb // vpandq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB1_15
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB1_17
	JMP  LBB1_50

LBB1_36:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB1_37:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff1e44db48fdf162                   // vpandq    zmm0, zmm0, zmmword [rsi + rbx - 64]
	QUAD $0xff1f447f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm0
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fdf162; WORD $0x04db; BYTE $0x1e // vpandq    zmm0, zmm0, zmmword [rsi + rbx]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm0
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc1                   // cmp    r9, rax
	JNE  LBB1_37

LBB1_23:
	WORD $0x854d; BYTE $0xc0                   // test    r8, r8
	JE   LBB1_25
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fdf162; WORD $0x04db; BYTE $0x06 // vpandq    zmm0, zmm0, zmmword [rsi + rax]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm0

LBB1_25:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB1_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB1_28
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_35

LBB1_28:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB1_29
	WORD $0xc320                               // and    bl, al
	JNE  LBB1_31
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB1_33:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44db48fdd162                   // vpandq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cdb48f5d162                   // vpandq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54db48edd162                   // vpandq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cdb; BYTE $0xdb // vpandq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB1_33
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB1_35
	JMP  LBB1_50

LBB1_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_17

LBB1_13:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB1_17:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348 // and    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB1_17
	JMP  LBB1_50

LBB1_29:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB1_35

LBB1_31:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB1_35:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348 // and    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB1_35

LBB1_50:
	VZEROUPPER
	RET

TEXT ·_and_avx2(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ size+24(FP), CX

	WORD $0xf983; BYTE $0x04 // cmp    ecx, 4
	JB   LBB2_5
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x02e8c141         // shr    r8d, 2
	LONG $0x01f88341         // cmp    r8d, 1
	JNE  LBB2_17
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_3

LBB2_17:
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0xfee18341             // and    r9d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB2_18:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe01e // vandps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04dbfdc5; BYTE $0x1e   // vpand    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB2_18

LBB2_3:
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB2_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04dbfdc5; BYTE $0x06 // vpand    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB2_5:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB2_16
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB2_8
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB2_15

LBB2_8:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB2_9
	WORD $0xc320                               // and    bl, al
	JNE  LBB2_11
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB2_13:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44db48fdd162                   // vpandq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cdb48f5d162                   // vpandq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54db48edd162                   // vpandq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cdb; BYTE $0xdb // vpandq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB2_13
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB2_15
	JMP  LBB2_16

LBB2_9:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB2_15

LBB2_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB2_15:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348 // and    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB2_15

LBB2_16:
	VZEROUPPER
	RET

TEXT ·_and_v3_avx512(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x08f88341         // cmp    r8d, 8
	JB   LBB3_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x03e9c141         // shr    r9d, 3
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB3_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB3_3

LBB3_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB3_20:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0x80       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 128
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0x801e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 128
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB3_20

LBB3_3:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB3_5
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0x80060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 128
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB3_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB3_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB3_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB3_17

LBB3_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB3_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB3_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB3_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB3_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x80       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 128
	QUAD $0xfede6c2548f5d362; BYTE $0x80       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 128
	QUAD $0xffde742548edd362; BYTE $0x80       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 128
	QUAD $0x80de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 128
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB3_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB3_17
	JMP  LBB3_18

LBB3_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB3_17

LBB3_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB3_17

LBB3_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB3_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348         // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348         // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB3_17

LBB3_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_and_v3_avx2(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x04f88341         // cmp    r8d, 4
	JB   LBB4_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x02e9c141         // shr    r9d, 2
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB4_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB4_3

LBB4_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB4_20:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe01e // vandps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe019 // vandps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04dbfdc5; BYTE $0x1e   // vpand    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04dbfdc5; BYTE $0x19   // vpand    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB4_20

LBB4_3:
	LONG $0x01c1f641             // test    r9b, 1
	JE   LBB4_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04dbfdc5; BYTE $0x06 // vpand    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04dbfdc5; BYTE $0x01 // vpand    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB4_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB4_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB4_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB4_17

LBB4_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB4_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB4_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB4_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB4_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x80       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 128
	QUAD $0xfede6c2548f5d362; BYTE $0x80       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 128
	QUAD $0xffde742548edd362; BYTE $0x80       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 128
	QUAD $0x80de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 128
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB4_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB4_17
	JMP  LBB4_18

LBB4_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB4_17

LBB4_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB4_17

LBB4_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB4_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348         // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348         // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB4_17

LBB4_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_and_v3_optimized(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ info+32(FP), R8
	ADDQ $8, SP

	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB5_22
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB5_42
	LONG $0x04f88341                           // cmp    r8d, 4
	JB   LBB5_7
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x02e9c149                           // shr    r9, 2
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x3f // and    r10d, 1073741823
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB5_20
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB5_5

LBB5_22:
	LONG $0x08f88341                           // cmp    r8d, 8
	JB   LBB5_27
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x03e9c149                           // shr    r9, 3
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x1f // and    r10d, 536870911
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB5_40
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB5_25

LBB5_42:
	WORD $0x8545; BYTE $0xc0 // test    r8d, r8d
	JE   LBB5_55
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x20f98349         // cmp    r9, 32
	JAE  LBB5_45
	WORD $0xc031             // xor    eax, eax
	JMP  LBB5_51

LBB5_45:
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	LONG $0xc7970f41         // seta    r15b
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc4970f41         // seta    r12b
	LONG $0xca1c8d4a         // lea    rbx, [rdx + 8*r9]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc5970f41         // seta    r13b
	LONG $0xc91c8d4a         // lea    rbx, [rcx + 8*r9]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	LONG $0xc6970f41         // seta    r14b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xe7 // test    r15b, r12b
	JNE  LBB5_51
	WORD $0x2045; BYTE $0xdd // and    r13b, r11b
	JNE  LBB5_51
	WORD $0x2045; BYTE $0xf2 // and    r10b, r14b
	JNE  LBB5_51
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0x1fe28341         // and    r10d, 31
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	WORD $0x294c; BYTE $0xd0 // sub    rax, r10
	WORD $0xdb31             // xor    ebx, ebx

LBB5_49:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x246f; BYTE $0xd9 // vmovdqu64    zmm4, zmmword [rcx + 8*rbx]
	QUAD $0x01d96c6f48fef162                   // vmovdqu64    zmm5, zmmword [rcx + 8*rbx + 64]
	QUAD $0x02d9746f48fef162                   // vmovdqu64    zmm6, zmmword [rcx + 8*rbx + 128]
	QUAD $0x03d97c6f48fef162                   // vmovdqu64    zmm7, zmmword [rcx + 8*rbx + 192]
	QUAD $0x80de242548fdf362                   // vpternlogq    zmm4, zmm0, zmmword [rsi + 8*rbx], 128
	QUAD $0x01de6c2548f5f362; BYTE $0x80       // vpternlogq    zmm5, zmm1, zmmword [rsi + 8*rbx + 64], 128
	QUAD $0x02de742548edf362; BYTE $0x80       // vpternlogq    zmm6, zmm2, zmmword [rsi + 8*rbx + 128], 128
	QUAD $0x03de7c2548e5f362; BYTE $0x80       // vpternlogq    zmm7, zmm3, zmmword [rsi + 8*rbx + 192], 128
	LONG $0x48fef162; WORD $0x247f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm4
	QUAD $0x01df6c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm5
	QUAD $0x02df747f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm6
	QUAD $0x03df7c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB5_49
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB5_55

LBB5_51:
	WORD $0x2941; BYTE $0xc0 // sub    r8d, eax
	LONG $0x01508d4c         // lea    r10, [rax + 1]
	LONG $0x01c0f641         // test    r8b, 1
	JE   LBB5_53
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348         // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348         // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB5_53:
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JE   LBB5_55

LBB5_54:
	LONG $0xc21c8b48             // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348             // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348             // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948             // mov    qword [rdi + 8*rax], rbx
	LONG $0xc25c8b48; BYTE $0x08 // mov    rbx, qword [rdx + 8*rax + 8]
	LONG $0xc65c2348; BYTE $0x08 // and    rbx, qword [rsi + 8*rax + 8]
	LONG $0xc15c2348; BYTE $0x08 // and    rbx, qword [rcx + 8*rax + 8]
	LONG $0xc75c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rbx
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB5_54
	JMP  LBB5_55

LBB5_20:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB5_21:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe01e // vandps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4454fcc5; WORD $0xe019 // vandps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04dbfdc5; BYTE $0x1e   // vpand    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04dbfdc5; BYTE $0x19   // vpand    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB5_21

LBB5_5:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB5_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04dbfdc5; BYTE $0x06 // vpand    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04dbfdc5; BYTE $0x01 // vpand    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB5_7:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB5_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB5_10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_19

LBB5_40:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB5_41:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0x80       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 128
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0x801e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 128
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB5_41

LBB5_25:
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB5_27
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0x80060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 128
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB5_27:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB5_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB5_30
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_39

LBB5_10:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB5_11
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB5_13
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB5_15
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB5_17:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x80       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 128
	QUAD $0xfede6c2548f5d362; BYTE $0x80       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 128
	QUAD $0xffde742548edd362; BYTE $0x80       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 128
	QUAD $0x80de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 128
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB5_17
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB5_19
	JMP  LBB5_55

LBB5_30:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB5_31
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB5_33
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB5_35
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB5_37:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x80       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 128
	QUAD $0xfede6c2548f5d362; BYTE $0x80       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 128
	QUAD $0xffde742548edd362; BYTE $0x80       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 128
	QUAD $0x80de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 128
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB5_37
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB5_39
	JMP  LBB5_55

LBB5_15:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_19

LBB5_35:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_39

LBB5_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_19

LBB5_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB5_19:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348         // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348         // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB5_19
	JMP  LBB5_55

LBB5_31:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB5_39

LBB5_33:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB5_39:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c2348         // and    rbx, qword [rsi + 8*rax]
	LONG $0xc11c2348         // and    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB5_39

LBB5_55:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_or_optimized(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB6_20
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB6_38
	WORD $0xf983; BYTE $0x04                   // cmp    ecx, 4
	JB   LBB6_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB6_18
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB6_5

LBB6_20:
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB6_25
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB6_36
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB6_23

LBB6_38:
	WORD $0xc985             // test    ecx, ecx
	JE   LBB6_50
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x20f88349         // cmp    r8, 32
	JAE  LBB6_41
	WORD $0xc031             // xor    eax, eax
	JMP  LBB6_46

LBB6_41:
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	LONG $0xc61c8d4a         // lea    rbx, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	LONG $0xc21c8d4a         // lea    rbx, [rdx + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	WORD $0x970f; BYTE $0xc3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc1970f41         // seta    r9b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xda // test    r10b, r11b
	JNE  LBB6_46
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	JNE  LBB6_46
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0xdb31             // xor    ebx, ebx

LBB6_44:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fdf162; WORD $0x04eb; BYTE $0xde // vporq    zmm0, zmm0, zmmword [rsi + 8*rbx]
	QUAD $0x01de4ceb48f5f162                   // vporq    zmm1, zmm1, zmmword [rsi + 8*rbx + 64]
	QUAD $0x02de54eb48edf162                   // vporq    zmm2, zmm2, zmmword [rsi + 8*rbx + 128]
	QUAD $0x03de5ceb48e5f162                   // vporq    zmm3, zmm3, zmmword [rsi + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x047f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm0
	QUAD $0x01df4c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm1
	QUAD $0x02df547f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm2
	QUAD $0x03df5c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB6_44
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB6_50

LBB6_46:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB6_48

LBB6_47:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48 // or    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB6_47

LBB6_48:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB6_50

LBB6_49:
	LONG $0xc20c8b48             // mov    rcx, qword [rdx + 8*rax]
	LONG $0xc60c0b48             // or    rcx, qword [rsi + 8*rax]
	LONG $0xc70c8948             // mov    qword [rdi + 8*rax], rcx
	LONG $0xc24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rax + 8]
	LONG $0xc64c0b48; BYTE $0x08 // or    rcx, qword [rsi + 8*rax + 8]
	LONG $0xc74c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rcx
	LONG $0xc24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rax + 16]
	LONG $0xc64c0b48; BYTE $0x10 // or    rcx, qword [rsi + 8*rax + 16]
	LONG $0xc74c8948; BYTE $0x10 // mov    qword [rdi + 8*rax + 16], rcx
	LONG $0xc24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rax + 24]
	LONG $0xc64c0b48; BYTE $0x18 // or    rcx, qword [rsi + 8*rax + 24]
	LONG $0xc74c8948; BYTE $0x18 // mov    qword [rdi + 8*rax + 24], rcx
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3949; BYTE $0xc0     // cmp    r8, rax
	JNE  LBB6_49
	JMP  LBB6_50

LBB6_18:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB6_19:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe01e // vorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04ebfdc5; BYTE $0x1e   // vpor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB6_19

LBB6_5:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB6_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04ebfdc5; BYTE $0x06 // vpor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB6_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB6_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB6_10
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB6_17

LBB6_10:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB6_11
	WORD $0xc320                               // and    bl, al
	JNE  LBB6_13
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB6_15:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44eb48fdd162                   // vporq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4ceb48f5d162                   // vporq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54eb48edd162                   // vporq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1ceb; BYTE $0xdb // vporq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB6_15
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB6_17
	JMP  LBB6_50

LBB6_36:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB6_37:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff1e44eb48fdf162                   // vporq    zmm0, zmm0, zmmword [rsi + rbx - 64]
	QUAD $0xff1f447f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm0
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fdf162; WORD $0x04eb; BYTE $0x1e // vporq    zmm0, zmm0, zmmword [rsi + rbx]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm0
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc1                   // cmp    r9, rax
	JNE  LBB6_37

LBB6_23:
	WORD $0x854d; BYTE $0xc0                   // test    r8, r8
	JE   LBB6_25
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fdf162; WORD $0x04eb; BYTE $0x06 // vporq    zmm0, zmm0, zmmword [rsi + rax]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm0

LBB6_25:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB6_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB6_28
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB6_35

LBB6_28:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB6_29
	WORD $0xc320                               // and    bl, al
	JNE  LBB6_31
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB6_33:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44eb48fdd162                   // vporq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4ceb48f5d162                   // vporq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54eb48edd162                   // vporq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1ceb; BYTE $0xdb // vporq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB6_33
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB6_35
	JMP  LBB6_50

LBB6_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB6_17

LBB6_13:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB6_17:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48 // or    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB6_17
	JMP  LBB6_50

LBB6_29:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB6_35

LBB6_31:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB6_35:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48 // or    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB6_35

LBB6_50:
	VZEROUPPER
	RET

TEXT ·_or_avx2(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ size+24(FP), CX

	WORD $0xf983; BYTE $0x04 // cmp    ecx, 4
	JB   LBB7_5
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x02e8c141         // shr    r8d, 2
	LONG $0x01f88341         // cmp    r8d, 1
	JNE  LBB7_17
	WORD $0xc031             // xor    eax, eax
	JMP  LBB7_3

LBB7_17:
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0xfee18341             // and    r9d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB7_18:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe01e // vorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04ebfdc5; BYTE $0x1e   // vpor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB7_18

LBB7_3:
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB7_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04ebfdc5; BYTE $0x06 // vpor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB7_5:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB7_16
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB7_8
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB7_15

LBB7_8:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB7_9
	WORD $0xc320                               // and    bl, al
	JNE  LBB7_11
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB7_13:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44eb48fdd162                   // vporq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4ceb48f5d162                   // vporq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54eb48edd162                   // vporq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1ceb; BYTE $0xdb // vporq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB7_13
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB7_15
	JMP  LBB7_16

LBB7_9:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB7_15

LBB7_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB7_15:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48 // or    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB7_15

LBB7_16:
	VZEROUPPER
	RET

TEXT ·_or_v3_avx512(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x08f88341         // cmp    r8d, 8
	JB   LBB8_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x03e9c141         // shr    r9d, 3
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB8_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB8_3

LBB8_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB8_20:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0xfe       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 254
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0xfe1e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 254
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB8_20

LBB8_3:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB8_5
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0xfe060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 254
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB8_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB8_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB8_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB8_17

LBB8_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB8_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB8_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB8_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB8_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0xfe       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 254
	QUAD $0xfede6c2548f5d362; BYTE $0xfe       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 254
	QUAD $0xffde742548edd362; BYTE $0xfe       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 254
	QUAD $0xfede3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 254
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB8_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB8_17
	JMP  LBB8_18

LBB8_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB8_17

LBB8_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB8_17

LBB8_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB8_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48         // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48         // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB8_17

LBB8_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_or_v3_avx2(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x04f88341         // cmp    r8d, 4
	JB   LBB9_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x02e9c141         // shr    r9d, 2
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB9_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB9_3

LBB9_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB9_20:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe01e // vorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe019 // vorps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04ebfdc5; BYTE $0x1e   // vpor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04ebfdc5; BYTE $0x19   // vpor    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB9_20

LBB9_3:
	LONG $0x01c1f641             // test    r9b, 1
	JE   LBB9_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04ebfdc5; BYTE $0x06 // vpor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04ebfdc5; BYTE $0x01 // vpor    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB9_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB9_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB9_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB9_17

LBB9_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB9_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB9_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB9_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB9_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0xfe       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 254
	QUAD $0xfede6c2548f5d362; BYTE $0xfe       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 254
	QUAD $0xffde742548edd362; BYTE $0xfe       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 254
	QUAD $0xfede3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 254
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB9_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB9_17
	JMP  LBB9_18

LBB9_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB9_17

LBB9_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB9_17

LBB9_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB9_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48         // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48         // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB9_17

LBB9_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_or_v3_optimized(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ info+32(FP), R8
	ADDQ $8, SP

	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB10_22
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB10_42
	LONG $0x04f88341                           // cmp    r8d, 4
	JB   LBB10_7
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x02e9c149                           // shr    r9, 2
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x3f // and    r10d, 1073741823
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB10_20
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB10_5

LBB10_22:
	LONG $0x08f88341                           // cmp    r8d, 8
	JB   LBB10_27
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x03e9c149                           // shr    r9, 3
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x1f // and    r10d, 536870911
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB10_40
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB10_25

LBB10_42:
	WORD $0x8545; BYTE $0xc0 // test    r8d, r8d
	JE   LBB10_55
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x20f98349         // cmp    r9, 32
	JAE  LBB10_45
	WORD $0xc031             // xor    eax, eax
	JMP  LBB10_51

LBB10_45:
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	LONG $0xc7970f41         // seta    r15b
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc4970f41         // seta    r12b
	LONG $0xca1c8d4a         // lea    rbx, [rdx + 8*r9]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc5970f41         // seta    r13b
	LONG $0xc91c8d4a         // lea    rbx, [rcx + 8*r9]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	LONG $0xc6970f41         // seta    r14b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xe7 // test    r15b, r12b
	JNE  LBB10_51
	WORD $0x2045; BYTE $0xdd // and    r13b, r11b
	JNE  LBB10_51
	WORD $0x2045; BYTE $0xf2 // and    r10b, r14b
	JNE  LBB10_51
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0x1fe28341         // and    r10d, 31
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	WORD $0x294c; BYTE $0xd0 // sub    rax, r10
	WORD $0xdb31             // xor    ebx, ebx

LBB10_49:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x246f; BYTE $0xd9 // vmovdqu64    zmm4, zmmword [rcx + 8*rbx]
	QUAD $0x01d96c6f48fef162                   // vmovdqu64    zmm5, zmmword [rcx + 8*rbx + 64]
	QUAD $0x02d9746f48fef162                   // vmovdqu64    zmm6, zmmword [rcx + 8*rbx + 128]
	QUAD $0x03d97c6f48fef162                   // vmovdqu64    zmm7, zmmword [rcx + 8*rbx + 192]
	QUAD $0xfede242548fdf362                   // vpternlogq    zmm4, zmm0, zmmword [rsi + 8*rbx], 254
	QUAD $0x01de6c2548f5f362; BYTE $0xfe       // vpternlogq    zmm5, zmm1, zmmword [rsi + 8*rbx + 64], 254
	QUAD $0x02de742548edf362; BYTE $0xfe       // vpternlogq    zmm6, zmm2, zmmword [rsi + 8*rbx + 128], 254
	QUAD $0x03de7c2548e5f362; BYTE $0xfe       // vpternlogq    zmm7, zmm3, zmmword [rsi + 8*rbx + 192], 254
	LONG $0x48fef162; WORD $0x247f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm4
	QUAD $0x01df6c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm5
	QUAD $0x02df747f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm6
	QUAD $0x03df7c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB10_49
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB10_55

LBB10_51:
	WORD $0x2941; BYTE $0xc0 // sub    r8d, eax
	LONG $0x01508d4c         // lea    r10, [rax + 1]
	LONG $0x01c0f641         // test    r8b, 1
	JE   LBB10_53
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48         // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48         // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB10_53:
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JE   LBB10_55

LBB10_54:
	LONG $0xc21c8b48             // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48             // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48             // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948             // mov    qword [rdi + 8*rax], rbx
	LONG $0xc25c8b48; BYTE $0x08 // mov    rbx, qword [rdx + 8*rax + 8]
	LONG $0xc65c0b48; BYTE $0x08 // or    rbx, qword [rsi + 8*rax + 8]
	LONG $0xc15c0b48; BYTE $0x08 // or    rbx, qword [rcx + 8*rax + 8]
	LONG $0xc75c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rbx
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB10_54
	JMP  LBB10_55

LBB10_20:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB10_21:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe01e // vorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4456fcc5; WORD $0xe019 // vorps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04ebfdc5; BYTE $0x1e   // vpor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04ebfdc5; BYTE $0x19   // vpor    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB10_21

LBB10_5:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB10_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04ebfdc5; BYTE $0x06 // vpor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04ebfdc5; BYTE $0x01 // vpor    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB10_7:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB10_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB10_10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_19

LBB10_40:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB10_41:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0xfe       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 254
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0xfe1e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 254
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB10_41

LBB10_25:
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB10_27
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0xfe060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 254
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB10_27:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB10_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB10_30
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_39

LBB10_10:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB10_11
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB10_13
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB10_15
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB10_17:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0xfe       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 254
	QUAD $0xfede6c2548f5d362; BYTE $0xfe       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 254
	QUAD $0xffde742548edd362; BYTE $0xfe       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 254
	QUAD $0xfede3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 254
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB10_17
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB10_19
	JMP  LBB10_55

LBB10_30:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB10_31
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB10_33
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB10_35
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB10_37:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0xfe       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 254
	QUAD $0xfede6c2548f5d362; BYTE $0xfe       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 254
	QUAD $0xffde742548edd362; BYTE $0xfe       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 254
	QUAD $0xfede3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 254
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB10_37
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB10_39
	JMP  LBB10_55

LBB10_15:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_19

LBB10_35:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_39

LBB10_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_19

LBB10_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB10_19:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48         // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48         // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB10_19
	JMP  LBB10_55

LBB10_31:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB10_39

LBB10_33:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB10_39:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c0b48         // or    rbx, qword [rsi + 8*rax]
	LONG $0xc11c0b48         // or    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB10_39

LBB10_55:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_xor_optimized(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB11_20
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB11_38
	WORD $0xf983; BYTE $0x04                   // cmp    ecx, 4
	JB   LBB11_7
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x02e8c149                           // shr    r8, 2
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB11_18
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB11_5

LBB11_20:
	WORD $0xf983; BYTE $0x08                   // cmp    ecx, 8
	JB   LBB11_25
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	LONG $0x03e8c149                           // shr    r8, 3
	WORD $0x8945; BYTE $0xc1                   // mov    r9d, r8d
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0x01e08341                           // and    r8d, 1
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB11_36
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB11_23

LBB11_38:
	WORD $0xc985             // test    ecx, ecx
	JE   LBB11_50
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x20f88349         // cmp    r8, 32
	JAE  LBB11_41
	WORD $0xc031             // xor    eax, eax
	JMP  LBB11_46

LBB11_41:
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	LONG $0xc61c8d4a         // lea    rbx, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	LONG $0xc21c8d4a         // lea    rbx, [rdx + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	WORD $0x970f; BYTE $0xc3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc1970f41         // seta    r9b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xda // test    r10b, r11b
	JNE  LBB11_46
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	JNE  LBB11_46
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0xdb31             // xor    ebx, ebx

LBB11_44:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fdf162; WORD $0x04ef; BYTE $0xde // vpxorq    zmm0, zmm0, zmmword [rsi + 8*rbx]
	QUAD $0x01de4cef48f5f162                   // vpxorq    zmm1, zmm1, zmmword [rsi + 8*rbx + 64]
	QUAD $0x02de54ef48edf162                   // vpxorq    zmm2, zmm2, zmmword [rsi + 8*rbx + 128]
	QUAD $0x03de5cef48e5f162                   // vpxorq    zmm3, zmm3, zmmword [rsi + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x047f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm0
	QUAD $0x01df4c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm1
	QUAD $0x02df547f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm2
	QUAD $0x03df5c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB11_44
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB11_50

LBB11_46:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB11_48

LBB11_47:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348 // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB11_47

LBB11_48:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB11_50

LBB11_49:
	LONG $0xc20c8b48             // mov    rcx, qword [rdx + 8*rax]
	LONG $0xc60c3348             // xor    rcx, qword [rsi + 8*rax]
	LONG $0xc70c8948             // mov    qword [rdi + 8*rax], rcx
	LONG $0xc24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rax + 8]
	LONG $0xc64c3348; BYTE $0x08 // xor    rcx, qword [rsi + 8*rax + 8]
	LONG $0xc74c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rcx
	LONG $0xc24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rax + 16]
	LONG $0xc64c3348; BYTE $0x10 // xor    rcx, qword [rsi + 8*rax + 16]
	LONG $0xc74c8948; BYTE $0x10 // mov    qword [rdi + 8*rax + 16], rcx
	LONG $0xc24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rax + 24]
	LONG $0xc64c3348; BYTE $0x18 // xor    rcx, qword [rsi + 8*rax + 24]
	LONG $0xc74c8948; BYTE $0x18 // mov    qword [rdi + 8*rax + 24], rcx
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3949; BYTE $0xc0     // cmp    r8, rax
	JNE  LBB11_49
	JMP  LBB11_50

LBB11_18:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB11_19:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe01e // vxorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04effdc5; BYTE $0x1e   // vpxor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB11_19

LBB11_5:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB11_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04effdc5; BYTE $0x06 // vpxor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB11_7:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB11_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB11_10
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB11_17

LBB11_10:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB11_11
	WORD $0xc320                               // and    bl, al
	JNE  LBB11_13
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB11_15:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44ef48fdd162                   // vpxorq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cef48f5d162                   // vpxorq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54ef48edd162                   // vpxorq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cef; BYTE $0xdb // vpxorq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB11_15
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB11_17
	JMP  LBB11_50

LBB11_36:
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB11_37:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff1e44ef48fdf162                   // vpxorq    zmm0, zmm0, zmmword [rsi + rbx - 64]
	QUAD $0xff1f447f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm0
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fdf162; WORD $0x04ef; BYTE $0x1e // vpxorq    zmm0, zmm0, zmmword [rsi + rbx]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm0
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc1                   // cmp    r9, rax
	JNE  LBB11_37

LBB11_23:
	WORD $0x854d; BYTE $0xc0                   // test    r8, r8
	JE   LBB11_25
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fdf162; WORD $0x04ef; BYTE $0x06 // vpxorq    zmm0, zmm0, zmmword [rsi + rax]
	LONG $0x48fef162; WORD $0x047f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm0

LBB11_25:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xf8e08341         // and    r8d, -8
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB11_50
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB11_28
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB11_35

LBB11_28:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB11_29
	WORD $0xc320                               // and    bl, al
	JNE  LBB11_31
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB11_33:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44ef48fdd162                   // vpxorq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cef48f5d162                   // vpxorq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54ef48edd162                   // vpxorq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cef; BYTE $0xdb // vpxorq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB11_33
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB11_35
	JMP  LBB11_50

LBB11_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB11_17

LBB11_13:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB11_17:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348 // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB11_17
	JMP  LBB11_50

LBB11_29:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB11_35

LBB11_31:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB11_35:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348 // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB11_35

LBB11_50:
	VZEROUPPER
	RET

TEXT ·_xor_avx2(SB), $0-32

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ size+24(FP), CX

	WORD $0xf983; BYTE $0x04 // cmp    ecx, 4
	JB   LBB12_5
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x02e8c141         // shr    r8d, 2
	LONG $0x01f88341         // cmp    r8d, 1
	JNE  LBB12_17
	WORD $0xc031             // xor    eax, eax
	JMP  LBB12_3

LBB12_17:
	WORD $0x8945; BYTE $0xc1     // mov    r9d, r8d
	LONG $0xfee18341             // and    r9d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB12_18:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe01e // vxorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04effdc5; BYTE $0x1e   // vpxor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB12_18

LBB12_3:
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB12_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04effdc5; BYTE $0x06 // vpxor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB12_5:
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0xfce08341         // and    r8d, -4
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB12_16
	WORD $0x634d; BYTE $0xc8 // movsxd    r9, r8d
	WORD $0xf741; BYTE $0xd0 // not    r8d
	WORD $0x0141; BYTE $0xc8 // add    r8d, ecx
	LONG $0x1ff88341         // cmp    r8d, 31
	JAE  LBB12_8
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB12_15

LBB12_8:
	LONG $0xcf148d4e                           // lea    r10, [rdi + 8*r9]
	LONG $0x081c8d4b                           // lea    rbx, [r8 + r9]
	LONG $0xdf048d48                           // lea    rax, [rdi + 8*rbx]
	LONG $0x08c08348                           // add    rax, 8
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xde348d4c                           // lea    r14, [rsi + 8*rbx]
	LONG $0x08c68349                           // add    r14, 8
	LONG $0xca3c8d4e                           // lea    r15, [rdx + 8*r9]
	LONG $0xda1c8d48                           // lea    rbx, [rdx + 8*rbx]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x394d; BYTE $0xf2                   // cmp    r10, r14
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x3949; BYTE $0xc3                   // cmp    r11, rax
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	WORD $0x920f; BYTE $0xc3                   // setb    bl
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x8445; BYTE $0xde                   // test    r14b, r11b
	JNE  LBB12_9
	WORD $0xc320                               // and    bl, al
	JNE  LBB12_11
	LONG $0x01c08349                           // add    r8, 1
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0x0a048d4b                           // lea    rax, [r10 + r9]
	LONG $0xce1c8d4e                           // lea    r11, [rsi + 8*r9]
	LONG $0xc0c38149; WORD $0x0000; BYTE $0x00 // add    r11, 192
	LONG $0xca348d4e                           // lea    r14, [rdx + 8*r9]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xcf0c8d4e                           // lea    r9, [rdi + 8*r9]
	LONG $0xc0c18149; WORD $0x0000; BYTE $0x00 // add    r9, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB12_13:
	QUAD $0xfdde446f48fed162                   // vmovdqu64    zmm0, zmmword [r14 + 8*rbx - 192]
	QUAD $0xfede4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r14 + 8*rbx - 128]
	QUAD $0xffde546f48fed162                   // vmovdqu64    zmm2, zmmword [r14 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xde // vmovdqu64    zmm3, zmmword [r14 + 8*rbx]
	QUAD $0xfddb44ef48fdd162                   // vpxorq    zmm0, zmm0, zmmword [r11 + 8*rbx - 192]
	QUAD $0xfedb4cef48f5d162                   // vpxorq    zmm1, zmm1, zmmword [r11 + 8*rbx - 128]
	QUAD $0xffdb54ef48edd162                   // vpxorq    zmm2, zmm2, zmmword [r11 + 8*rbx - 64]
	LONG $0x48e5d162; WORD $0x1cef; BYTE $0xdb // vpxorq    zmm3, zmm3, zmmword [r11 + 8*rbx]
	QUAD $0xfdd9447f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 192], zmm0
	QUAD $0xfed94c7f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 128], zmm1
	QUAD $0xffd9547f48fed162                   // vmovdqu64    zmmword [r9 + 8*rbx - 64], zmm2
	LONG $0x48fed162; WORD $0x1c7f; BYTE $0xd9 // vmovdqu64    zmmword [r9 + 8*rbx], zmm3
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB12_13
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	JNE  LBB12_15
	JMP  LBB12_16

LBB12_9:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	JMP  LBB12_15

LBB12_11:
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9

LBB12_15:
	LONG $0xc21c8b48 // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348 // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc71c8948 // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348 // add    rax, 1
	WORD $0xc839     // cmp    eax, ecx
	JB   LBB12_15

LBB12_16:
	VZEROUPPER
	RET

TEXT ·_xor_v3_avx512(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x08f88341         // cmp    r8d, 8
	JB   LBB13_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x03e9c141         // shr    r9d, 3
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB13_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB13_3

LBB13_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB13_20:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0x96       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 150
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0x961e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 150
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB13_20

LBB13_3:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB13_5
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0x96060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 150
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB13_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB13_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB13_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB13_17

LBB13_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB13_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB13_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB13_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB13_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x96       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 150
	QUAD $0xfede6c2548f5d362; BYTE $0x96       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 150
	QUAD $0xffde742548edd362; BYTE $0x96       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 150
	QUAD $0x96de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 150
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB13_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB13_17
	JMP  LBB13_18

LBB13_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB13_17

LBB13_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB13_17

LBB13_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB13_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348         // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348         // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB13_17

LBB13_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_xor_v3_avx2(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ size+32(FP), R8
	ADDQ $8, SP

	LONG $0x04f88341         // cmp    r8d, 4
	JB   LBB14_5
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x02e9c141         // shr    r9d, 2
	LONG $0x01f98341         // cmp    r9d, 1
	JNE  LBB14_19
	WORD $0xc031             // xor    eax, eax
	JMP  LBB14_3

LBB14_19:
	WORD $0x8945; BYTE $0xca     // mov    r10d, r9d
	LONG $0xfee28341             // and    r10d, -2
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB14_20:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe01e // vxorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe019 // vxorps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04effdc5; BYTE $0x1e   // vpxor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04effdc5; BYTE $0x19   // vpxor    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB14_20

LBB14_3:
	LONG $0x01c1f641             // test    r9b, 1
	JE   LBB14_5
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04effdc5; BYTE $0x06 // vpxor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04effdc5; BYTE $0x01 // vpxor    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB14_5:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB14_18
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB14_8
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB14_17

LBB14_8:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB14_9
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB14_11
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB14_13
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB14_15:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x96       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 150
	QUAD $0xfede6c2548f5d362; BYTE $0x96       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 150
	QUAD $0xffde742548edd362; BYTE $0x96       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 150
	QUAD $0x96de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 150
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB14_15
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB14_17
	JMP  LBB14_18

LBB14_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB14_17

LBB14_9:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB14_17

LBB14_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB14_17:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348         // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348         // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB14_17

LBB14_18:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT ·_xor_v3_optimized(SB), $16-40

	MOVQ out+0(FP), DI
	MOVQ v1+8(FP), SI
	MOVQ v2+16(FP), DX
	MOVQ v3+24(FP), CX
	MOVQ info+32(FP), R8
	ADDQ $8, SP

	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x20e8c148                           // shr    rax, 32
	WORD $0xf883; BYTE $0x02                   // cmp    eax, 2
	JE   LBB15_22
	WORD $0xf883; BYTE $0x01                   // cmp    eax, 1
	JNE  LBB15_42
	LONG $0x04f88341                           // cmp    r8d, 4
	JB   LBB15_7
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x02e9c149                           // shr    r9, 2
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x3f // and    r10d, 1073741823
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB15_20
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB15_5

LBB15_22:
	LONG $0x08f88341                           // cmp    r8d, 8
	JB   LBB15_27
	WORD $0x894d; BYTE $0xc1                   // mov    r9, r8
	LONG $0x03e9c149                           // shr    r9, 3
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0xffe28141; WORD $0xffff; BYTE $0x1f // and    r10d, 536870911
	LONG $0x01e18341                           // and    r9d, 1
	LONG $0x01fa8349                           // cmp    r10, 1
	JNE  LBB15_40
	WORD $0xc031                               // xor    eax, eax
	JMP  LBB15_25

LBB15_42:
	WORD $0x8545; BYTE $0xc0 // test    r8d, r8d
	JE   LBB15_55
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0x20f98349         // cmp    r9, 32
	JAE  LBB15_45
	WORD $0xc031             // xor    eax, eax
	JMP  LBB15_51

LBB15_45:
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	LONG $0xc7970f41         // seta    r15b
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	LONG $0xc4970f41         // seta    r12b
	LONG $0xca1c8d4a         // lea    rbx, [rdx + 8*r9]
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc5970f41         // seta    r13b
	LONG $0xc91c8d4a         // lea    rbx, [rcx + 8*r9]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xc3970f41         // seta    r11b
	WORD $0x3948; BYTE $0xfb // cmp    rbx, rdi
	LONG $0xc2970f41         // seta    r10b
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	LONG $0xc6970f41         // seta    r14b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8445; BYTE $0xe7 // test    r15b, r12b
	JNE  LBB15_51
	WORD $0x2045; BYTE $0xdd // and    r13b, r11b
	JNE  LBB15_51
	WORD $0x2045; BYTE $0xf2 // and    r10b, r14b
	JNE  LBB15_51
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0x1fe28341         // and    r10d, 31
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	WORD $0x294c; BYTE $0xd0 // sub    rax, r10
	WORD $0xdb31             // xor    ebx, ebx

LBB15_49:
	LONG $0x48fef162; WORD $0x046f; BYTE $0xda // vmovdqu64    zmm0, zmmword [rdx + 8*rbx]
	QUAD $0x01da4c6f48fef162                   // vmovdqu64    zmm1, zmmword [rdx + 8*rbx + 64]
	QUAD $0x02da546f48fef162                   // vmovdqu64    zmm2, zmmword [rdx + 8*rbx + 128]
	QUAD $0x03da5c6f48fef162                   // vmovdqu64    zmm3, zmmword [rdx + 8*rbx + 192]
	LONG $0x48fef162; WORD $0x246f; BYTE $0xd9 // vmovdqu64    zmm4, zmmword [rcx + 8*rbx]
	QUAD $0x01d96c6f48fef162                   // vmovdqu64    zmm5, zmmword [rcx + 8*rbx + 64]
	QUAD $0x02d9746f48fef162                   // vmovdqu64    zmm6, zmmword [rcx + 8*rbx + 128]
	QUAD $0x03d97c6f48fef162                   // vmovdqu64    zmm7, zmmword [rcx + 8*rbx + 192]
	QUAD $0x96de242548fdf362                   // vpternlogq    zmm4, zmm0, zmmword [rsi + 8*rbx], 150
	QUAD $0x01de6c2548f5f362; BYTE $0x96       // vpternlogq    zmm5, zmm1, zmmword [rsi + 8*rbx + 64], 150
	QUAD $0x02de742548edf362; BYTE $0x96       // vpternlogq    zmm6, zmm2, zmmword [rsi + 8*rbx + 128], 150
	QUAD $0x03de7c2548e5f362; BYTE $0x96       // vpternlogq    zmm7, zmm3, zmmword [rsi + 8*rbx + 192], 150
	LONG $0x48fef162; WORD $0x247f; BYTE $0xdf // vmovdqu64    zmmword [rdi + 8*rbx], zmm4
	QUAD $0x01df6c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 64], zmm5
	QUAD $0x02df747f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 128], zmm6
	QUAD $0x03df7c7f48fef162                   // vmovdqu64    zmmword [rdi + 8*rbx + 192], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JNE  LBB15_49
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB15_55

LBB15_51:
	WORD $0x2941; BYTE $0xc0 // sub    r8d, eax
	LONG $0x01508d4c         // lea    r10, [rax + 1]
	LONG $0x01c0f641         // test    r8b, 1
	JE   LBB15_53
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348         // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348         // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB15_53:
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JE   LBB15_55

LBB15_54:
	LONG $0xc21c8b48             // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348             // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348             // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948             // mov    qword [rdi + 8*rax], rbx
	LONG $0xc25c8b48; BYTE $0x08 // mov    rbx, qword [rdx + 8*rax + 8]
	LONG $0xc65c3348; BYTE $0x08 // xor    rbx, qword [rsi + 8*rax + 8]
	LONG $0xc15c3348; BYTE $0x08 // xor    rbx, qword [rcx + 8*rax + 8]
	LONG $0xc75c8948; BYTE $0x08 // mov    qword [rdi + 8*rax + 8], rbx
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB15_54
	JMP  LBB15_55

LBB15_20:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000020bb; BYTE $0x00 // mov    ebx, 32
	WORD $0xc031                 // xor    eax, eax

LBB15_21:
	LONG $0x4410fcc5; WORD $0xe01a // vmovups    ymm0, yword [rdx + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe01e // vxorps    ymm0, ymm0, yword [rsi + rbx - 32]
	LONG $0x4457fcc5; WORD $0xe019 // vxorps    ymm0, ymm0, yword [rcx + rbx - 32]
	LONG $0x4411fcc5; WORD $0xe01f // vmovups    yword [rdi + rbx - 32], ymm0
	LONG $0x046ffec5; BYTE $0x1a   // vmovdqu    ymm0, yword [rdx + rbx]
	LONG $0x04effdc5; BYTE $0x1e   // vpxor    ymm0, ymm0, yword [rsi + rbx]
	LONG $0x04effdc5; BYTE $0x19   // vpxor    ymm0, ymm0, yword [rcx + rbx]
	LONG $0x047ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm0
	LONG $0x02c08348               // add    rax, 2
	LONG $0x40c38348               // add    rbx, 64
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB15_21

LBB15_5:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB15_7
	LONG $0x05e0c148             // shl    rax, 5
	LONG $0x046ffec5; BYTE $0x02 // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x04effdc5; BYTE $0x06 // vpxor    ymm0, ymm0, yword [rsi + rax]
	LONG $0x04effdc5; BYTE $0x01 // vpxor    ymm0, ymm0, yword [rcx + rax]
	LONG $0x047ffec5; BYTE $0x07 // vmovdqu    yword [rdi + rax], ymm0

LBB15_7:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xfce18341         // and    r9d, -4
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB15_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB15_10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_19

LBB15_40:
	WORD $0x294d; BYTE $0xca     // sub    r10, r9
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0xc031                 // xor    eax, eax

LBB15_41:
	QUAD $0xff1a446f48fef162                   // vmovdqu64    zmm0, zmmword [rdx + rbx - 64]
	QUAD $0xff194c6f48fef162                   // vmovdqu64    zmm1, zmmword [rcx + rbx - 64]
	QUAD $0xff1e4c2548fdf362; BYTE $0x96       // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx - 64], 150
	QUAD $0xff1f4c7f48fef162                   // vmovdqu64    zmmword [rdi + rbx - 64], zmm1
	LONG $0x48fef162; WORD $0x046f; BYTE $0x1a // vmovdqu64    zmm0, zmmword [rdx + rbx]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x19 // vmovdqu64    zmm1, zmmword [rcx + rbx]
	QUAD $0x961e0c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rbx], 150
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x1f // vmovdqu64    zmmword [rdi + rbx], zmm1
	LONG $0x02c08348                           // add    rax, 2
	LONG $0x80eb8348                           // sub    rbx, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB15_41

LBB15_25:
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB15_27
	LONG $0x06e0c148                           // shl    rax, 6
	LONG $0x48fef162; WORD $0x046f; BYTE $0x02 // vmovdqu64    zmm0, zmmword [rdx + rax]
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x01 // vmovdqu64    zmm1, zmmword [rcx + rax]
	QUAD $0x96060c2548fdf362                   // vpternlogq    zmm1, zmm0, zmmword [rsi + rax], 150
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x07 // vmovdqu64    zmmword [rdi + rax], zmm1

LBB15_27:
	WORD $0x8945; BYTE $0xc1 // mov    r9d, r8d
	LONG $0xf8e18341         // and    r9d, -8
	WORD $0x3945; BYTE $0xc1 // cmp    r9d, r8d
	JAE  LBB15_55
	WORD $0x634d; BYTE $0xd1 // movsxd    r10, r9d
	WORD $0xf741; BYTE $0xd1 // not    r9d
	WORD $0x0145; BYTE $0xc1 // add    r9d, r8d
	LONG $0x1ff98341         // cmp    r9d, 31
	JAE  LBB15_30
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_39

LBB15_10:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB15_11
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB15_13
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB15_15
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB15_17:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x96       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 150
	QUAD $0xfede6c2548f5d362; BYTE $0x96       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 150
	QUAD $0xffde742548edd362; BYTE $0x96       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 150
	QUAD $0x96de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 150
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB15_17
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB15_19
	JMP  LBB15_55

LBB15_30:
	LONG $0xd7348d4e                           // lea    r14, [rdi + 8*r10]
	LONG $0x11048d4b                           // lea    rax, [r9 + r10]
	LONG $0xc7248d4c                           // lea    r12, [rdi + 8*rax]
	LONG $0x08c48349                           // add    r12, 8
	LONG $0xd61c8d4e                           // lea    r11, [rsi + 8*r10]
	LONG $0xc61c8d48                           // lea    rbx, [rsi + 8*rax]
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xc25c8d48; BYTE $0x08               // lea    rbx, [rdx + 8*rax + 8]
	LONG $0xc5920f41                           // setb    r13b
	WORD $0x394d; BYTE $0xe3                   // cmp    r11, r12
	LONG $0xc3920f41                           // setb    r11b
	WORD $0x3949; BYTE $0xde                   // cmp    r14, rbx
	LONG $0xd21c8d4a                           // lea    rbx, [rdx + 8*r10]
	LONG $0xc7920f41                           // setb    r15b
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc1448d48; BYTE $0x08               // lea    rax, [rcx + 8*rax + 8]
	LONG $0x2444920f; BYTE $0x07               // setb    byte [rsp + 7]
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	LONG $0xd11c8d4a                           // lea    rbx, [rcx + 8*r10]
	WORD $0x920f; BYTE $0xc0                   // setb    al
	WORD $0x394c; BYTE $0xe3                   // cmp    rbx, r12
	LONG $0xc6920f41                           // setb    r14b
	WORD $0x8445; BYTE $0xdd                   // test    r13b, r11b
	JNE  LBB15_31
	LONG $0x247c2244; BYTE $0x07               // and    r15b, byte [rsp + 7]
	JNE  LBB15_33
	WORD $0x2044; BYTE $0xf0                   // and    al, r14b
	JNE  LBB15_35
	LONG $0x01c18349                           // add    r9, 1
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xe0e38349                           // and    r11, -32
	LONG $0x13048d4b                           // lea    rax, [r11 + r10]
	LONG $0xd6348d4e                           // lea    r14, [rsi + 8*r10]
	LONG $0xc0c68149; WORD $0x0000; BYTE $0x00 // add    r14, 192
	LONG $0xd23c8d4e                           // lea    r15, [rdx + 8*r10]
	LONG $0xc0c78149; WORD $0x0000; BYTE $0x00 // add    r15, 192
	LONG $0xd1248d4e                           // lea    r12, [rcx + 8*r10]
	LONG $0xc0c48149; WORD $0x0000; BYTE $0x00 // add    r12, 192
	LONG $0xd7148d4e                           // lea    r10, [rdi + 8*r10]
	LONG $0xc0c28149; WORD $0x0000; BYTE $0x00 // add    r10, 192
	WORD $0xdb31                               // xor    ebx, ebx

LBB15_37:
	QUAD $0xfddf446f48fed162                   // vmovdqu64    zmm0, zmmword [r15 + 8*rbx - 192]
	QUAD $0xfedf4c6f48fed162                   // vmovdqu64    zmm1, zmmword [r15 + 8*rbx - 128]
	QUAD $0xffdf546f48fed162                   // vmovdqu64    zmm2, zmmword [r15 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x1c6f; BYTE $0xdf // vmovdqu64    zmm3, zmmword [r15 + 8*rbx]
	QUAD $0xfddc646f48fed162                   // vmovdqu64    zmm4, zmmword [r12 + 8*rbx - 192]
	QUAD $0xfedc6c6f48fed162                   // vmovdqu64    zmm5, zmmword [r12 + 8*rbx - 128]
	QUAD $0xffdc746f48fed162                   // vmovdqu64    zmm6, zmmword [r12 + 8*rbx - 64]
	LONG $0x48fed162; WORD $0x3c6f; BYTE $0xdc // vmovdqu64    zmm7, zmmword [r12 + 8*rbx]
	QUAD $0xfdde642548fdd362; BYTE $0x96       // vpternlogq    zmm4, zmm0, zmmword [r14 + 8*rbx - 192], 150
	QUAD $0xfede6c2548f5d362; BYTE $0x96       // vpternlogq    zmm5, zmm1, zmmword [r14 + 8*rbx - 128], 150
	QUAD $0xffde742548edd362; BYTE $0x96       // vpternlogq    zmm6, zmm2, zmmword [r14 + 8*rbx - 64], 150
	QUAD $0x96de3c2548e5d362                   // vpternlogq    zmm7, zmm3, zmmword [r14 + 8*rbx], 150
	QUAD $0xfdda647f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 192], zmm4
	QUAD $0xfeda6c7f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 128], zmm5
	QUAD $0xffda747f48fed162                   // vmovdqu64    zmmword [r10 + 8*rbx - 64], zmm6
	LONG $0x48fed162; WORD $0x3c7f; BYTE $0xda // vmovdqu64    zmmword [r10 + 8*rbx], zmm7
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB15_37
	WORD $0x394d; BYTE $0xd9                   // cmp    r9, r11
	JNE  LBB15_39
	JMP  LBB15_55

LBB15_15:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_19

LBB15_35:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_39

LBB15_11:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_19

LBB15_13:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB15_19:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348         // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348         // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB15_19
	JMP  LBB15_55

LBB15_31:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	JMP  LBB15_39

LBB15_33:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB15_39:
	LONG $0xc21c8b48         // mov    rbx, qword [rdx + 8*rax]
	LONG $0xc61c3348         // xor    rbx, qword [rsi + 8*rax]
	LONG $0xc11c3348         // xor    rbx, qword [rcx + 8*rax]
	LONG $0xc71c8948         // mov    qword [rdi + 8*rax], rbx
	LONG $0x01c08348         // add    rax, 1
	WORD $0x3944; BYTE $0xc0 // cmp    eax, r8d
	JB   LBB15_39

LBB15_55:
	SUBQ $8, SP
	VZEROUPPER
	RET
