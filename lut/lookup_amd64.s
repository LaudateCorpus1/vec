//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_lookup_512vbmi(SB), $0-32

	MOVQ input+0(FP), DI
	MOVQ output+8(FP), SI
	MOVQ table+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0x20e8c148               // shr    rax, 32
	WORD $0x3145; BYTE $0xc0       // xor    r8d, r8d
	WORD $0xf883; BYTE $0x02       // cmp    eax, 2
	JNE  LBB0_5
	WORD $0x8941; BYTE $0xc8       // mov    r8d, ecx
	LONG $0x06e8c141               // shr    r8d, 6
	WORD $0xf983; BYTE $0x40       // cmp    ecx, 64
	JB   LBB0_4
	LONG $0x02f88341               // cmp    r8d, 2
	LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
	LONG $0xc8430f45               // cmovae    r9d, r8d
	LONG $0x06e1c149               // shl    r9, 6
	WORD $0xc031                   // xor    eax, eax
	LONG $0xc0eff9c5               // vpxor    xmm0, xmm0, xmm0

LBB0_3:
	LONG $0x48fef162; WORD $0x0c6f; BYTE $0x07 // vmovdqu64    zmm1, zmmword [rdi + rax]
	LONG $0x487ef262; WORD $0xc929             // vpmovb2m    k1, zmm1
	LONG $0x4875f362; WORD $0xd03f; BYTE $0x05 // vpcmpnltb    k2, zmm1, zmm0
	LONG $0x48fef162; WORD $0x126f             // vmovdqu64    zmm2, zmmword [rdx]
	LONG $0x48fef162; WORD $0x5a6f; BYTE $0x02 // vmovdqu64    zmm3, zmmword [rdx + 128]
	LONG $0xca75f262; WORD $0x527d; BYTE $0x01 // vpermt2b    zmm2 {k2} {z}, zmm1, zmmword [rdx + 64]
	LONG $0xc975f262; WORD $0x5a7d; BYTE $0x03 // vpermt2b    zmm3 {k1} {z}, zmm1, zmmword [rdx + 192]
	LONG $0x48e5f162; WORD $0xcaeb             // vporq    zmm1, zmm3, zmm2
	LONG $0x48fef162; WORD $0x0c7f; BYTE $0x06 // vmovdqu64    zmmword [rsi + rax], zmm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3949; BYTE $0xc1                   // cmp    r9, rax
	JNE  LBB0_3

LBB0_4:
	LONG $0x04e0c141 // shl    r8d, 4

LBB0_5:
	WORD $0x3941; BYTE $0xc8 // cmp    r8d, ecx
	JAE  LBB0_10
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	WORD $0x894d; BYTE $0xd1 // mov    r9, r10
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB0_8

LBB0_7:
	LONG $0x04b60f42; BYTE $0x17 // movzx    eax, byte [rdi + r10]
	LONG $0x0204b60f             // movzx    eax, byte [rdx + rax]
	LONG $0x16048842             // mov    byte [rsi + r10], al
	LONG $0x01c28349             // add    r10, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB0_7

LBB0_8:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_10

LBB0_9:
	LONG $0x04b60f42; BYTE $0x17   // movzx    eax, byte [rdi + r10]
	LONG $0x0204b60f               // movzx    eax, byte [rdx + rax]
	LONG $0x16048842               // mov    byte [rsi + r10], al
	LONG $0x44b60f42; WORD $0x0117 // movzx    eax, byte [rdi + r10 + 1]
	LONG $0x0204b60f               // movzx    eax, byte [rdx + rax]
	LONG $0x16448842; BYTE $0x01   // mov    byte [rsi + r10 + 1], al
	LONG $0x44b60f42; WORD $0x0217 // movzx    eax, byte [rdi + r10 + 2]
	LONG $0x0204b60f               // movzx    eax, byte [rdx + rax]
	LONG $0x16448842; BYTE $0x02   // mov    byte [rsi + r10 + 2], al
	LONG $0x44b60f42; WORD $0x0317 // movzx    eax, byte [rdi + r10 + 3]
	LONG $0x0204b60f               // movzx    eax, byte [rdx + rax]
	LONG $0x16448842; BYTE $0x03   // mov    byte [rsi + r10 + 3], al
	LONG $0x04c28349               // add    r10, 4
	WORD $0x394d; BYTE $0xd0       // cmp    r8, r10
	JNE  LBB0_9

LBB0_10:
	VZEROUPPER
	RET
