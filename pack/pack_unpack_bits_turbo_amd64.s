//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_turbopack32(SB), $80-32

	MOVQ in+0(FP), DI
	MOVQ number+8(FP), SI
	MOVQ bit+16(FP), DX
	MOVQ out+24(FP), CX
	ADDQ $8, SP

	LONG $0x34247489         // mov    dword [rsp + 52], esi
	WORD $0xf685             // test    esi, esi
	JE   LBB0_84
	WORD $0x8949; BYTE $0xcd // mov    r13, rcx
	WORD $0x8941; BYTE $0xd4 // mov    r12d, edx
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d
	LONG $0x04245489         // mov    dword [rsp + 4], edx
	JMP  LBB0_2

LBB0_82:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1fe1c148             // shl    rcx, 31
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ee2c148             // shl    rdx, 62
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x02e8c148             // shr    rax, 2
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x1de1c148             // shl    rcx, 29
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ce2c148             // shl    rdx, 60
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x04e8c148             // shr    rax, 4
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x1be1c148             // shl    rcx, 27
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ae2c148             // shl    rdx, 58
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	LONG $0x06e8c148             // shr    rax, 6
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x19e1c148             // shl    rcx, 25
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x38e2c148             // shl    rdx, 56
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	LONG $0x08e8c148             // shr    rax, 8
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	LONG $0x17e1c148             // shl    rcx, 23
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x24348944             // mov    dword [rsp], r14d
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x36e2c148             // shl    rdx, 54
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x40 // mov    qword [rsp + 64], rdx
	LONG $0x0ae8c148             // shr    rax, 10
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x15e1c148             // shl    rcx, 21
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	LONG $0x34e4c149             // shl    r12, 52
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x578b; BYTE $0x34     // mov    edx, dword [rdi + 52]
	LONG $0x13e2c148             // shl    rdx, 19
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x38     // mov    eax, dword [rdi + 56]
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	LONG $0x32e1c148             // shl    rcx, 50
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	LONG $0x244c8948; BYTE $0x38 // mov    qword [rsp + 56], rcx
	LONG $0x0ee8c148             // shr    rax, 14
	WORD $0x578b; BYTE $0x3c     // mov    edx, dword [rdi + 60]
	LONG $0x11e2c148             // shl    rdx, 17
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	LONG $0x30e7c149             // shl    r15, 48
	WORD $0x0949; BYTE $0xd7     // or    r15, rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	LONG $0x0fe2c148             // shl    rdx, 15
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x48     // mov    eax, dword [rdi + 72]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x2ee3c149             // shl    r11, 46
	WORD $0x0949; BYTE $0xd3     // or    r11, rdx
	LONG $0x12e8c148             // shr    rax, 18
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	LONG $0x0de2c148             // shl    rdx, 13
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x50     // mov    eax, dword [rdi + 80]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x2ce2c149             // shl    r10, 44
	WORD $0x0949; BYTE $0xd2     // or    r10, rdx
	LONG $0x14e8c148             // shr    rax, 20
	WORD $0x578b; BYTE $0x54     // mov    edx, dword [rdi + 84]
	LONG $0x0be2c148             // shl    rdx, 11
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x58     // mov    eax, dword [rdi + 88]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x2ae1c149             // shl    r9, 42
	WORD $0x0949; BYTE $0xd1     // or    r9, rdx
	LONG $0x16e8c148             // shr    rax, 22
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	LONG $0x09e1c148             // shl    rcx, 9
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x60     // mov    eax, dword [rdi + 96]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x28e0c149             // shl    r8, 40
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	LONG $0x18e8c148             // shr    rax, 24
	WORD $0x4f8b; BYTE $0x64     // mov    ecx, dword [rdi + 100]
	LONG $0x07e1c148             // shl    rcx, 7
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x246c894c; BYTE $0x08 // mov    qword [rsp + 8], r13
	LONG $0x686f8b44             // mov    r13d, dword [rdi + 104]
	WORD $0x894c; BYTE $0xee     // mov    rsi, r13
	LONG $0x26e6c148             // shl    rsi, 38
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	LONG $0x1aedc149             // shr    r13, 26
	WORD $0x4f8b; BYTE $0x6c     // mov    ecx, dword [rdi + 108]
	LONG $0x05e1c148             // shl    rcx, 5
	WORD $0x094c; BYTE $0xe9     // or    rcx, r13
	LONG $0x706f8b44             // mov    r13d, dword [rdi + 112]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	LONG $0x24e2c148             // shl    rdx, 36
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x1cedc149             // shr    r13, 28
	WORD $0x4f8b; BYTE $0x74     // mov    ecx, dword [rdi + 116]
	LONG $0x03e1c148             // shl    rcx, 3
	WORD $0x094c; BYTE $0xe9     // or    rcx, r13
	LONG $0x786f8b44             // mov    r13d, dword [rdi + 120]
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x22e0c148             // shl    rax, 34
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x1eedc149             // shr    r13, 30
	WORD $0x4f8b; BYTE $0x7c     // mov    ecx, dword [rdi + 124]
	WORD $0x0148; BYTE $0xc9     // add    rcx, rcx
	WORD $0x094c; BYTE $0xe9     // or    rcx, r13
	LONG $0x246c8b4c; BYTE $0x08 // mov    r13, qword [rsp + 8]
	LONG $0x24748b4c; BYTE $0x10 // mov    r14, qword [rsp + 16]
	LONG $0x0075894d             // mov    qword [r13], r14
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	LONG $0x085d8949             // mov    qword [r13 + 8], rbx
	LONG $0x245c8b48; BYTE $0x20 // mov    rbx, qword [rsp + 32]
	LONG $0x105d8949             // mov    qword [r13 + 16], rbx
	LONG $0x245c8b48; BYTE $0x28 // mov    rbx, qword [rsp + 40]
	LONG $0x185d8949             // mov    qword [r13 + 24], rbx
	LONG $0x245c8b48; BYTE $0x40 // mov    rbx, qword [rsp + 64]
	LONG $0x205d8949             // mov    qword [r13 + 32], rbx
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x2865894d             // mov    qword [r13 + 40], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword [rsp + 56]
	LONG $0x305d8949             // mov    qword [r13 + 48], rbx
	LONG $0x387d894d             // mov    qword [r13 + 56], r15
	LONG $0x405d894d             // mov    qword [r13 + 64], r11
	LONG $0x4855894d             // mov    qword [r13 + 72], r10
	LONG $0x504d894d             // mov    qword [r13 + 80], r9
	LONG $0x5845894d             // mov    qword [r13 + 88], r8
	LONG $0x60758949             // mov    qword [r13 + 96], rsi
	LONG $0x68558949             // mov    qword [r13 + 104], rdx
	LONG $0x70458949             // mov    qword [r13 + 112], rax
	LONG $0x784d8949             // mov    qword [r13 + 120], rcx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x7cc58349             // add    r13, 124

LBB0_83:
	LONG $0x20c68341             // add    r14d, 32
	LONG $0x24743b44; BYTE $0x34 // cmp    r14d, dword [rsp + 52]
	JAE  LBB0_84

LBB0_2:
	LONG $0x0ffc8341             // cmp    r12d, 15
	JLE  LBB0_3
	LONG $0x17fc8341             // cmp    r12d, 23
	JLE  LBB0_35
	LONG $0x1bfc8341             // cmp    r12d, 27
	JLE  LBB0_51
	LONG $0x1dfc8341             // cmp    r12d, 29
	JLE  LBB0_59
	LONG $0x1efc8341             // cmp    r12d, 30
	JE   LBB0_81
	LONG $0x1ffc8341             // cmp    r12d, 31
	JE   LBB0_82
	LONG $0x20fc8341             // cmp    r12d, 32
	JNE  LBB0_83
	WORD $0x100f; BYTE $0x07     // movups    xmm0, oword [rdi]
	LONG $0x104f100f             // movups    xmm1, oword [rdi + 16]
	LONG $0x2057100f             // movups    xmm2, oword [rdi + 32]
	LONG $0x305f100f             // movups    xmm3, oword [rdi + 48]
	LONG $0x4067100f             // movups    xmm4, oword [rdi + 64]
	LONG $0x506f100f             // movups    xmm5, oword [rdi + 80]
	LONG $0x6077100f             // movups    xmm6, oword [rdi + 96]
	LONG $0x707f100f             // movups    xmm7, oword [rdi + 112]
	LONG $0x45110f41; BYTE $0x00 // movups    oword [r13], xmm0
	LONG $0x4d110f41; BYTE $0x10 // movups    oword [r13 + 16], xmm1
	LONG $0x55110f41; BYTE $0x20 // movups    oword [r13 + 32], xmm2
	LONG $0x5d110f41; BYTE $0x30 // movups    oword [r13 + 48], xmm3
	LONG $0x65110f41; BYTE $0x40 // movups    oword [r13 + 64], xmm4
	LONG $0x6d110f41; BYTE $0x50 // movups    oword [r13 + 80], xmm5
	LONG $0x75110f41; BYTE $0x60 // movups    oword [r13 + 96], xmm6
	LONG $0x7d110f41; BYTE $0x70 // movups    oword [r13 + 112], xmm7
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x80ed8349             // sub    r13, -128
	JMP  LBB0_83

LBB0_3:
	LONG $0x07fc8341         // cmp    r12d, 7
	JG   LBB0_19
	LONG $0x03fc8341         // cmp    r12d, 3
	JG   LBB0_12
	LONG $0x01fc8341         // cmp    r12d, 1
	JG   LBB0_9
	WORD $0x8545; BYTE $0xe4 // test    r12d, r12d
	JE   LBB0_66
	LONG $0x01fc8341         // cmp    r12d, 1
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	WORD $0x0148; BYTE $0xc9 // add    rcx, rcx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x02e0c148         // shl    rax, 2
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x03e2c148         // shl    rdx, 3
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x04e0c148         // shl    rax, 4
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x05e1c148         // shl    rcx, 5
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x06e6c148         // shl    rsi, 6
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x07e0c148         // shl    rax, 7
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x09e2c148         // shl    rdx, 9
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x0ae0c148         // shl    rax, 10
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x0be1c148         // shl    rcx, 11
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x0ce2c148         // shl    rdx, 12
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x0de1c148         // shl    rcx, 13
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x0ee2c148         // shl    rdx, 14
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x0fe1c148         // shl    rcx, 15
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x40 // mov    eax, dword [rdi + 64]
	LONG $0x10e0c148         // shl    rax, 16
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x11e2c148         // shl    rdx, 17
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x48 // mov    eax, dword [rdi + 72]
	LONG $0x12e0c148         // shl    rax, 18
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x13e2c148         // shl    rdx, 19
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x14e6c148         // shl    rsi, 20
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x54 // mov    eax, dword [rdi + 84]
	LONG $0x15e0c148         // shl    rax, 21
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x16e1c148         // shl    rcx, 22
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x17e2c148         // shl    rdx, 23
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x64 // mov    edx, dword [rdi + 100]
	LONG $0x19e2c148         // shl    rdx, 25
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x68 // mov    ecx, dword [rdi + 104]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x6c // mov    edx, dword [rdi + 108]
	LONG $0x1be2c148         // shl    rdx, 27
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x1ce1c148         // shl    rcx, 28
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	LONG $0x1de0c148         // shl    rax, 29
	WORD $0x578b; BYTE $0x78 // mov    edx, dword [rdi + 120]
	LONG $0x1ee2c148         // shl    rdx, 30
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x1fe0c148         // shl    rax, 31
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x04c58349         // add    r13, 4
	JMP  LBB0_83

LBB0_35:
	LONG $0x13fc8341         // cmp    r12d, 19
	JG   LBB0_43
	LONG $0x11fc8341         // cmp    r12d, 17
	JG   LBB0_40
	LONG $0x10fc8341         // cmp    r12d, 16
	JE   LBB0_74
	LONG $0x11fc8341         // cmp    r12d, 17
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x11e1c148         // shl    rcx, 17
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x22e0c148         // shl    rax, 34
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	WORD $0x8949; BYTE $0xd3 // mov    r11, rdx
	LONG $0x33e3c149         // shl    r11, 51
	WORD $0x0949; BYTE $0xc3 // or    r11, rax
	WORD $0x0949; BYTE $0xcb // or    r11, rcx
	LONG $0x0deac148         // shr    rdx, 13
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x04e0c148         // shl    rax, 4
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x15e1c148         // shl    rcx, 21
	WORD $0x578b; BYTE $0x18 // mov    edx, dword [rdi + 24]
	LONG $0x26e2c148         // shl    rdx, 38
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x37e0c149         // shl    r8, 55
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x09e8c148         // shr    rax, 9
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x24 // mov    eax, dword [rdi + 36]
	LONG $0x19e0c148         // shl    rax, 25
	WORD $0x578b; BYTE $0x28 // mov    edx, dword [rdi + 40]
	LONG $0x2ae2c148         // shl    rdx, 42
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x2c // mov    eax, dword [rdi + 44]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x3be1c149         // shl    r9, 59
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x05e8c148         // shr    rax, 5
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x0ce1c148         // shl    rcx, 12
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x34 // mov    eax, dword [rdi + 52]
	LONG $0x1de0c148         // shl    rax, 29
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x2ee2c148         // shl    rdx, 46
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x3c // mov    eax, dword [rdi + 60]
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0x3fe2c149         // shl    r10, 63
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	WORD $0xd148; BYTE $0xe8 // shr    rax, 1
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x21e2c148         // shl    rdx, 33
	WORD $0x778b; BYTE $0x48 // mov    esi, dword [rdi + 72]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x32e0c148         // shl    rax, 50
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	LONG $0x0eeec148         // shr    rsi, 14
	WORD $0x4f8b; BYTE $0x4c // mov    ecx, dword [rdi + 76]
	LONG $0x03e1c148         // shl    rcx, 3
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x50 // mov    edx, dword [rdi + 80]
	LONG $0x14e2c148         // shl    rdx, 20
	WORD $0x778b; BYTE $0x54 // mov    esi, dword [rdi + 84]
	LONG $0x25e6c148         // shl    rsi, 37
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	WORD $0x8945; BYTE $0xf7 // mov    r15d, r14d
	WORD $0x8949; BYTE $0xce // mov    r14, rcx
	LONG $0x36e6c149         // shl    r14, 54
	WORD $0x0949; BYTE $0xf6 // or    r14, rsi
	LONG $0x0ae9c148         // shr    rcx, 10
	WORD $0x778b; BYTE $0x5c // mov    esi, dword [rdi + 92]
	LONG $0x07e6c148         // shl    rsi, 7
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x5f8b; BYTE $0x64 // mov    ebx, dword [rdi + 100]
	LONG $0x29e3c148         // shl    rbx, 41
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	WORD $0x8948; BYTE $0xf1 // mov    rcx, rsi
	LONG $0x3ae1c148         // shl    rcx, 58
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	LONG $0x06eec148         // shr    rsi, 6
	WORD $0x5f8b; BYTE $0x6c // mov    ebx, dword [rdi + 108]
	LONG $0x0be3c148         // shl    rbx, 11
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x778b; BYTE $0x70 // mov    esi, dword [rdi + 112]
	LONG $0x1ce6c148         // shl    rsi, 28
	WORD $0x578b; BYTE $0x74 // mov    edx, dword [rdi + 116]
	LONG $0x2de2c148         // shl    rdx, 45
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	WORD $0x778b; BYTE $0x78 // mov    esi, dword [rdi + 120]
	WORD $0x8948; BYTE $0xf3 // mov    rbx, rsi
	LONG $0x3ee3c148         // shl    rbx, 62
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	LONG $0x02eec148         // shr    rsi, 2
	WORD $0x578b; BYTE $0x7c // mov    edx, dword [rdi + 124]
	LONG $0x0fe2c148         // shl    rdx, 15
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x005d894d         // mov    qword [r13], r11
	LONG $0x0845894d         // mov    qword [r13 + 8], r8
	LONG $0x104d894d         // mov    qword [r13 + 16], r9
	LONG $0x1855894d         // mov    qword [r13 + 24], r10
	LONG $0x20458949         // mov    qword [r13 + 32], rax
	LONG $0x2875894d         // mov    qword [r13 + 40], r14
	WORD $0x8945; BYTE $0xfe // mov    r14d, r15d
	LONG $0x304d8949         // mov    qword [r13 + 48], rcx
	LONG $0x385d8949         // mov    qword [r13 + 56], rbx
	LONG $0x40558949         // mov    qword [r13 + 64], rdx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x44c58349         // add    r13, 68
	JMP  LBB0_83

LBB0_19:
	LONG $0x0bfc8341         // cmp    r12d, 11
	JG   LBB0_27
	LONG $0x09fc8341         // cmp    r12d, 9
	JG   LBB0_24
	LONG $0x08fc8341         // cmp    r12d, 8
	JE   LBB0_70
	LONG $0x09fc8341         // cmp    r12d, 9
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x09e1c148         // shl    rcx, 9
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x12e0c148         // shl    rax, 18
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x1be2c148         // shl    rdx, 27
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x24e0c148         // shl    rax, 36
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x2de1c148         // shl    rcx, 45
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x36e6c148         // shl    rsi, 54
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	LONG $0x3fe0c149         // shl    r8, 63
	WORD $0x0949; BYTE $0xf0 // or    r8, rsi
	WORD $0xd148; BYTE $0xe9 // shr    rcx, 1
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x08e2c148         // shl    rdx, 8
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	LONG $0x11e1c148         // shl    rcx, 17
	WORD $0x778b; BYTE $0x28 // mov    esi, dword [rdi + 40]
	LONG $0x1ae6c148         // shl    rsi, 26
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x23e1c148         // shl    rcx, 35
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x2ce2c148         // shl    rdx, 44
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x35e1c148         // shl    rcx, 53
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	WORD $0x8949; BYTE $0xd1 // mov    r9, rdx
	LONG $0x3ee1c149         // shl    r9, 62
	WORD $0x0949; BYTE $0xc9 // or    r9, rcx
	LONG $0x02eac148         // shr    rdx, 2
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x07e1c148         // shl    rcx, 7
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x40 // mov    edx, dword [rdi + 64]
	LONG $0x10e2c148         // shl    rdx, 16
	WORD $0x778b; BYTE $0x44 // mov    esi, dword [rdi + 68]
	LONG $0x19e6c148         // shl    rsi, 25
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x22e1c148         // shl    rcx, 34
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x2be2c148         // shl    rdx, 43
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x34e1c148         // shl    rcx, 52
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x778b; BYTE $0x54 // mov    esi, dword [rdi + 84]
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x3de2c148         // shl    rdx, 61
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	LONG $0x03eec148         // shr    rsi, 3
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x778b; BYTE $0x5c // mov    esi, dword [rdi + 92]
	LONG $0x0fe6c148         // shl    rsi, 15
	WORD $0x478b; BYTE $0x60 // mov    eax, dword [rdi + 96]
	LONG $0x18e0c148         // shl    rax, 24
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x21e1c148         // shl    rcx, 33
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x2ae6c148         // shl    rsi, 42
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x33e1c148         // shl    rcx, 51
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x70 // mov    eax, dword [rdi + 112]
	WORD $0x8948; BYTE $0xc6 // mov    rsi, rax
	LONG $0x3ce6c148         // shl    rsi, 60
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	LONG $0x04e8c148         // shr    rax, 4
	WORD $0x4f8b; BYTE $0x74 // mov    ecx, dword [rdi + 116]
	LONG $0x05e1c148         // shl    rcx, 5
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x78 // mov    eax, dword [rdi + 120]
	LONG $0x0ee0c148         // shl    rax, 14
	WORD $0x5f8b; BYTE $0x7c // mov    ebx, dword [rdi + 124]
	LONG $0x17e3c148         // shl    rbx, 23
	WORD $0x0948; BYTE $0xc3 // or    rbx, rax
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x10558949         // mov    qword [r13 + 16], rdx
	LONG $0x18758949         // mov    qword [r13 + 24], rsi
	LONG $0x205d8949         // mov    qword [r13 + 32], rbx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x24c58349         // add    r13, 36
	JMP  LBB0_83

LBB0_51:
	LONG $0x19fc8341             // cmp    r12d, 25
	LONG $0x24348944             // mov    dword [rsp], r14d
	JG   LBB0_55
	LONG $0x18fc8341             // cmp    r12d, 24
	JE   LBB0_78
	LONG $0x19fc8341             // cmp    r12d, 25
	JNE  LBB0_83
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x19e1c148             // shl    rcx, 25
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x32e2c148             // shl    rdx, 50
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x0ee8c148             // shr    rax, 14
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x0be1c148             // shl    rcx, 11
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x24e0c148             // shl    rax, 36
	WORD $0x578b; BYTE $0x14     // mov    edx, dword [rdi + 20]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	LONG $0x3de6c149             // shl    r14, 61
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	LONG $0x03eac148             // shr    rdx, 3
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x16e0c148             // shl    rax, 22
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x2fe2c148             // shl    rdx, 47
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x11e9c148             // shr    rcx, 17
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	LONG $0x21e1c148             // shl    rcx, 33
	WORD $0x578b; BYTE $0x28     // mov    edx, dword [rdi + 40]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x3ae7c149             // shl    r15, 58
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	LONG $0x06eac148             // shr    rdx, 6
	WORD $0x478b; BYTE $0x2c     // mov    eax, dword [rdi + 44]
	LONG $0x13e0c148             // shl    rax, 19
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x30     // mov    ecx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	LONG $0x2ce3c149             // shl    r11, 44
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x14e9c148             // shr    rcx, 20
	WORD $0x578b; BYTE $0x34     // mov    edx, dword [rdi + 52]
	LONG $0x05e2c148             // shl    rdx, 5
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x38     // mov    ecx, dword [rdi + 56]
	LONG $0x1ee1c148             // shl    rcx, 30
	WORD $0x778b; BYTE $0x3c     // mov    esi, dword [rdi + 60]
	WORD $0x8949; BYTE $0xf4     // mov    r12, rsi
	LONG $0x37e4c149             // shl    r12, 55
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	WORD $0x0949; BYTE $0xd4     // or    r12, rdx
	LONG $0x09eec148             // shr    rsi, 9
	WORD $0x4f8b; BYTE $0x40     // mov    ecx, dword [rdi + 64]
	LONG $0x10e1c148             // shl    rcx, 16
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x29e2c149             // shl    r10, 41
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	LONG $0x17eac148             // shr    rdx, 23
	WORD $0x4f8b; BYTE $0x48     // mov    ecx, dword [rdi + 72]
	LONG $0x02e1c148             // shl    rcx, 2
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	LONG $0x1be2c148             // shl    rdx, 27
	WORD $0x5f8b; BYTE $0x50     // mov    ebx, dword [rdi + 80]
	WORD $0x8949; BYTE $0xd9     // mov    r9, rbx
	LONG $0x34e1c149             // shl    r9, 52
	WORD $0x0949; BYTE $0xd1     // or    r9, rdx
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	LONG $0x0cebc148             // shr    rbx, 12
	WORD $0x4f8b; BYTE $0x54     // mov    ecx, dword [rdi + 84]
	LONG $0x0de1c148             // shl    rcx, 13
	WORD $0x0948; BYTE $0xd9     // or    rcx, rbx
	WORD $0x5f8b; BYTE $0x58     // mov    ebx, dword [rdi + 88]
	LONG $0x26e3c148             // shl    rbx, 38
	WORD $0x578b; BYTE $0x5c     // mov    edx, dword [rdi + 92]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x3fe0c149             // shl    r8, 63
	WORD $0x0949; BYTE $0xd8     // or    r8, rbx
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	WORD $0xd148; BYTE $0xea     // shr    rdx, 1
	WORD $0x4f8b; BYTE $0x60     // mov    ecx, dword [rdi + 96]
	LONG $0x18e1c148             // shl    rcx, 24
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x64     // mov    edx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x31e3c148             // shl    rbx, 49
	WORD $0x0948; BYTE $0xcb     // or    rbx, rcx
	LONG $0x0feac148             // shr    rdx, 15
	WORD $0x778b; BYTE $0x68     // mov    esi, dword [rdi + 104]
	LONG $0x0ae6c148             // shl    rsi, 10
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	WORD $0x578b; BYTE $0x6c     // mov    edx, dword [rdi + 108]
	LONG $0x23e2c148             // shl    rdx, 35
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	LONG $0x3ce1c148             // shl    rcx, 60
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	LONG $0x04e8c148             // shr    rax, 4
	WORD $0x578b; BYTE $0x74     // mov    edx, dword [rdi + 116]
	LONG $0x15e2c148             // shl    rdx, 21
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x2ee6c148             // shl    rsi, 46
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	LONG $0x12e8c148             // shr    rax, 18
	WORD $0x578b; BYTE $0x7c     // mov    edx, dword [rdi + 124]
	LONG $0x07e2c148             // shl    rdx, 7
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x0875894d             // mov    qword [r13 + 8], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x10458949             // mov    qword [r13 + 16], rax
	LONG $0x187d894d             // mov    qword [r13 + 24], r15
	LONG $0x205d894d             // mov    qword [r13 + 32], r11
	LONG $0x2865894d             // mov    qword [r13 + 40], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x3055894d             // mov    qword [r13 + 48], r10
	LONG $0x384d894d             // mov    qword [r13 + 56], r9
	LONG $0x4045894d             // mov    qword [r13 + 64], r8
	LONG $0x485d8949             // mov    qword [r13 + 72], rbx
	LONG $0x504d8949             // mov    qword [r13 + 80], rcx
	LONG $0x58758949             // mov    qword [r13 + 88], rsi
	LONG $0x60558949             // mov    qword [r13 + 96], rdx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x64c58349             // add    r13, 100
	JMP  LBB0_83

LBB0_12:
	LONG $0x05fc8341         // cmp    r12d, 5
	JG   LBB0_16
	LONG $0x04fc8341         // cmp    r12d, 4
	JE   LBB0_68
	LONG $0x05fc8341         // cmp    r12d, 5
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x05e1c148         // shl    rcx, 5
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x0ae0c148         // shl    rax, 10
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x0fe2c148         // shl    rdx, 15
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x14e0c148         // shl    rax, 20
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x19e1c148         // shl    rcx, 25
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x1ee0c148         // shl    rax, 30
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	LONG $0x23e1c148         // shl    rcx, 35
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x28e2c148         // shl    rdx, 40
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	LONG $0x2de1c148         // shl    rcx, 45
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x28 // mov    edx, dword [rdi + 40]
	LONG $0x32e2c148         // shl    rdx, 50
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x37e1c148         // shl    rcx, 55
	WORD $0x778b; BYTE $0x30 // mov    esi, dword [rdi + 48]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x3ce0c148         // shl    rax, 60
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	LONG $0x04eec148         // shr    rsi, 4
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	WORD $0x0148; BYTE $0xc9 // add    rcx, rcx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x06e2c148         // shl    rdx, 6
	WORD $0x778b; BYTE $0x3c // mov    esi, dword [rdi + 60]
	LONG $0x0be6c148         // shl    rsi, 11
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x15e2c148         // shl    rdx, 21
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x1fe2c148         // shl    rdx, 31
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x24e6c148         // shl    rsi, 36
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	LONG $0x29e2c148         // shl    rdx, 41
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x778b; BYTE $0x58 // mov    esi, dword [rdi + 88]
	LONG $0x2ee6c148         // shl    rsi, 46
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x33e1c148         // shl    rcx, 51
	WORD $0x5f8b; BYTE $0x60 // mov    ebx, dword [rdi + 96]
	LONG $0x38e3c148         // shl    rbx, 56
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	LONG $0x3de2c148         // shl    rdx, 61
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x03e9c148         // shr    rcx, 3
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x02e6c148         // shl    rsi, 2
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x07e1c148         // shl    rcx, 7
	WORD $0x5f8b; BYTE $0x70 // mov    ebx, dword [rdi + 112]
	LONG $0x0ce3c148         // shl    rbx, 12
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x4f8b; BYTE $0x74 // mov    ecx, dword [rdi + 116]
	LONG $0x11e1c148         // shl    rcx, 17
	WORD $0x778b; BYTE $0x78 // mov    esi, dword [rdi + 120]
	LONG $0x16e6c148         // shl    rsi, 22
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x7c // mov    ecx, dword [rdi + 124]
	LONG $0x1be1c148         // shl    rcx, 27
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x08558949         // mov    qword [r13 + 8], rdx
	LONG $0x104d8949         // mov    qword [r13 + 16], rcx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x14c58349         // add    r13, 20
	JMP  LBB0_83

LBB0_43:
	LONG $0x15fc8341             // cmp    r12d, 21
	LONG $0x24348944             // mov    dword [rsp], r14d
	JG   LBB0_47
	LONG $0x14fc8341             // cmp    r12d, 20
	JE   LBB0_76
	LONG $0x15fc8341             // cmp    r12d, 21
	JNE  LBB0_83
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x15e1c148             // shl    rcx, 21
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	LONG $0x2ae0c148             // shl    rax, 42
	WORD $0x578b; BYTE $0x0c     // mov    edx, dword [rdi + 12]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x3fe6c148             // shl    rsi, 63
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	LONG $0x24748948; BYTE $0x08 // mov    qword [rsp + 8], rsi
	WORD $0xd148; BYTE $0xea     // shr    rdx, 1
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x14e0c148             // shl    rax, 20
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x29e1c148             // shl    rcx, 41
	WORD $0x578b; BYTE $0x18     // mov    edx, dword [rdi + 24]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x3ee1c149             // shl    r9, 62
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	LONG $0x02eac148             // shr    rdx, 2
	WORD $0x478b; BYTE $0x1c     // mov    eax, dword [rdi + 28]
	LONG $0x13e0c148             // shl    rax, 19
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x20     // mov    ecx, dword [rdi + 32]
	LONG $0x28e1c148             // shl    rcx, 40
	WORD $0x578b; BYTE $0x24     // mov    edx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x3de3c149             // shl    r11, 61
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x03eac148             // shr    rdx, 3
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x12e0c148             // shl    rax, 18
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x27e1c148             // shl    rcx, 39
	WORD $0x578b; BYTE $0x30     // mov    edx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	LONG $0x3ce6c149             // shl    r14, 60
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x04eac148             // shr    rdx, 4
	WORD $0x478b; BYTE $0x34     // mov    eax, dword [rdi + 52]
	LONG $0x11e0c148             // shl    rax, 17
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x38     // mov    ecx, dword [rdi + 56]
	LONG $0x26e1c148             // shl    rcx, 38
	WORD $0x578b; BYTE $0x3c     // mov    edx, dword [rdi + 60]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x3be2c149             // shl    r10, 59
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	LONG $0x05eac148             // shr    rdx, 5
	WORD $0x4f8b; BYTE $0x40     // mov    ecx, dword [rdi + 64]
	LONG $0x10e1c148             // shl    rcx, 16
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	LONG $0x25e2c148             // shl    rdx, 37
	WORD $0x778b; BYTE $0x48     // mov    esi, dword [rdi + 72]
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	LONG $0x3ae7c149             // shl    r15, 58
	WORD $0x0949; BYTE $0xd7     // or    r15, rdx
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	LONG $0x06eec148             // shr    rsi, 6
	WORD $0x4f8b; BYTE $0x4c     // mov    ecx, dword [rdi + 76]
	LONG $0x0fe1c148             // shl    rcx, 15
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x578b; BYTE $0x50     // mov    edx, dword [rdi + 80]
	LONG $0x24e2c148             // shl    rdx, 36
	WORD $0x778b; BYTE $0x54     // mov    esi, dword [rdi + 84]
	WORD $0x8949; BYTE $0xf4     // mov    r12, rsi
	LONG $0x39e4c149             // shl    r12, 57
	WORD $0x0949; BYTE $0xd4     // or    r12, rdx
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	LONG $0x07eec148             // shr    rsi, 7
	WORD $0x4f8b; BYTE $0x58     // mov    ecx, dword [rdi + 88]
	LONG $0x0ee1c148             // shl    rcx, 14
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x778b; BYTE $0x5c     // mov    esi, dword [rdi + 92]
	LONG $0x23e6c148             // shl    rsi, 35
	WORD $0x578b; BYTE $0x60     // mov    edx, dword [rdi + 96]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x38e0c149             // shl    r8, 56
	WORD $0x0949; BYTE $0xf0     // or    r8, rsi
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x778b; BYTE $0x64     // mov    esi, dword [rdi + 100]
	LONG $0x0de6c148             // shl    rsi, 13
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	WORD $0x578b; BYTE $0x68     // mov    edx, dword [rdi + 104]
	LONG $0x22e2c148             // shl    rdx, 34
	WORD $0x4f8b; BYTE $0x6c     // mov    ecx, dword [rdi + 108]
	WORD $0x8948; BYTE $0xcb     // mov    rbx, rcx
	LONG $0x37e3c148             // shl    rbx, 55
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	WORD $0x0948; BYTE $0xf3     // or    rbx, rsi
	LONG $0x09e9c148             // shr    rcx, 9
	WORD $0x578b; BYTE $0x70     // mov    edx, dword [rdi + 112]
	LONG $0x0ce2c148             // shl    rdx, 12
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x74     // mov    ecx, dword [rdi + 116]
	LONG $0x21e1c148             // shl    rcx, 33
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x36e6c148             // shl    rsi, 54
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	LONG $0x0ae8c148             // shr    rax, 10
	WORD $0x4f8b; BYTE $0x7c     // mov    ecx, dword [rdi + 124]
	LONG $0x0be1c148             // shl    rcx, 11
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x084d894d             // mov    qword [r13 + 8], r9
	LONG $0x105d894d             // mov    qword [r13 + 16], r11
	LONG $0x1875894d             // mov    qword [r13 + 24], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x2055894d             // mov    qword [r13 + 32], r10
	LONG $0x287d894d             // mov    qword [r13 + 40], r15
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x3845894d             // mov    qword [r13 + 56], r8
	LONG $0x405d8949             // mov    qword [r13 + 64], rbx
	LONG $0x48758949             // mov    qword [r13 + 72], rsi
	LONG $0x504d8949             // mov    qword [r13 + 80], rcx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x54c58349             // add    r13, 84
	JMP  LBB0_83

LBB0_27:
	LONG $0x0dfc8341         // cmp    r12d, 13
	JG   LBB0_31
	LONG $0x0cfc8341         // cmp    r12d, 12
	JE   LBB0_72
	LONG $0x0dfc8341         // cmp    r12d, 13
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0de1c148         // shl    rcx, 13
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x1ae0c148         // shl    rax, 26
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x27e2c148         // shl    rdx, 39
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x34e0c149         // shl    r8, 52
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x0ce8c148         // shr    rax, 12
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	WORD $0x0148; BYTE $0xc9 // add    rcx, rcx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x0ee0c148         // shl    rax, 14
	WORD $0x578b; BYTE $0x1c // mov    edx, dword [rdi + 28]
	LONG $0x1be2c148         // shl    rdx, 27
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x20 // mov    eax, dword [rdi + 32]
	LONG $0x28e0c148         // shl    rax, 40
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	LONG $0x35e1c149         // shl    r9, 53
	WORD $0x0949; BYTE $0xc1 // or    r9, rax
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x0be9c148         // shr    rcx, 11
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x02e0c148         // shl    rax, 2
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x0fe1c148         // shl    rcx, 15
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x1ce2c148         // shl    rdx, 28
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x29e1c148         // shl    rcx, 41
	WORD $0x778b; BYTE $0x38 // mov    esi, dword [rdi + 56]
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	LONG $0x36e2c149         // shl    r10, 54
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	LONG $0x0aeec148         // shr    rsi, 10
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x03e1c148         // shl    rcx, 3
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x40 // mov    edx, dword [rdi + 64]
	LONG $0x10e2c148         // shl    rdx, 16
	WORD $0x5f8b; BYTE $0x44 // mov    ebx, dword [rdi + 68]
	LONG $0x1de3c148         // shl    rbx, 29
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x2ae1c148         // shl    rcx, 42
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	WORD $0x8949; BYTE $0xd3 // mov    r11, rdx
	LONG $0x37e3c149         // shl    r11, 55
	WORD $0x0949; BYTE $0xcb // or    r11, rcx
	WORD $0x0949; BYTE $0xdb // or    r11, rbx
	LONG $0x09eac148         // shr    rdx, 9
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	LONG $0x11e2c148         // shl    rdx, 17
	WORD $0x5f8b; BYTE $0x58 // mov    ebx, dword [rdi + 88]
	LONG $0x1ee3c148         // shl    rbx, 30
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x2be1c148         // shl    rcx, 43
	WORD $0x578b; BYTE $0x60 // mov    edx, dword [rdi + 96]
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x38e0c148         // shl    rax, 56
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd8 // or    rax, rbx
	LONG $0x08eac148         // shr    rdx, 8
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x05e1c148         // shl    rcx, 5
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x68 // mov    edx, dword [rdi + 104]
	LONG $0x12e2c148         // shl    rdx, 18
	WORD $0x5f8b; BYTE $0x6c // mov    ebx, dword [rdi + 108]
	LONG $0x1fe3c148         // shl    rbx, 31
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x2ce1c148         // shl    rcx, 44
	WORD $0x778b; BYTE $0x74 // mov    esi, dword [rdi + 116]
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x39e2c148         // shl    rdx, 57
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	LONG $0x07eec148         // shr    rsi, 7
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x778b; BYTE $0x7c // mov    esi, dword [rdi + 124]
	LONG $0x13e6c148         // shl    rsi, 19
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x185d894d         // mov    qword [r13 + 24], r11
	LONG $0x20458949         // mov    qword [r13 + 32], rax
	LONG $0x28558949         // mov    qword [r13 + 40], rdx
	LONG $0x30758949         // mov    qword [r13 + 48], rsi
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x34c58349         // add    r13, 52
	JMP  LBB0_83

LBB0_59:
	LONG $0x1cfc8341             // cmp    r12d, 28
	LONG $0x24348944             // mov    dword [rsp], r14d
	JE   LBB0_80
	LONG $0x1dfc8341             // cmp    r12d, 29
	JNE  LBB0_83
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1de1c148             // shl    rcx, 29
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ae2c148             // shl    rdx, 58
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x06e8c148             // shr    rax, 6
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x17e1c148             // shl    rcx, 23
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x34e2c148             // shl    rdx, 52
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x11e1c148             // shl    rcx, 17
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2ee2c148             // shl    rdx, 46
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x12e8c148             // shr    rax, 18
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x0be1c148             // shl    rcx, 11
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x28e2c148             // shl    rdx, 40
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	LONG $0x18e8c148             // shr    rax, 24
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	LONG $0x05e1c148             // shl    rcx, 5
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x22e0c148             // shl    rax, 34
	WORD $0x578b; BYTE $0x2c     // mov    edx, dword [rdi + 44]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x3fe3c149             // shl    r11, 63
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	WORD $0xd148; BYTE $0xea     // shr    rdx, 1
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x1ce0c148             // shl    rax, 28
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	LONG $0x39e6c149             // shl    r14, 57
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x07e9c148             // shr    rcx, 7
	WORD $0x478b; BYTE $0x38     // mov    eax, dword [rdi + 56]
	LONG $0x16e0c148             // shl    rax, 22
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x3c     // mov    ecx, dword [rdi + 60]
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	LONG $0x33e4c149             // shl    r12, 51
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	LONG $0x0de9c148             // shr    rcx, 13
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	LONG $0x2de1c148             // shl    rcx, 45
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x244c8948; BYTE $0x28 // mov    qword [rsp + 40], rcx
	LONG $0x13eac148             // shr    rdx, 19
	WORD $0x778b; BYTE $0x48     // mov    esi, dword [rdi + 72]
	LONG $0x0ae6c148             // shl    rsi, 10
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x27e2c149             // shl    r10, 39
	WORD $0x0949; BYTE $0xf2     // or    r10, rsi
	LONG $0x19eac148             // shr    rdx, 25
	WORD $0x5f8b; BYTE $0x50     // mov    ebx, dword [rdi + 80]
	LONG $0x04e3c148             // shl    rbx, 4
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	LONG $0x547f8b44             // mov    r15d, dword [rdi + 84]
	LONG $0x21e7c149             // shl    r15, 33
	WORD $0x578b; BYTE $0x58     // mov    edx, dword [rdi + 88]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x3ee0c149             // shl    r8, 62
	WORD $0x094d; BYTE $0xf8     // or    r8, r15
	WORD $0x0949; BYTE $0xd8     // or    r8, rbx
	LONG $0x02eac148             // shr    rdx, 2
	WORD $0x5f8b; BYTE $0x5c     // mov    ebx, dword [rdi + 92]
	LONG $0x1be3c148             // shl    rbx, 27
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	LONG $0x607f8b44             // mov    r15d, dword [rdi + 96]
	WORD $0x894d; BYTE $0xf9     // mov    r9, r15
	LONG $0x38e1c149             // shl    r9, 56
	WORD $0x0949; BYTE $0xd9     // or    r9, rbx
	LONG $0x08efc149             // shr    r15, 8
	WORD $0x478b; BYTE $0x64     // mov    eax, dword [rdi + 100]
	LONG $0x15e0c148             // shl    rax, 21
	WORD $0x094c; BYTE $0xf8     // or    rax, r15
	LONG $0x687f8b44             // mov    r15d, dword [rdi + 104]
	WORD $0x894c; BYTE $0xfb     // mov    rbx, r15
	LONG $0x32e3c148             // shl    rbx, 50
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	LONG $0x0eefc149             // shr    r15, 14
	WORD $0x478b; BYTE $0x6c     // mov    eax, dword [rdi + 108]
	LONG $0x0fe0c148             // shl    rax, 15
	WORD $0x094c; BYTE $0xf8     // or    rax, r15
	LONG $0x707f8b44             // mov    r15d, dword [rdi + 112]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	LONG $0x2ce2c148             // shl    rdx, 44
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x14efc149             // shr    r15, 20
	WORD $0x478b; BYTE $0x74     // mov    eax, dword [rdi + 116]
	LONG $0x09e0c148             // shl    rax, 9
	WORD $0x094c; BYTE $0xf8     // or    rax, r15
	LONG $0x787f8b44             // mov    r15d, dword [rdi + 120]
	WORD $0x894c; BYTE $0xf9     // mov    rcx, r15
	LONG $0x26e1c148             // shl    rcx, 38
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x1aefc149             // shr    r15, 26
	WORD $0x478b; BYTE $0x7c     // mov    eax, dword [rdi + 124]
	LONG $0x03e0c148             // shl    rax, 3
	WORD $0x094c; BYTE $0xf8     // or    rax, r15
	LONG $0x24748b48; BYTE $0x08 // mov    rsi, qword [rsp + 8]
	LONG $0x00758949             // mov    qword [r13], rsi
	LONG $0x24748b48; BYTE $0x10 // mov    rsi, qword [rsp + 16]
	LONG $0x08758949             // mov    qword [r13 + 8], rsi
	LONG $0x24748b48; BYTE $0x18 // mov    rsi, qword [rsp + 24]
	LONG $0x10758949             // mov    qword [r13 + 16], rsi
	LONG $0x24748b48; BYTE $0x20 // mov    rsi, qword [rsp + 32]
	LONG $0x18758949             // mov    qword [r13 + 24], rsi
	LONG $0x205d894d             // mov    qword [r13 + 32], r11
	LONG $0x2875894d             // mov    qword [r13 + 40], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x24748b48; BYTE $0x28 // mov    rsi, qword [rsp + 40]
	LONG $0x38758949             // mov    qword [r13 + 56], rsi
	LONG $0x4055894d             // mov    qword [r13 + 64], r10
	LONG $0x4845894d             // mov    qword [r13 + 72], r8
	LONG $0x504d894d             // mov    qword [r13 + 80], r9
	LONG $0x585d8949             // mov    qword [r13 + 88], rbx
	LONG $0x60558949             // mov    qword [r13 + 96], rdx
	LONG $0x684d8949             // mov    qword [r13 + 104], rcx
	LONG $0x70458949             // mov    qword [r13 + 112], rax
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x74c58349             // add    r13, 116
	JMP  LBB0_83

LBB0_9:
	LONG $0x02fc8341         // cmp    r12d, 2
	JE   LBB0_67
	LONG $0x03fc8341         // cmp    r12d, 3
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x03e1c148         // shl    rcx, 3
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x06e0c148         // shl    rax, 6
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x09e2c148         // shl    rdx, 9
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x0ce0c148         // shl    rax, 12
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x0fe1c148         // shl    rcx, 15
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x12e6c148         // shl    rsi, 18
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x15e0c148         // shl    rax, 21
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x1be2c148         // shl    rdx, 27
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x1ee0c148         // shl    rax, 30
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x21e1c148         // shl    rcx, 33
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x24e2c148         // shl    rdx, 36
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x27e1c148         // shl    rcx, 39
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x2ae2c148         // shl    rdx, 42
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x2de1c148         // shl    rcx, 45
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x40 // mov    eax, dword [rdi + 64]
	LONG $0x30e0c148         // shl    rax, 48
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x33e2c148         // shl    rdx, 51
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x48 // mov    eax, dword [rdi + 72]
	LONG $0x36e0c148         // shl    rax, 54
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x39e2c148         // shl    rdx, 57
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x3ce6c148         // shl    rsi, 60
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x3fe0c148         // shl    rax, 63
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0xd148; BYTE $0xea // shr    rdx, 1
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x02e1c148         // shl    rcx, 2
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x05e2c148         // shl    rdx, 5
	WORD $0x778b; BYTE $0x60 // mov    esi, dword [rdi + 96]
	LONG $0x08e6c148         // shl    rsi, 8
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x0be1c148         // shl    rcx, 11
	WORD $0x578b; BYTE $0x68 // mov    edx, dword [rdi + 104]
	LONG $0x0ee2c148         // shl    rdx, 14
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x11e1c148         // shl    rcx, 17
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x70 // mov    edx, dword [rdi + 112]
	LONG $0x14e2c148         // shl    rdx, 20
	WORD $0x778b; BYTE $0x74 // mov    esi, dword [rdi + 116]
	LONG $0x17e6c148         // shl    rsi, 23
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x78 // mov    edx, dword [rdi + 120]
	LONG $0x1ae2c148         // shl    rdx, 26
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x778b; BYTE $0x7c // mov    esi, dword [rdi + 124]
	LONG $0x1de6c148         // shl    rsi, 29
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x08758949         // mov    qword [r13 + 8], rsi
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x0cc58349         // add    r13, 12
	JMP  LBB0_83

LBB0_40:
	LONG $0x12fc8341         // cmp    r12d, 18
	LONG $0x24348944         // mov    dword [rsp], r14d
	JE   LBB0_75
	LONG $0x13fc8341         // cmp    r12d, 19
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x13e1c148         // shl    rcx, 19
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x26e0c148         // shl    rax, 38
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x39e0c149         // shl    r8, 57
	WORD $0x0949; BYTE $0xc0 // or    r8, rax
	WORD $0x0949; BYTE $0xc8 // or    r8, rcx
	LONG $0x07eac148         // shr    rdx, 7
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x0ce0c148         // shl    rax, 12
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x1fe1c148         // shl    rcx, 31
	WORD $0x578b; BYTE $0x18 // mov    edx, dword [rdi + 24]
	WORD $0x8949; BYTE $0xd3 // mov    r11, rdx
	LONG $0x32e3c149         // shl    r11, 50
	WORD $0x0949; BYTE $0xcb // or    r11, rcx
	WORD $0x0949; BYTE $0xc3 // or    r11, rax
	LONG $0x0eeac148         // shr    rdx, 14
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x05e0c148         // shl    rax, 5
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x2be2c148         // shl    rdx, 43
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x3ee1c149         // shl    r9, 62
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x02e8c148         // shr    rax, 2
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x11e1c148         // shl    rcx, 17
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x30 // mov    eax, dword [rdi + 48]
	LONG $0x24e0c148         // shl    rax, 36
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	WORD $0x8949; BYTE $0xd2 // mov    r10, rdx
	LONG $0x37e2c149         // shl    r10, 55
	WORD $0x0949; BYTE $0xc2 // or    r10, rax
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	LONG $0x09eac148         // shr    rdx, 9
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x0ae1c148         // shl    rcx, 10
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x3c // mov    edx, dword [rdi + 60]
	LONG $0x1de2c148         // shl    rdx, 29
	WORD $0x778b; BYTE $0x40 // mov    esi, dword [rdi + 64]
	WORD $0x8949; BYTE $0xf7 // mov    r15, rsi
	LONG $0x30e7c149         // shl    r15, 48
	WORD $0x0949; BYTE $0xd7 // or    r15, rdx
	WORD $0x0949; BYTE $0xcf // or    r15, rcx
	LONG $0x10eec148         // shr    rsi, 16
	WORD $0x4f8b; BYTE $0x44 // mov    ecx, dword [rdi + 68]
	LONG $0x03e1c148         // shl    rcx, 3
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x48 // mov    edx, dword [rdi + 72]
	LONG $0x16e2c148         // shl    rdx, 22
	WORD $0x5f8b; BYTE $0x4c // mov    ebx, dword [rdi + 76]
	LONG $0x29e3c148         // shl    rbx, 41
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	WORD $0x8949; BYTE $0xce // mov    r14, rcx
	LONG $0x3ce6c149         // shl    r14, 60
	WORD $0x0949; BYTE $0xde // or    r14, rbx
	LONG $0x04e9c148         // shr    rcx, 4
	WORD $0x5f8b; BYTE $0x54 // mov    ebx, dword [rdi + 84]
	LONG $0x0fe3c148         // shl    rbx, 15
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x22e1c148         // shl    rcx, 34
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	LONG $0x35e6c148         // shl    rsi, 53
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xde // or    rsi, rbx
	LONG $0x0beac148         // shr    rdx, 11
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x64 // mov    edx, dword [rdi + 100]
	LONG $0x1be2c148         // shl    rdx, 27
	WORD $0x5f8b; BYTE $0x68 // mov    ebx, dword [rdi + 104]
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	LONG $0x2ee0c148         // shl    rax, 46
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	LONG $0x12ebc148         // shr    rbx, 18
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	WORD $0x0148; BYTE $0xc9 // add    rcx, rcx
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	WORD $0x578b; BYTE $0x70 // mov    edx, dword [rdi + 112]
	LONG $0x14e2c148         // shl    rdx, 20
	WORD $0x5f8b; BYTE $0x74 // mov    ebx, dword [rdi + 116]
	LONG $0x27e3c148         // shl    rbx, 39
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	LONG $0x3ae2c148         // shl    rdx, 58
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	LONG $0x06e9c148         // shr    rcx, 6
	WORD $0x5f8b; BYTE $0x7c // mov    ebx, dword [rdi + 124]
	LONG $0x0de3c148         // shl    rbx, 13
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x085d894d         // mov    qword [r13 + 8], r11
	LONG $0x104d894d         // mov    qword [r13 + 16], r9
	LONG $0x1855894d         // mov    qword [r13 + 24], r10
	LONG $0x207d894d         // mov    qword [r13 + 32], r15
	LONG $0x2875894d         // mov    qword [r13 + 40], r14
	LONG $0x24348b44         // mov    r14d, dword [rsp]
	LONG $0x30758949         // mov    qword [r13 + 48], rsi
	LONG $0x38458949         // mov    qword [r13 + 56], rax
	LONG $0x40558949         // mov    qword [r13 + 64], rdx
	LONG $0x485d8949         // mov    qword [r13 + 72], rbx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x4cc58349         // add    r13, 76
	JMP  LBB0_83

LBB0_24:
	LONG $0x0afc8341         // cmp    r12d, 10
	JE   LBB0_71
	LONG $0x0bfc8341         // cmp    r12d, 11
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0be1c148         // shl    rcx, 11
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x16e0c148         // shl    rax, 22
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x21e2c148         // shl    rdx, 33
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x2ce0c148         // shl    rax, 44
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	LONG $0x37e0c149         // shl    r8, 55
	WORD $0x0949; BYTE $0xc0 // or    r8, rax
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x09e9c148         // shr    rcx, 9
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x02e0c148         // shl    rax, 2
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	LONG $0x0de1c148         // shl    rcx, 13
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x18e2c148         // shl    rdx, 24
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x24 // mov    eax, dword [rdi + 36]
	LONG $0x23e0c148         // shl    rax, 35
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	LONG $0x2ee1c148         // shl    rcx, 46
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x2c // mov    eax, dword [rdi + 44]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x39e1c149         // shl    r9, 57
	WORD $0x0949; BYTE $0xc9 // or    r9, rcx
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x07e8c148         // shr    rax, 7
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x34 // mov    eax, dword [rdi + 52]
	LONG $0x0fe0c148         // shl    rax, 15
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x1ae2c148         // shl    rdx, 26
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x3c // mov    eax, dword [rdi + 60]
	LONG $0x25e0c148         // shl    rax, 37
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x44 // mov    esi, dword [rdi + 68]
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	LONG $0x3be2c149         // shl    r10, 59
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	LONG $0x05eec148         // shr    rsi, 5
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x11e2c148         // shl    rdx, 17
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x1ce6c148         // shl    rsi, 28
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x54 // mov    ecx, dword [rdi + 84]
	LONG $0x27e1c148         // shl    rcx, 39
	WORD $0x5f8b; BYTE $0x58 // mov    ebx, dword [rdi + 88]
	LONG $0x32e3c148         // shl    rbx, 50
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	LONG $0x3de2c148         // shl    rdx, 61
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x03e9c148         // shr    rcx, 3
	WORD $0x778b; BYTE $0x60 // mov    esi, dword [rdi + 96]
	LONG $0x08e6c148         // shl    rsi, 8
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x13e1c148         // shl    rcx, 19
	WORD $0x5f8b; BYTE $0x68 // mov    ebx, dword [rdi + 104]
	LONG $0x1ee3c148         // shl    rbx, 30
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x29e1c148         // shl    rcx, 41
	WORD $0x778b; BYTE $0x70 // mov    esi, dword [rdi + 112]
	LONG $0x34e6c148         // shl    rsi, 52
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	LONG $0x3fe1c148         // shl    rcx, 63
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	WORD $0xd148; BYTE $0xe8 // shr    rax, 1
	WORD $0x778b; BYTE $0x78 // mov    esi, dword [rdi + 120]
	LONG $0x0ae6c148         // shl    rsi, 10
	WORD $0x0948; BYTE $0xc6 // or    rsi, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x15e0c148         // shl    rax, 21
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x18558949         // mov    qword [r13 + 24], rdx
	LONG $0x204d8949         // mov    qword [r13 + 32], rcx
	LONG $0x28458949         // mov    qword [r13 + 40], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x2cc58349         // add    r13, 44
	JMP  LBB0_83

LBB0_55:
	LONG $0x1afc8341             // cmp    r12d, 26
	JE   LBB0_79
	LONG $0x1bfc8341             // cmp    r12d, 27
	JNE  LBB0_83
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1be1c148             // shl    rcx, 27
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x36e2c148             // shl    rdx, 54
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x0ae8c148             // shr    rax, 10
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x11e1c148             // shl    rcx, 17
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2ce2c148             // shl    rdx, 44
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x14e8c148             // shr    rax, 20
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x07e1c148             // shl    rcx, 7
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x22e0c148             // shl    rax, 34
	WORD $0x578b; BYTE $0x1c     // mov    edx, dword [rdi + 28]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x3de7c149             // shl    r15, 61
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	LONG $0x03eac148             // shr    rdx, 3
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x33e2c148             // shl    rdx, 51
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x0de9c148             // shr    rcx, 13
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x0ee0c148             // shl    rax, 14
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	LONG $0x29e6c149             // shl    r14, 41
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x17e9c148             // shr    rcx, 23
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	LONG $0x1fe1c148             // shl    rcx, 31
	WORD $0x578b; BYTE $0x38     // mov    edx, dword [rdi + 56]
	WORD $0x894d; BYTE $0xea     // mov    r10, r13
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	LONG $0x3ae5c149             // shl    r13, 58
	WORD $0x0949; BYTE $0xcd     // or    r13, rcx
	WORD $0x0949; BYTE $0xc5     // or    r13, rax
	LONG $0x06eac148             // shr    rdx, 6
	WORD $0x478b; BYTE $0x3c     // mov    eax, dword [rdi + 60]
	LONG $0x15e0c148             // shl    rax, 21
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x40     // mov    ecx, dword [rdi + 64]
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	LONG $0x30e4c149             // shl    r12, 48
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	LONG $0x10e9c148             // shr    rcx, 16
	WORD $0x478b; BYTE $0x44     // mov    eax, dword [rdi + 68]
	LONG $0x0be0c148             // shl    rax, 11
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x48     // mov    ecx, dword [rdi + 72]
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	LONG $0x26e3c149             // shl    r11, 38
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x1ae9c148             // shr    rcx, 26
	WORD $0x478b; BYTE $0x4c     // mov    eax, dword [rdi + 76]
	WORD $0x0148; BYTE $0xc0     // add    rax, rax
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x50     // mov    ecx, dword [rdi + 80]
	LONG $0x1ce1c148             // shl    rcx, 28
	WORD $0x578b; BYTE $0x54     // mov    edx, dword [rdi + 84]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x37e0c149             // shl    r8, 55
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	WORD $0x0949; BYTE $0xc0     // or    r8, rax
	LONG $0x09eac148             // shr    rdx, 9
	WORD $0x478b; BYTE $0x58     // mov    eax, dword [rdi + 88]
	LONG $0x12e0c148             // shl    rax, 18
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x2de1c149             // shl    r9, 45
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	LONG $0x13e9c148             // shr    rcx, 19
	WORD $0x5f8b; BYTE $0x60     // mov    ebx, dword [rdi + 96]
	LONG $0x08e3c148             // shl    rbx, 8
	WORD $0x0948; BYTE $0xcb     // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x64     // mov    ecx, dword [rdi + 100]
	LONG $0x23e1c148             // shl    rcx, 35
	WORD $0x478b; BYTE $0x68     // mov    eax, dword [rdi + 104]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ee2c148             // shl    rdx, 62
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	WORD $0x0948; BYTE $0xda     // or    rdx, rbx
	LONG $0x02e8c148             // shr    rax, 2
	WORD $0x5f8b; BYTE $0x6c     // mov    ebx, dword [rdi + 108]
	LONG $0x19e3c148             // shl    rbx, 25
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x34e6c148             // shl    rsi, 52
	WORD $0x0948; BYTE $0xde     // or    rsi, rbx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x5f8b; BYTE $0x74     // mov    ebx, dword [rdi + 116]
	LONG $0x0fe3c148             // shl    rbx, 15
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	LONG $0x2ae1c148             // shl    rcx, 42
	WORD $0x0948; BYTE $0xd9     // or    rcx, rbx
	LONG $0x16e8c148             // shr    rax, 22
	WORD $0x5f8b; BYTE $0x7c     // mov    ebx, dword [rdi + 124]
	LONG $0x05e3c148             // shl    rbx, 5
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	WORD $0x8949; BYTE $0x02     // mov    qword [r10], rax
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08428949             // mov    qword [r10 + 8], rax
	LONG $0x107a894d             // mov    qword [r10 + 16], r15
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x18428949             // mov    qword [r10 + 24], rax
	LONG $0x2072894d             // mov    qword [r10 + 32], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x286a894d             // mov    qword [r10 + 40], r13
	WORD $0x894d; BYTE $0xd5     // mov    r13, r10
	LONG $0x3062894d             // mov    qword [r10 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x385a894d             // mov    qword [r10 + 56], r11
	LONG $0x4042894d             // mov    qword [r10 + 64], r8
	LONG $0x484a894d             // mov    qword [r10 + 72], r9
	LONG $0x50528949             // mov    qword [r10 + 80], rdx
	LONG $0x58728949             // mov    qword [r10 + 88], rsi
	LONG $0x604a8949             // mov    qword [r10 + 96], rcx
	LONG $0x685a8949             // mov    qword [r10 + 104], rbx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x6cc58349             // add    r13, 108
	JMP  LBB0_83

LBB0_16:
	LONG $0x06fc8341         // cmp    r12d, 6
	JE   LBB0_69
	LONG $0x07fc8341         // cmp    r12d, 7
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x07e1c148         // shl    rcx, 7
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x0ee0c148         // shl    rax, 14
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x15e2c148         // shl    rdx, 21
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x1ce0c148         // shl    rax, 28
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x23e1c148         // shl    rcx, 35
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x2ae6c148         // shl    rsi, 42
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x31e0c148         // shl    rax, 49
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x38e1c148         // shl    rcx, 56
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x3fe0c149         // shl    r8, 63
	WORD $0x0949; BYTE $0xc8 // or    r8, rcx
	WORD $0x0949; BYTE $0xf0 // or    r8, rsi
	WORD $0xd148; BYTE $0xea // shr    rdx, 1
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x2c // mov    edx, dword [rdi + 44]
	LONG $0x0de2c148         // shl    rdx, 13
	WORD $0x778b; BYTE $0x30 // mov    esi, dword [rdi + 48]
	LONG $0x14e6c148         // shl    rsi, 20
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x1be1c148         // shl    rcx, 27
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x22e2c148         // shl    rdx, 34
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x29e1c148         // shl    rcx, 41
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x40 // mov    edx, dword [rdi + 64]
	LONG $0x30e2c148         // shl    rdx, 48
	WORD $0x5f8b; BYTE $0x44 // mov    ebx, dword [rdi + 68]
	LONG $0x37e3c148         // shl    rbx, 55
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x578b; BYTE $0x48 // mov    edx, dword [rdi + 72]
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	LONG $0x3ee6c148         // shl    rsi, 62
	WORD $0x0948; BYTE $0xde // or    rsi, rbx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	LONG $0x02eac148         // shr    rdx, 2
	WORD $0x4f8b; BYTE $0x4c // mov    ecx, dword [rdi + 76]
	LONG $0x05e1c148         // shl    rcx, 5
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x50 // mov    edx, dword [rdi + 80]
	LONG $0x0ce2c148         // shl    rdx, 12
	WORD $0x5f8b; BYTE $0x54 // mov    ebx, dword [rdi + 84]
	LONG $0x13e3c148         // shl    rbx, 19
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x21e2c148         // shl    rdx, 33
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x28e1c148         // shl    rcx, 40
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	WORD $0x578b; BYTE $0x64 // mov    edx, dword [rdi + 100]
	LONG $0x2fe2c148         // shl    rdx, 47
	WORD $0x5f8b; BYTE $0x68 // mov    ebx, dword [rdi + 104]
	LONG $0x36e3c148         // shl    rbx, 54
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x478b; BYTE $0x6c // mov    eax, dword [rdi + 108]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x3de2c148         // shl    rdx, 61
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	LONG $0x03e8c148         // shr    rax, 3
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	LONG $0x0be0c148         // shl    rax, 11
	WORD $0x5f8b; BYTE $0x78 // mov    ebx, dword [rdi + 120]
	LONG $0x12e3c148         // shl    rbx, 18
	WORD $0x0948; BYTE $0xc3 // or    rbx, rax
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x19e0c148         // shl    rax, 25
	WORD $0x0948; BYTE $0xd8 // or    rax, rbx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x08758949         // mov    qword [r13 + 8], rsi
	LONG $0x10558949         // mov    qword [r13 + 16], rdx
	LONG $0x18458949         // mov    qword [r13 + 24], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x1cc58349         // add    r13, 28
	JMP  LBB0_83

LBB0_47:
	LONG $0x16fc8341             // cmp    r12d, 22
	JE   LBB0_77
	LONG $0x17fc8341             // cmp    r12d, 23
	JNE  LBB0_83
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x17e1c148             // shl    rcx, 23
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2ee2c148             // shl    rdx, 46
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x12e8c148             // shr    rax, 18
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x05e1c148             // shl    rcx, 5
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x1ce0c148             // shl    rax, 28
	WORD $0x578b; BYTE $0x14     // mov    edx, dword [rdi + 20]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x33e6c148             // shl    rsi, 51
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	LONG $0x24748948; BYTE $0x10 // mov    qword [rsp + 16], rsi
	LONG $0x0deac148             // shr    rdx, 13
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x0ae0c148             // shl    rax, 10
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x21e1c148             // shl    rcx, 33
	WORD $0x578b; BYTE $0x20     // mov    edx, dword [rdi + 32]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	LONG $0x38e6c149             // shl    r14, 56
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x24     // mov    eax, dword [rdi + 36]
	LONG $0x0fe0c148             // shl    rax, 15
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x28     // mov    ecx, dword [rdi + 40]
	LONG $0x26e1c148             // shl    rcx, 38
	WORD $0x578b; BYTE $0x2c     // mov    edx, dword [rdi + 44]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x3de2c149             // shl    r10, 61
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	LONG $0x03eac148             // shr    rdx, 3
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x14e0c148             // shl    rax, 20
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	LONG $0x2be3c149             // shl    r11, 43
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x15e9c148             // shr    rcx, 21
	WORD $0x578b; BYTE $0x38     // mov    edx, dword [rdi + 56]
	LONG $0x02e2c148             // shl    rdx, 2
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x3c     // mov    ecx, dword [rdi + 60]
	LONG $0x19e1c148             // shl    rcx, 25
	WORD $0x778b; BYTE $0x40     // mov    esi, dword [rdi + 64]
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	LONG $0x30e7c149             // shl    r15, 48
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	WORD $0x0949; BYTE $0xd7     // or    r15, rdx
	LONG $0x10eec148             // shr    rsi, 16
	WORD $0x4f8b; BYTE $0x44     // mov    ecx, dword [rdi + 68]
	LONG $0x07e1c148             // shl    rcx, 7
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x578b; BYTE $0x48     // mov    edx, dword [rdi + 72]
	LONG $0x1ee2c148             // shl    rdx, 30
	WORD $0x778b; BYTE $0x4c     // mov    esi, dword [rdi + 76]
	WORD $0x8949; BYTE $0xf4     // mov    r12, rsi
	LONG $0x35e4c149             // shl    r12, 53
	WORD $0x0949; BYTE $0xd4     // or    r12, rdx
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	LONG $0x0beec148             // shr    rsi, 11
	WORD $0x4f8b; BYTE $0x50     // mov    ecx, dword [rdi + 80]
	LONG $0x0ce1c148             // shl    rcx, 12
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x778b; BYTE $0x54     // mov    esi, dword [rdi + 84]
	LONG $0x23e6c148             // shl    rsi, 35
	WORD $0x578b; BYTE $0x58     // mov    edx, dword [rdi + 88]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x3ae1c149             // shl    r9, 58
	WORD $0x0949; BYTE $0xf1     // or    r9, rsi
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	LONG $0x06eac148             // shr    rdx, 6
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	LONG $0x11e1c148             // shl    rcx, 17
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x60     // mov    edx, dword [rdi + 96]
	LONG $0x28e2c148             // shl    rdx, 40
	WORD $0x778b; BYTE $0x64     // mov    esi, dword [rdi + 100]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x3fe3c148             // shl    rbx, 63
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb     // or    rbx, rcx
	WORD $0xd148; BYTE $0xee     // shr    rsi, 1
	WORD $0x578b; BYTE $0x68     // mov    edx, dword [rdi + 104]
	LONG $0x16e2c148             // shl    rdx, 22
	WORD $0x0948; BYTE $0xf2     // or    rdx, rsi
	WORD $0x778b; BYTE $0x6c     // mov    esi, dword [rdi + 108]
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi
	LONG $0x2de0c149             // shl    r8, 45
	WORD $0x0949; BYTE $0xd0     // or    r8, rdx
	LONG $0x13eec148             // shr    rsi, 19
	WORD $0x578b; BYTE $0x70     // mov    edx, dword [rdi + 112]
	LONG $0x04e2c148             // shl    rdx, 4
	WORD $0x0948; BYTE $0xf2     // or    rdx, rsi
	WORD $0x778b; BYTE $0x74     // mov    esi, dword [rdi + 116]
	LONG $0x1be6c148             // shl    rsi, 27
	WORD $0x4f8b; BYTE $0x78     // mov    ecx, dword [rdi + 120]
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x32e0c148             // shl    rax, 50
	WORD $0x0948; BYTE $0xf0     // or    rax, rsi
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	LONG $0x0ee9c148             // shr    rcx, 14
	WORD $0x578b; BYTE $0x7c     // mov    edx, dword [rdi + 124]
	LONG $0x09e2c148             // shl    rdx, 9
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	LONG $0x004d8949             // mov    qword [r13], rcx
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	LONG $0x084d8949             // mov    qword [r13 + 8], rcx
	LONG $0x1075894d             // mov    qword [r13 + 16], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x1855894d             // mov    qword [r13 + 24], r10
	LONG $0x205d894d             // mov    qword [r13 + 32], r11
	LONG $0x287d894d             // mov    qword [r13 + 40], r15
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x384d894d             // mov    qword [r13 + 56], r9
	LONG $0x405d8949             // mov    qword [r13 + 64], rbx
	LONG $0x4845894d             // mov    qword [r13 + 72], r8
	LONG $0x50458949             // mov    qword [r13 + 80], rax
	LONG $0x58558949             // mov    qword [r13 + 88], rdx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x5cc58349             // add    r13, 92
	JMP  LBB0_83

LBB0_31:
	LONG $0x0efc8341         // cmp    r12d, 14
	JE   LBB0_73
	LONG $0x0ffc8341         // cmp    r12d, 15
	JNE  LBB0_83
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0fe1c148         // shl    rcx, 15
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x1ee0c148         // shl    rax, 30
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x2de2c148         // shl    rdx, 45
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x3ce0c149         // shl    r8, 60
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x04e8c148         // shr    rax, 4
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x0be1c148         // shl    rcx, 11
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x1ae0c148         // shl    rax, 26
	WORD $0x578b; BYTE $0x1c // mov    edx, dword [rdi + 28]
	LONG $0x29e2c148         // shl    rdx, 41
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x20 // mov    eax, dword [rdi + 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x38e1c149         // shl    r9, 56
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x08e8c148         // shr    rax, 8
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	LONG $0x07e1c148         // shl    rcx, 7
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x16e0c148         // shl    rax, 22
	WORD $0x578b; BYTE $0x2c // mov    edx, dword [rdi + 44]
	LONG $0x25e2c148         // shl    rdx, 37
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xca // mov    r10, rcx
	LONG $0x34e2c149         // shl    r10, 52
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	LONG $0x0ce9c148         // shr    rcx, 12
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x03e2c148         // shl    rdx, 3
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x12e1c148         // shl    rcx, 18
	WORD $0x778b; BYTE $0x3c // mov    esi, dword [rdi + 60]
	LONG $0x21e6c148         // shl    rsi, 33
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx
	LONG $0x3fe3c148         // shl    rbx, 63
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0xd148; BYTE $0xea // shr    rdx, 1
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x0ee1c148         // shl    rcx, 14
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x1de2c148         // shl    rdx, 29
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x2ce6c148         // shl    rsi, 44
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x54 // mov    ecx, dword [rdi + 84]
	WORD $0x8949; BYTE $0xcb // mov    r11, rcx
	LONG $0x3be3c149         // shl    r11, 59
	WORD $0x0949; BYTE $0xf3 // or    r11, rsi
	LONG $0x05e9c148         // shr    rcx, 5
	WORD $0x778b; BYTE $0x58 // mov    esi, dword [rdi + 88]
	LONG $0x0ae6c148         // shl    rsi, 10
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x19e1c148         // shl    rcx, 25
	WORD $0x478b; BYTE $0x60 // mov    eax, dword [rdi + 96]
	LONG $0x28e0c148         // shl    rax, 40
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x37e6c148         // shl    rsi, 55
	WORD $0x0948; BYTE $0xc6 // or    rsi, rax
	LONG $0x09e9c148         // shr    rcx, 9
	WORD $0x478b; BYTE $0x68 // mov    eax, dword [rdi + 104]
	LONG $0x06e0c148         // shl    rax, 6
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x15e1c148         // shl    rcx, 21
	WORD $0x578b; BYTE $0x70 // mov    edx, dword [rdi + 112]
	LONG $0x24e2c148         // shl    rdx, 36
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	WORD $0x8948; BYTE $0xc1 // mov    rcx, rax
	LONG $0x33e1c148         // shl    rcx, 51
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	LONG $0x0de8c148         // shr    rax, 13
	WORD $0x578b; BYTE $0x78 // mov    edx, dword [rdi + 120]
	LONG $0x02e2c148         // shl    rdx, 2
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x11e0c148         // shl    rax, 17
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x185d8949         // mov    qword [r13 + 24], rbx
	LONG $0x205d894d         // mov    qword [r13 + 32], r11
	LONG $0x28758949         // mov    qword [r13 + 40], rsi
	LONG $0x304d8949         // mov    qword [r13 + 48], rcx
	LONG $0x38458949         // mov    qword [r13 + 56], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x3cc58349         // add    r13, 60
	JMP  LBB0_83

LBB0_81:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1ee1c148             // shl    rcx, 30
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x3ce2c148             // shl    rdx, 60
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x04e8c148             // shr    rax, 4
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x1ae1c148             // shl    rcx, 26
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x38e2c148             // shl    rdx, 56
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x08e8c148             // shr    rax, 8
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x16e1c148             // shl    rcx, 22
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x34e2c148             // shl    rdx, 52
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x12e1c148             // shl    rcx, 18
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x30e2c148             // shl    rdx, 48
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	LONG $0x0ee1c148             // shl    rcx, 14
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x24348944             // mov    dword [rsp], r14d
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x2ce6c149             // shl    r14, 44
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	LONG $0x14e8c148             // shr    rax, 20
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x0ae1c148             // shl    rcx, 10
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	LONG $0x28e4c149             // shl    r12, 40
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	LONG $0x18e8c148             // shr    rax, 24
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	LONG $0x06e1c148             // shl    rcx, 6
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x38     // mov    eax, dword [rdi + 56]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x24e3c149             // shl    r11, 36
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	LONG $0x1ce8c148             // shr    rax, 28
	WORD $0x578b; BYTE $0x3c     // mov    edx, dword [rdi + 60]
	LONG $0x02e2c148             // shl    rdx, 2
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x778b; BYTE $0x44     // mov    esi, dword [rdi + 68]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x3ee1c149             // shl    r9, 62
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	WORD $0x0949; BYTE $0xd1     // or    r9, rdx
	LONG $0x02eec148             // shr    rsi, 2
	WORD $0x478b; BYTE $0x48     // mov    eax, dword [rdi + 72]
	LONG $0x1ce0c148             // shl    rax, 28
	WORD $0x0948; BYTE $0xf0     // or    rax, rsi
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x3ae2c149             // shl    r10, 58
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	LONG $0x06eac148             // shr    rdx, 6
	WORD $0x478b; BYTE $0x50     // mov    eax, dword [rdi + 80]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x578b; BYTE $0x54     // mov    edx, dword [rdi + 84]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x36e7c149             // shl    r15, 54
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	LONG $0x0aeac148             // shr    rdx, 10
	WORD $0x478b; BYTE $0x58     // mov    eax, dword [rdi + 88]
	LONG $0x14e0c148             // shl    rax, 20
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x5f8b; BYTE $0x5c     // mov    ebx, dword [rdi + 92]
	WORD $0x8949; BYTE $0xd8     // mov    r8, rbx
	LONG $0x32e0c149             // shl    r8, 50
	WORD $0x0949; BYTE $0xc0     // or    r8, rax
	LONG $0x0eebc148             // shr    rbx, 14
	WORD $0x478b; BYTE $0x60     // mov    eax, dword [rdi + 96]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x64     // mov    ebx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0x2ee6c148             // shl    rsi, 46
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	LONG $0x12ebc148             // shr    rbx, 18
	WORD $0x478b; BYTE $0x68     // mov    eax, dword [rdi + 104]
	LONG $0x0ce0c148             // shl    rax, 12
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x6c     // mov    ebx, dword [rdi + 108]
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x2ae2c148             // shl    rdx, 42
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x16ebc148             // shr    rbx, 22
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x74     // mov    ebx, dword [rdi + 116]
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	LONG $0x26e1c148             // shl    rcx, 38
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x1aebc148             // shr    rbx, 26
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x7c     // mov    ebx, dword [rdi + 124]
	LONG $0x22e3c148             // shl    rbx, 34
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08458949             // mov    qword [r13 + 8], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x10458949             // mov    qword [r13 + 16], rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x18458949             // mov    qword [r13 + 24], rax
	LONG $0x2075894d             // mov    qword [r13 + 32], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x2865894d             // mov    qword [r13 + 40], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x305d894d             // mov    qword [r13 + 48], r11
	LONG $0x384d894d             // mov    qword [r13 + 56], r9
	LONG $0x4055894d             // mov    qword [r13 + 64], r10
	LONG $0x487d894d             // mov    qword [r13 + 72], r15
	LONG $0x5045894d             // mov    qword [r13 + 80], r8
	LONG $0x58758949             // mov    qword [r13 + 88], rsi
	LONG $0x60558949             // mov    qword [r13 + 96], rdx
	LONG $0x684d8949             // mov    qword [r13 + 104], rcx
	LONG $0x705d8949             // mov    qword [r13 + 112], rbx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x78c58349             // add    r13, 120
	JMP  LBB0_83

LBB0_66:
	LONG $0x80ef8348 // sub    rdi, -128
	JMP  LBB0_83

LBB0_74:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x20e0c148         // shl    rax, 32
	LONG $0x0c478b44         // mov    r8d, dword [rdi + 12]
	LONG $0x30e0c149         // shl    r8, 48
	WORD $0x0949; BYTE $0xc0 // or    r8, rax
	WORD $0x0949; BYTE $0xc8 // or    r8, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x20e0c148         // shl    rax, 32
	LONG $0x1c4f8b44         // mov    r9d, dword [rdi + 28]
	LONG $0x30e1c149         // shl    r9, 48
	WORD $0x0949; BYTE $0xc1 // or    r9, rax
	WORD $0x0949; BYTE $0xc9 // or    r9, rcx
	WORD $0x478b; BYTE $0x20 // mov    eax, dword [rdi + 32]
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x28 // mov    edx, dword [rdi + 40]
	LONG $0x20e2c148         // shl    rdx, 32
	LONG $0x2c578b44         // mov    r10d, dword [rdi + 44]
	LONG $0x30e2c149         // shl    r10, 48
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x10e2c148         // shl    rdx, 16
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x20e1c148         // shl    rcx, 32
	LONG $0x3c5f8b44         // mov    r11d, dword [rdi + 60]
	LONG $0x30e3c149         // shl    r11, 48
	WORD $0x0949; BYTE $0xcb // or    r11, rcx
	WORD $0x0949; BYTE $0xd3 // or    r11, rdx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	WORD $0x5f8b; BYTE $0x44 // mov    ebx, dword [rdi + 68]
	LONG $0x10e3c148         // shl    rbx, 16
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x8945; BYTE $0xf7 // mov    r15d, r14d
	LONG $0x4c778b44         // mov    r14d, dword [rdi + 76]
	LONG $0x30e6c149         // shl    r14, 48
	WORD $0x0949; BYTE $0xce // or    r14, rcx
	WORD $0x0949; BYTE $0xde // or    r14, rbx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	WORD $0x478b; BYTE $0x54 // mov    eax, dword [rdi + 84]
	LONG $0x10e0c148         // shl    rax, 16
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x5f8b; BYTE $0x5c // mov    ebx, dword [rdi + 92]
	LONG $0x30e3c148         // shl    rbx, 48
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xc3 // or    rbx, rax
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	WORD $0x478b; BYTE $0x64 // mov    eax, dword [rdi + 100]
	LONG $0x10e0c148         // shl    rax, 16
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x20e6c148         // shl    rsi, 32
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x70 // mov    eax, dword [rdi + 112]
	WORD $0x778b; BYTE $0x74 // mov    esi, dword [rdi + 116]
	LONG $0x10e6c148         // shl    rsi, 16
	WORD $0x0948; BYTE $0xc6 // or    rsi, rax
	WORD $0x478b; BYTE $0x78 // mov    eax, dword [rdi + 120]
	LONG $0x20e0c148         // shl    rax, 32
	WORD $0x578b; BYTE $0x7c // mov    edx, dword [rdi + 124]
	LONG $0x30e2c148         // shl    rdx, 48
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x185d894d         // mov    qword [r13 + 24], r11
	LONG $0x2075894d         // mov    qword [r13 + 32], r14
	WORD $0x8945; BYTE $0xfe // mov    r14d, r15d
	LONG $0x285d8949         // mov    qword [r13 + 40], rbx
	LONG $0x304d8949         // mov    qword [r13 + 48], rcx
	LONG $0x38558949         // mov    qword [r13 + 56], rdx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x40c58349         // add    r13, 64
	JMP  LBB0_83

LBB0_70:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x10e0c148         // shl    rax, 16
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x18e2c148         // shl    rdx, 24
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x20e0c148         // shl    rax, 32
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x28e1c148         // shl    rcx, 40
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x30e6c148         // shl    rsi, 48
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	LONG $0x1c478b44         // mov    r8d, dword [rdi + 28]
	LONG $0x38e0c149         // shl    r8, 56
	WORD $0x0949; BYTE $0xf0 // or    r8, rsi
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x08e2c148         // shl    rdx, 8
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x778b; BYTE $0x2c // mov    esi, dword [rdi + 44]
	LONG $0x18e6c148         // shl    rsi, 24
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x28e2c148         // shl    rdx, 40
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x5f8b; BYTE $0x3c // mov    ebx, dword [rdi + 60]
	LONG $0x38e3c148         // shl    rbx, 56
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x08e2c148         // shl    rdx, 8
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x778b; BYTE $0x4c // mov    esi, dword [rdi + 76]
	LONG $0x18e6c148         // shl    rsi, 24
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	LONG $0x28e2c148         // shl    rdx, 40
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x38e2c148         // shl    rdx, 56
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	WORD $0x778b; BYTE $0x64 // mov    esi, dword [rdi + 100]
	LONG $0x08e6c148         // shl    rsi, 8
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x68 // mov    ecx, dword [rdi + 104]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x478b; BYTE $0x6c // mov    eax, dword [rdi + 108]
	LONG $0x18e0c148         // shl    rax, 24
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x778b; BYTE $0x74 // mov    esi, dword [rdi + 116]
	LONG $0x28e6c148         // shl    rsi, 40
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x38e0c148         // shl    rax, 56
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x085d8949         // mov    qword [r13 + 8], rbx
	LONG $0x10558949         // mov    qword [r13 + 16], rdx
	LONG $0x18458949         // mov    qword [r13 + 24], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x20c58349         // add    r13, 32
	JMP  LBB0_83

LBB0_78:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x18e1c148             // shl    rcx, 24
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x30e2c148             // shl    rdx, 48
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x08e1c148             // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x578b; BYTE $0x14     // mov    edx, dword [rdi + 20]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	LONG $0x38e6c149             // shl    r14, 56
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x28e1c148             // shl    rcx, 40
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x244c8948; BYTE $0x10 // mov    qword [rsp + 16], rcx
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	LONG $0x18e1c148             // shl    rcx, 24
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x30e3c149             // shl    r11, 48
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x08e1c148             // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x578b; BYTE $0x34     // mov    edx, dword [rdi + 52]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x38e4c149             // shl    r12, 56
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x38     // mov    eax, dword [rdi + 56]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	LONG $0x3c7f8b44             // mov    r15d, dword [rdi + 60]
	LONG $0x28e7c149             // shl    r15, 40
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	LONG $0x18e2c148             // shl    rdx, 24
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x48     // mov    eax, dword [rdi + 72]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x30e2c149             // shl    r10, 48
	WORD $0x0949; BYTE $0xd2     // or    r10, rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x778b; BYTE $0x4c     // mov    esi, dword [rdi + 76]
	LONG $0x08e6c148             // shl    rsi, 8
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	WORD $0x478b; BYTE $0x50     // mov    eax, dword [rdi + 80]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x578b; BYTE $0x54     // mov    edx, dword [rdi + 84]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x38e0c149             // shl    r8, 56
	WORD $0x0949; BYTE $0xc0     // or    r8, rax
	WORD $0x0949; BYTE $0xf0     // or    r8, rsi
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x58     // mov    eax, dword [rdi + 88]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	LONG $0x5c4f8b44             // mov    r9d, dword [rdi + 92]
	LONG $0x28e1c149             // shl    r9, 40
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	WORD $0x478b; BYTE $0x60     // mov    eax, dword [rdi + 96]
	WORD $0x578b; BYTE $0x64     // mov    edx, dword [rdi + 100]
	LONG $0x18e2c148             // shl    rdx, 24
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x478b; BYTE $0x68     // mov    eax, dword [rdi + 104]
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	LONG $0x30e3c148             // shl    rbx, 48
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x578b; BYTE $0x6c     // mov    edx, dword [rdi + 108]
	LONG $0x08e2c148             // shl    rdx, 8
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x4f8b; BYTE $0x70     // mov    ecx, dword [rdi + 112]
	LONG $0x20e1c148             // shl    rcx, 32
	WORD $0x478b; BYTE $0x74     // mov    eax, dword [rdi + 116]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x38e6c148             // shl    rsi, 56
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	LONG $0x08e8c148             // shr    rax, 8
	WORD $0x4f8b; BYTE $0x78     // mov    ecx, dword [rdi + 120]
	LONG $0x10e1c148             // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x7c     // mov    eax, dword [rdi + 124]
	LONG $0x28e0c148             // shl    rax, 40
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	LONG $0x004d8949             // mov    qword [r13], rcx
	LONG $0x0875894d             // mov    qword [r13 + 8], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	LONG $0x104d8949             // mov    qword [r13 + 16], rcx
	LONG $0x185d894d             // mov    qword [r13 + 24], r11
	LONG $0x2065894d             // mov    qword [r13 + 32], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x287d894d             // mov    qword [r13 + 40], r15
	LONG $0x3055894d             // mov    qword [r13 + 48], r10
	LONG $0x3845894d             // mov    qword [r13 + 56], r8
	LONG $0x404d894d             // mov    qword [r13 + 64], r9
	LONG $0x485d8949             // mov    qword [r13 + 72], rbx
	LONG $0x50758949             // mov    qword [r13 + 80], rsi
	LONG $0x58458949             // mov    qword [r13 + 88], rax
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x60c58349             // add    r13, 96
	JMP  LBB0_83

LBB0_68:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x08e0c148         // shl    rax, 8
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x0ce2c148         // shl    rdx, 12
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x10e0c148         // shl    rax, 16
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x14e1c148         // shl    rcx, 20
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x18e0c148         // shl    rax, 24
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	LONG $0x1ce1c148         // shl    rcx, 28
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x20e2c148         // shl    rdx, 32
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x778b; BYTE $0x24 // mov    esi, dword [rdi + 36]
	LONG $0x24e6c148         // shl    rsi, 36
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	LONG $0x28e1c148         // shl    rcx, 40
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x2c // mov    eax, dword [rdi + 44]
	LONG $0x2ce0c148         // shl    rax, 44
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x30e2c148         // shl    rdx, 48
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x34 // mov    eax, dword [rdi + 52]
	LONG $0x34e0c148         // shl    rax, 52
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x38e2c148         // shl    rdx, 56
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x3c // mov    eax, dword [rdi + 60]
	LONG $0x3ce0c148         // shl    rax, 60
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x04e2c148         // shl    rdx, 4
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x778b; BYTE $0x4c // mov    esi, dword [rdi + 76]
	LONG $0x0ce6c148         // shl    rsi, 12
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	LONG $0x14e2c148         // shl    rdx, 20
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x5f8b; BYTE $0x58 // mov    ebx, dword [rdi + 88]
	LONG $0x18e3c148         // shl    rbx, 24
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x1ce1c148         // shl    rcx, 28
	WORD $0x578b; BYTE $0x60 // mov    edx, dword [rdi + 96]
	LONG $0x20e2c148         // shl    rdx, 32
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x778b; BYTE $0x64 // mov    esi, dword [rdi + 100]
	LONG $0x24e6c148         // shl    rsi, 36
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x68 // mov    ecx, dword [rdi + 104]
	LONG $0x28e1c148         // shl    rcx, 40
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	WORD $0x578b; BYTE $0x6c // mov    edx, dword [rdi + 108]
	LONG $0x2ce2c148         // shl    rdx, 44
	WORD $0x778b; BYTE $0x70 // mov    esi, dword [rdi + 112]
	LONG $0x30e6c148         // shl    rsi, 48
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x74 // mov    edx, dword [rdi + 116]
	LONG $0x34e2c148         // shl    rdx, 52
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x778b; BYTE $0x78 // mov    esi, dword [rdi + 120]
	LONG $0x38e6c148         // shl    rsi, 56
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x7c // mov    edx, dword [rdi + 124]
	LONG $0x3ce2c148         // shl    rdx, 60
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x08558949         // mov    qword [r13 + 8], rdx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x10c58349         // add    r13, 16
	JMP  LBB0_83

LBB0_76:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x14e1c148             // shl    rcx, 20
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	LONG $0x28e0c148             // shl    rax, 40
	WORD $0x578b; BYTE $0x0c     // mov    edx, dword [rdi + 12]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x3ce0c149             // shl    r8, 60
	WORD $0x0949; BYTE $0xc0     // or    r8, rax
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	LONG $0x04eac148             // shr    rdx, 4
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x24e1c148             // shl    rcx, 36
	WORD $0x578b; BYTE $0x18     // mov    edx, dword [rdi + 24]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x38e1c149             // shl    r9, 56
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x1c     // mov    eax, dword [rdi + 28]
	LONG $0x0ce0c148             // shl    rax, 12
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x20     // mov    ecx, dword [rdi + 32]
	LONG $0x20e1c148             // shl    rcx, 32
	WORD $0x578b; BYTE $0x24     // mov    edx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x34e3c149             // shl    r11, 52
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x0ceac148             // shr    rdx, 12
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x1ce1c148             // shl    rcx, 28
	WORD $0x578b; BYTE $0x30     // mov    edx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x30e2c149             // shl    r10, 48
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	LONG $0x10eac148             // shr    rdx, 16
	WORD $0x478b; BYTE $0x34     // mov    eax, dword [rdi + 52]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x38     // mov    ecx, dword [rdi + 56]
	LONG $0x18e1c148             // shl    rcx, 24
	LONG $0x3c778b44             // mov    r14d, dword [rdi + 60]
	LONG $0x2ce6c149             // shl    r14, 44
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	WORD $0x4f8b; BYTE $0x44     // mov    ecx, dword [rdi + 68]
	LONG $0x14e1c148             // shl    rcx, 20
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x48     // mov    eax, dword [rdi + 72]
	LONG $0x28e0c148             // shl    rax, 40
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x3ce7c149             // shl    r15, 60
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	LONG $0x04eac148             // shr    rdx, 4
	WORD $0x478b; BYTE $0x50     // mov    eax, dword [rdi + 80]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x54     // mov    ecx, dword [rdi + 84]
	LONG $0x24e1c148             // shl    rcx, 36
	WORD $0x578b; BYTE $0x58     // mov    edx, dword [rdi + 88]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x38e4c149             // shl    r12, 56
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	LONG $0x0ce1c148             // shl    rcx, 12
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x60     // mov    edx, dword [rdi + 96]
	LONG $0x20e2c148             // shl    rdx, 32
	WORD $0x478b; BYTE $0x64     // mov    eax, dword [rdi + 100]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x34e6c148             // shl    rsi, 52
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x4f8b; BYTE $0x68     // mov    ecx, dword [rdi + 104]
	LONG $0x08e1c148             // shl    rcx, 8
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x6c     // mov    eax, dword [rdi + 108]
	LONG $0x1ce0c148             // shl    rax, 28
	WORD $0x5f8b; BYTE $0x70     // mov    ebx, dword [rdi + 112]
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x30e2c148             // shl    rdx, 48
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x10ebc148             // shr    rbx, 16
	WORD $0x478b; BYTE $0x74     // mov    eax, dword [rdi + 116]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x4f8b; BYTE $0x78     // mov    ecx, dword [rdi + 120]
	LONG $0x18e1c148             // shl    rcx, 24
	WORD $0x5f8b; BYTE $0x7c     // mov    ebx, dword [rdi + 124]
	LONG $0x2ce3c148             // shl    rbx, 44
	WORD $0x0948; BYTE $0xcb     // or    rbx, rcx
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	LONG $0x0045894d             // mov    qword [r13], r8
	LONG $0x084d894d             // mov    qword [r13 + 8], r9
	LONG $0x105d894d             // mov    qword [r13 + 16], r11
	LONG $0x1855894d             // mov    qword [r13 + 24], r10
	LONG $0x2075894d             // mov    qword [r13 + 32], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x287d894d             // mov    qword [r13 + 40], r15
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x38758949             // mov    qword [r13 + 56], rsi
	LONG $0x40558949             // mov    qword [r13 + 64], rdx
	LONG $0x485d8949             // mov    qword [r13 + 72], rbx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x50c58349             // add    r13, 80
	JMP  LBB0_83

LBB0_72:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0ce1c148         // shl    rcx, 12
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x18e0c148         // shl    rax, 24
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x24e2c148         // shl    rdx, 36
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x30e0c148         // shl    rax, 48
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	LONG $0x3ce0c149         // shl    r8, 60
	WORD $0x0949; BYTE $0xc0 // or    r8, rax
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x04e9c148         // shr    rcx, 4
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x08e0c148         // shl    rax, 8
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	LONG $0x14e1c148         // shl    rcx, 20
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x20e2c148         // shl    rdx, 32
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x24 // mov    eax, dword [rdi + 36]
	LONG $0x2ce0c148         // shl    rax, 44
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	LONG $0x38e1c149         // shl    r9, 56
	WORD $0x0949; BYTE $0xc1 // or    r9, rax
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x08e9c148         // shr    rcx, 8
	WORD $0x478b; BYTE $0x2c // mov    eax, dword [rdi + 44]
	LONG $0x04e0c148         // shl    rax, 4
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x1ce2c148         // shl    rdx, 28
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x28e1c148         // shl    rcx, 40
	LONG $0x3c578b44         // mov    r10d, dword [rdi + 60]
	LONG $0x34e2c149         // shl    r10, 52
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x0ce2c148         // shl    rdx, 12
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x778b; BYTE $0x4c // mov    esi, dword [rdi + 76]
	LONG $0x24e6c148         // shl    rsi, 36
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	WORD $0x8948; BYTE $0xd3 // mov    rbx, rdx
	LONG $0x3ce3c148         // shl    rbx, 60
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	LONG $0x04eac148         // shr    rdx, 4
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x14e2c148         // shl    rdx, 20
	WORD $0x778b; BYTE $0x60 // mov    esi, dword [rdi + 96]
	LONG $0x20e6c148         // shl    rsi, 32
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x578b; BYTE $0x64 // mov    edx, dword [rdi + 100]
	LONG $0x2ce2c148         // shl    rdx, 44
	WORD $0x4f8b; BYTE $0x68 // mov    ecx, dword [rdi + 104]
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	LONG $0x38e0c148         // shl    rax, 56
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	LONG $0x08e9c148         // shr    rcx, 8
	WORD $0x578b; BYTE $0x6c // mov    edx, dword [rdi + 108]
	LONG $0x04e2c148         // shl    rdx, 4
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x778b; BYTE $0x74 // mov    esi, dword [rdi + 116]
	LONG $0x1ce6c148         // shl    rsi, 28
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	LONG $0x28e1c148         // shl    rcx, 40
	WORD $0x578b; BYTE $0x7c // mov    edx, dword [rdi + 124]
	LONG $0x34e2c148         // shl    rdx, 52
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x185d8949         // mov    qword [r13 + 24], rbx
	LONG $0x20458949         // mov    qword [r13 + 32], rax
	LONG $0x28558949         // mov    qword [r13 + 40], rdx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x30c58349         // add    r13, 48
	JMP  LBB0_83

LBB0_80:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1ce1c148             // shl    rcx, 28
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x38e2c148             // shl    rdx, 56
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x08e8c148             // shr    rax, 8
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x14e1c148             // shl    rcx, 20
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x30e2c148             // shl    rdx, 48
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x10e8c148             // shr    rax, 16
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x0ce1c148             // shl    rcx, 12
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x28e2c148             // shl    rdx, 40
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x18e8c148             // shr    rax, 24
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x04e1c148             // shl    rcx, 4
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x578b; BYTE $0x24     // mov    edx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x3ce2c149             // shl    r10, 60
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	LONG $0x04eac148             // shr    rdx, 4
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	LONG $0x34e6c149             // shl    r14, 52
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x0ce9c148             // shr    rcx, 12
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	LONG $0x2ce3c149             // shl    r11, 44
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x14e9c148             // shr    rcx, 20
	WORD $0x478b; BYTE $0x38     // mov    eax, dword [rdi + 56]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x3c678b44             // mov    r12d, dword [rdi + 60]
	LONG $0x24e4c149             // shl    r12, 36
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	WORD $0x478b; BYTE $0x40     // mov    eax, dword [rdi + 64]
	WORD $0x4f8b; BYTE $0x44     // mov    ecx, dword [rdi + 68]
	LONG $0x1ce1c148             // shl    rcx, 28
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x578b; BYTE $0x48     // mov    edx, dword [rdi + 72]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x38e7c149             // shl    r15, 56
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x4f8b; BYTE $0x4c     // mov    ecx, dword [rdi + 76]
	LONG $0x14e1c148             // shl    rcx, 20
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x50     // mov    edx, dword [rdi + 80]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x30e1c149             // shl    r9, 48
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	LONG $0x10eac148             // shr    rdx, 16
	WORD $0x4f8b; BYTE $0x54     // mov    ecx, dword [rdi + 84]
	LONG $0x0ce1c148             // shl    rcx, 12
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x5f8b; BYTE $0x58     // mov    ebx, dword [rdi + 88]
	WORD $0x8949; BYTE $0xd8     // mov    r8, rbx
	LONG $0x28e0c149             // shl    r8, 40
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	LONG $0x18ebc148             // shr    rbx, 24
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	LONG $0x04e1c148             // shl    rcx, 4
	WORD $0x0948; BYTE $0xd9     // or    rcx, rbx
	WORD $0x478b; BYTE $0x60     // mov    eax, dword [rdi + 96]
	LONG $0x20e0c148             // shl    rax, 32
	WORD $0x5f8b; BYTE $0x64     // mov    ebx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x3ce2c148             // shl    rdx, 60
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x04ebc148             // shr    rbx, 4
	WORD $0x478b; BYTE $0x68     // mov    eax, dword [rdi + 104]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x6c     // mov    ebx, dword [rdi + 108]
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0x34e6c148             // shl    rsi, 52
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	LONG $0x0cebc148             // shr    rbx, 12
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x74     // mov    ebx, dword [rdi + 116]
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	LONG $0x2ce1c148             // shl    rcx, 44
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x14ebc148             // shr    rbx, 20
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x5f8b; BYTE $0x7c     // mov    ebx, dword [rdi + 124]
	LONG $0x24e3c148             // shl    rbx, 36
	WORD $0x0948; BYTE $0xc3     // or    rbx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08458949             // mov    qword [r13 + 8], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x10458949             // mov    qword [r13 + 16], rax
	LONG $0x1855894d             // mov    qword [r13 + 24], r10
	LONG $0x2075894d             // mov    qword [r13 + 32], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x285d894d             // mov    qword [r13 + 40], r11
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x387d894d             // mov    qword [r13 + 56], r15
	LONG $0x404d894d             // mov    qword [r13 + 64], r9
	LONG $0x4845894d             // mov    qword [r13 + 72], r8
	LONG $0x50558949             // mov    qword [r13 + 80], rdx
	LONG $0x58758949             // mov    qword [r13 + 88], rsi
	LONG $0x604d8949             // mov    qword [r13 + 96], rcx
	LONG $0x685d8949             // mov    qword [r13 + 104], rbx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x70c58349             // add    r13, 112
	JMP  LBB0_83

LBB0_67:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x02e1c148         // shl    rcx, 2
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x04e0c148         // shl    rax, 4
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x06e2c148         // shl    rdx, 6
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x08e0c148         // shl    rax, 8
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x0ae1c148         // shl    rcx, 10
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x0ce6c148         // shl    rsi, 12
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x0ee0c148         // shl    rax, 14
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x12e2c148         // shl    rdx, 18
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x14e0c148         // shl    rax, 20
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x16e1c148         // shl    rcx, 22
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x18e2c148         // shl    rdx, 24
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x34 // mov    ecx, dword [rdi + 52]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x38 // mov    edx, dword [rdi + 56]
	LONG $0x1ce2c148         // shl    rdx, 28
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x1ee1c148         // shl    rcx, 30
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x40 // mov    eax, dword [rdi + 64]
	LONG $0x20e0c148         // shl    rax, 32
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x22e2c148         // shl    rdx, 34
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x48 // mov    eax, dword [rdi + 72]
	LONG $0x24e0c148         // shl    rax, 36
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x26e2c148         // shl    rdx, 38
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x28e6c148         // shl    rsi, 40
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x54 // mov    eax, dword [rdi + 84]
	LONG $0x2ae0c148         // shl    rax, 42
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	LONG $0x2ce1c148         // shl    rcx, 44
	WORD $0x578b; BYTE $0x5c // mov    edx, dword [rdi + 92]
	LONG $0x2ee2c148         // shl    rdx, 46
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x64 // mov    edx, dword [rdi + 100]
	LONG $0x32e2c148         // shl    rdx, 50
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x68 // mov    ecx, dword [rdi + 104]
	LONG $0x34e1c148         // shl    rcx, 52
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x6c // mov    edx, dword [rdi + 108]
	LONG $0x36e2c148         // shl    rdx, 54
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	LONG $0x38e1c148         // shl    rcx, 56
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	LONG $0x3ae0c148         // shl    rax, 58
	WORD $0x578b; BYTE $0x78 // mov    edx, dword [rdi + 120]
	LONG $0x3ce2c148         // shl    rdx, 60
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x3ee0c148         // shl    rax, 62
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x08c58349         // add    r13, 8
	JMP  LBB0_83

LBB0_75:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x12e1c148         // shl    rcx, 18
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x24e0c148         // shl    rax, 36
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	WORD $0x8949; BYTE $0xd1 // mov    r9, rdx
	LONG $0x36e1c149         // shl    r9, 54
	WORD $0x0949; BYTE $0xc1 // or    r9, rax
	WORD $0x0949; BYTE $0xc9 // or    r9, rcx
	LONG $0x0aeac148         // shr    rdx, 10
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x08e0c148         // shl    rax, 8
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x578b; BYTE $0x18 // mov    edx, dword [rdi + 24]
	LONG $0x2ce2c148         // shl    rdx, 44
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x3ee0c149         // shl    r8, 62
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x02e8c148         // shr    rax, 2
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x24 // mov    eax, dword [rdi + 36]
	LONG $0x22e0c148         // shl    rax, 34
	WORD $0x578b; BYTE $0x28 // mov    edx, dword [rdi + 40]
	WORD $0x8949; BYTE $0xd2 // mov    r10, rdx
	LONG $0x34e2c149         // shl    r10, 52
	WORD $0x0949; BYTE $0xc2 // or    r10, rax
	WORD $0x0949; BYTE $0xca // or    r10, rcx
	LONG $0x0ceac148         // shr    rdx, 12
	WORD $0x478b; BYTE $0x2c // mov    eax, dword [rdi + 44]
	LONG $0x06e0c148         // shl    rax, 6
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x18e1c148         // shl    rcx, 24
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x2ae2c148         // shl    rdx, 42
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x38 // mov    eax, dword [rdi + 56]
	WORD $0x8949; BYTE $0xc3 // mov    r11, rax
	LONG $0x3ce3c149         // shl    r11, 60
	WORD $0x0949; BYTE $0xd3 // or    r11, rdx
	LONG $0x04e8c148         // shr    rax, 4
	WORD $0x4f8b; BYTE $0x3c // mov    ecx, dword [rdi + 60]
	LONG $0x0ee1c148         // shl    rcx, 14
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x40 // mov    edx, dword [rdi + 64]
	LONG $0x20e2c148         // shl    rdx, 32
	WORD $0x778b; BYTE $0x44 // mov    esi, dword [rdi + 68]
	WORD $0x8949; BYTE $0xf7 // mov    r15, rsi
	LONG $0x32e7c149         // shl    r15, 50
	WORD $0x0949; BYTE $0xd7 // or    r15, rdx
	WORD $0x0949; BYTE $0xcf // or    r15, rcx
	LONG $0x0eeec148         // shr    rsi, 14
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x16e2c148         // shl    rdx, 22
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x28e6c148         // shl    rsi, 40
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x54 // mov    ecx, dword [rdi + 84]
	WORD $0x8949; BYTE $0xce // mov    r14, rcx
	LONG $0x3ae6c149         // shl    r14, 58
	WORD $0x0949; BYTE $0xf6 // or    r14, rsi
	LONG $0x06e9c148         // shr    rcx, 6
	WORD $0x5f8b; BYTE $0x58 // mov    ebx, dword [rdi + 88]
	LONG $0x0ce3c148         // shl    rbx, 12
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x1ee1c148         // shl    rcx, 30
	WORD $0x778b; BYTE $0x60 // mov    esi, dword [rdi + 96]
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x30e2c148         // shl    rdx, 48
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	LONG $0x10eec148         // shr    rsi, 16
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x02e1c148         // shl    rcx, 2
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x14e6c148         // shl    rsi, 20
	WORD $0x5f8b; BYTE $0x6c // mov    ebx, dword [rdi + 108]
	LONG $0x26e3c148         // shl    rbx, 38
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x70 // mov    ecx, dword [rdi + 112]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x38e6c148         // shl    rsi, 56
	WORD $0x0948; BYTE $0xde // or    rsi, rbx
	LONG $0x08e9c148         // shr    rcx, 8
	WORD $0x5f8b; BYTE $0x74 // mov    ebx, dword [rdi + 116]
	LONG $0x0ae3c148         // shl    rbx, 10
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	LONG $0x1ce1c148         // shl    rcx, 28
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x2ee0c148         // shl    rax, 46
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd8 // or    rax, rbx
	LONG $0x004d894d         // mov    qword [r13], r9
	LONG $0x0845894d         // mov    qword [r13 + 8], r8
	LONG $0x1055894d         // mov    qword [r13 + 16], r10
	LONG $0x185d894d         // mov    qword [r13 + 24], r11
	LONG $0x207d894d         // mov    qword [r13 + 32], r15
	LONG $0x2875894d         // mov    qword [r13 + 40], r14
	LONG $0x24348b44         // mov    r14d, dword [rsp]
	LONG $0x30558949         // mov    qword [r13 + 48], rdx
	LONG $0x38758949         // mov    qword [r13 + 56], rsi
	LONG $0x40458949         // mov    qword [r13 + 64], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x48c58349         // add    r13, 72
	JMP  LBB0_83

LBB0_71:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0ae1c148         // shl    rcx, 10
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x14e0c148         // shl    rax, 20
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x1ee2c148         // shl    rdx, 30
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x28e0c148         // shl    rax, 40
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x32e1c148         // shl    rcx, 50
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	WORD $0x8949; BYTE $0xf0 // mov    r8, rsi
	LONG $0x3ce0c149         // shl    r8, 60
	WORD $0x0949; BYTE $0xc8 // or    r8, rcx
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x04eec148         // shr    rsi, 4
	WORD $0x4f8b; BYTE $0x1c // mov    ecx, dword [rdi + 28]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x20 // mov    edx, dword [rdi + 32]
	LONG $0x10e2c148         // shl    rdx, 16
	WORD $0x778b; BYTE $0x24 // mov    esi, dword [rdi + 36]
	LONG $0x1ae6c148         // shl    rsi, 26
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	LONG $0x24e1c148         // shl    rcx, 36
	WORD $0x578b; BYTE $0x2c // mov    edx, dword [rdi + 44]
	LONG $0x2ee2c148         // shl    rdx, 46
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	LONG $0x38e1c149         // shl    r9, 56
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	WORD $0x0949; BYTE $0xf1 // or    r9, rsi
	LONG $0x08e9c148         // shr    rcx, 8
	WORD $0x578b; BYTE $0x34 // mov    edx, dword [rdi + 52]
	LONG $0x02e2c148         // shl    rdx, 2
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x0ce1c148         // shl    rcx, 12
	WORD $0x778b; BYTE $0x3c // mov    esi, dword [rdi + 60]
	LONG $0x16e6c148         // shl    rsi, 22
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x2ae2c148         // shl    rdx, 42
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x48 // mov    ecx, dword [rdi + 72]
	LONG $0x34e1c148         // shl    rcx, 52
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	LONG $0x3ee6c148         // shl    rsi, 62
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	LONG $0x02eac148         // shr    rdx, 2
	WORD $0x4f8b; BYTE $0x50 // mov    ecx, dword [rdi + 80]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x578b; BYTE $0x54 // mov    edx, dword [rdi + 84]
	LONG $0x12e2c148         // shl    rdx, 18
	WORD $0x478b; BYTE $0x58 // mov    eax, dword [rdi + 88]
	LONG $0x1ce0c148         // shl    rax, 28
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x26e1c148         // shl    rcx, 38
	WORD $0x5f8b; BYTE $0x60 // mov    ebx, dword [rdi + 96]
	LONG $0x30e3c148         // shl    rbx, 48
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	LONG $0x3ae2c148         // shl    rdx, 58
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	LONG $0x06e9c148         // shr    rcx, 6
	WORD $0x478b; BYTE $0x68 // mov    eax, dword [rdi + 104]
	LONG $0x04e0c148         // shl    rax, 4
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x0ee1c148         // shl    rcx, 14
	WORD $0x5f8b; BYTE $0x70 // mov    ebx, dword [rdi + 112]
	LONG $0x18e3c148         // shl    rbx, 24
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xc3 // or    rbx, rax
	WORD $0x478b; BYTE $0x74 // mov    eax, dword [rdi + 116]
	LONG $0x22e0c148         // shl    rax, 34
	WORD $0x4f8b; BYTE $0x78 // mov    ecx, dword [rdi + 120]
	LONG $0x2ce1c148         // shl    rcx, 44
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x7c // mov    eax, dword [rdi + 124]
	LONG $0x36e0c148         // shl    rax, 54
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd8 // or    rax, rbx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x084d894d         // mov    qword [r13 + 8], r9
	LONG $0x10758949         // mov    qword [r13 + 16], rsi
	LONG $0x18558949         // mov    qword [r13 + 24], rdx
	LONG $0x20458949         // mov    qword [r13 + 32], rax
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x28c58349         // add    r13, 40
	JMP  LBB0_83

LBB0_79:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x1ae1c148             // shl    rcx, 26
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x34e2c148             // shl    rdx, 52
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x0ce8c148             // shr    rax, 12
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x0ee1c148             // shl    rcx, 14
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x28e2c148             // shl    rdx, 40
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	LONG $0x18e8c148             // shr    rax, 24
	WORD $0x4f8b; BYTE $0x14     // mov    ecx, dword [rdi + 20]
	LONG $0x02e1c148             // shl    rcx, 2
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x1ce0c148             // shl    rax, 28
	WORD $0x578b; BYTE $0x1c     // mov    edx, dword [rdi + 28]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x36e2c149             // shl    r10, 54
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	LONG $0x0aeac148             // shr    rdx, 10
	WORD $0x478b; BYTE $0x20     // mov    eax, dword [rdi + 32]
	LONG $0x10e0c148             // shl    rax, 16
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x24     // mov    ecx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	LONG $0x2ae3c149             // shl    r11, 42
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x16e9c148             // shr    rcx, 22
	WORD $0x478b; BYTE $0x28     // mov    eax, dword [rdi + 40]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x2c     // mov    ecx, dword [rdi + 44]
	LONG $0x1ee1c148             // shl    rcx, 30
	WORD $0x578b; BYTE $0x30     // mov    edx, dword [rdi + 48]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x38e4c149             // shl    r12, 56
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x34     // mov    eax, dword [rdi + 52]
	LONG $0x12e0c148             // shl    rax, 18
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x38     // mov    ecx, dword [rdi + 56]
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	LONG $0x2ce6c149             // shl    r14, 44
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x14e9c148             // shr    rcx, 20
	WORD $0x578b; BYTE $0x3c     // mov    edx, dword [rdi + 60]
	LONG $0x06e2c148             // shl    rdx, 6
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x40     // mov    ecx, dword [rdi + 64]
	LONG $0x20e1c148             // shl    rcx, 32
	WORD $0x778b; BYTE $0x44     // mov    esi, dword [rdi + 68]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x3ae1c149             // shl    r9, 58
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	WORD $0x0949; BYTE $0xd1     // or    r9, rdx
	LONG $0x06eec148             // shr    rsi, 6
	WORD $0x4f8b; BYTE $0x48     // mov    ecx, dword [rdi + 72]
	LONG $0x14e1c148             // shl    rcx, 20
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x578b; BYTE $0x4c     // mov    edx, dword [rdi + 76]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x2ee7c149             // shl    r15, 46
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	LONG $0x12eac148             // shr    rdx, 18
	WORD $0x4f8b; BYTE $0x50     // mov    ecx, dword [rdi + 80]
	LONG $0x08e1c148             // shl    rcx, 8
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x54     // mov    edx, dword [rdi + 84]
	LONG $0x22e2c148             // shl    rdx, 34
	WORD $0x778b; BYTE $0x58     // mov    esi, dword [rdi + 88]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x3ce3c148             // shl    rbx, 60
	WORD $0x0948; BYTE $0xd3     // or    rbx, rdx
	WORD $0x0948; BYTE $0xcb     // or    rbx, rcx
	LONG $0x04eec148             // shr    rsi, 4
	WORD $0x4f8b; BYTE $0x5c     // mov    ecx, dword [rdi + 92]
	LONG $0x16e1c148             // shl    rcx, 22
	WORD $0x0948; BYTE $0xf1     // or    rcx, rsi
	WORD $0x778b; BYTE $0x60     // mov    esi, dword [rdi + 96]
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi
	LONG $0x30e0c149             // shl    r8, 48
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	LONG $0x10eec148             // shr    rsi, 16
	WORD $0x478b; BYTE $0x64     // mov    eax, dword [rdi + 100]
	LONG $0x0ae0c148             // shl    rax, 10
	WORD $0x0948; BYTE $0xf0     // or    rax, rsi
	WORD $0x778b; BYTE $0x68     // mov    esi, dword [rdi + 104]
	LONG $0x24e6c148             // shl    rsi, 36
	WORD $0x4f8b; BYTE $0x6c     // mov    ecx, dword [rdi + 108]
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x3ee2c148             // shl    rdx, 62
	WORD $0x0948; BYTE $0xf2     // or    rdx, rsi
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	LONG $0x02e9c148             // shr    rcx, 2
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x74     // mov    ecx, dword [rdi + 116]
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	LONG $0x32e6c148             // shl    rsi, 50
	WORD $0x0948; BYTE $0xc6     // or    rsi, rax
	LONG $0x0ee9c148             // shr    rcx, 14
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	LONG $0x0ce0c148             // shl    rax, 12
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x4f8b; BYTE $0x7c     // mov    ecx, dword [rdi + 124]
	LONG $0x26e1c148             // shl    rcx, 38
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08458949             // mov    qword [r13 + 8], rax
	LONG $0x1055894d             // mov    qword [r13 + 16], r10
	LONG $0x185d894d             // mov    qword [r13 + 24], r11
	LONG $0x2065894d             // mov    qword [r13 + 32], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x2875894d             // mov    qword [r13 + 40], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x304d894d             // mov    qword [r13 + 48], r9
	LONG $0x387d894d             // mov    qword [r13 + 56], r15
	LONG $0x405d8949             // mov    qword [r13 + 64], rbx
	LONG $0x4845894d             // mov    qword [r13 + 72], r8
	LONG $0x50558949             // mov    qword [r13 + 80], rdx
	LONG $0x58758949             // mov    qword [r13 + 88], rsi
	LONG $0x604d8949             // mov    qword [r13 + 96], rcx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x68c58349             // add    r13, 104
	JMP  LBB0_83

LBB0_69:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x0ce0c148         // shl    rax, 12
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x12e2c148         // shl    rdx, 18
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	LONG $0x18e0c148         // shl    rax, 24
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x1ee1c148         // shl    rcx, 30
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x778b; BYTE $0x18 // mov    esi, dword [rdi + 24]
	LONG $0x24e6c148         // shl    rsi, 36
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x478b; BYTE $0x1c // mov    eax, dword [rdi + 28]
	LONG $0x2ae0c148         // shl    rax, 42
	WORD $0x4f8b; BYTE $0x20 // mov    ecx, dword [rdi + 32]
	LONG $0x30e1c148         // shl    rcx, 48
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x578b; BYTE $0x24 // mov    edx, dword [rdi + 36]
	LONG $0x36e2c148         // shl    rdx, 54
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x28 // mov    ecx, dword [rdi + 40]
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	LONG $0x3ce0c148         // shl    rax, 60
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	WORD $0x0948; BYTE $0xf0 // or    rax, rsi
	LONG $0x04e9c148         // shr    rcx, 4
	WORD $0x578b; BYTE $0x2c // mov    edx, dword [rdi + 44]
	LONG $0x02e2c148         // shl    rdx, 2
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x30 // mov    ecx, dword [rdi + 48]
	LONG $0x08e1c148         // shl    rcx, 8
	WORD $0x778b; BYTE $0x34 // mov    esi, dword [rdi + 52]
	LONG $0x0ee6c148         // shl    rsi, 14
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x14e1c148         // shl    rcx, 20
	WORD $0x578b; BYTE $0x3c // mov    edx, dword [rdi + 60]
	LONG $0x1ae2c148         // shl    rdx, 26
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x40 // mov    ecx, dword [rdi + 64]
	LONG $0x20e1c148         // shl    rcx, 32
	WORD $0x0948; BYTE $0xd1 // or    rcx, rdx
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x44 // mov    edx, dword [rdi + 68]
	LONG $0x26e2c148         // shl    rdx, 38
	WORD $0x778b; BYTE $0x48 // mov    esi, dword [rdi + 72]
	LONG $0x2ce6c148         // shl    rsi, 44
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x4c // mov    edx, dword [rdi + 76]
	LONG $0x32e2c148         // shl    rdx, 50
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	WORD $0x778b; BYTE $0x50 // mov    esi, dword [rdi + 80]
	LONG $0x38e6c148         // shl    rsi, 56
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x54 // mov    ecx, dword [rdi + 84]
	WORD $0x8948; BYTE $0xca // mov    rdx, rcx
	LONG $0x3ee2c148         // shl    rdx, 62
	WORD $0x0948; BYTE $0xf2 // or    rdx, rsi
	LONG $0x02e9c148         // shr    rcx, 2
	WORD $0x778b; BYTE $0x58 // mov    esi, dword [rdi + 88]
	LONG $0x04e6c148         // shl    rsi, 4
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x5c // mov    ecx, dword [rdi + 92]
	LONG $0x0ae1c148         // shl    rcx, 10
	WORD $0x5f8b; BYTE $0x60 // mov    ebx, dword [rdi + 96]
	LONG $0x10e3c148         // shl    rbx, 16
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x4f8b; BYTE $0x64 // mov    ecx, dword [rdi + 100]
	LONG $0x16e1c148         // shl    rcx, 22
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x1ce6c148         // shl    rsi, 28
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x6c // mov    ecx, dword [rdi + 108]
	LONG $0x22e1c148         // shl    rcx, 34
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	WORD $0x778b; BYTE $0x70 // mov    esi, dword [rdi + 112]
	LONG $0x28e6c148         // shl    rsi, 40
	WORD $0x5f8b; BYTE $0x74 // mov    ebx, dword [rdi + 116]
	LONG $0x2ee3c148         // shl    rbx, 46
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x778b; BYTE $0x78 // mov    esi, dword [rdi + 120]
	LONG $0x34e6c148         // shl    rsi, 52
	WORD $0x0948; BYTE $0xde // or    rsi, rbx
	WORD $0x5f8b; BYTE $0x7c // mov    ebx, dword [rdi + 124]
	LONG $0x3ae3c148         // shl    rbx, 58
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	LONG $0x00458949         // mov    qword [r13], rax
	LONG $0x08558949         // mov    qword [r13 + 8], rdx
	LONG $0x105d8949         // mov    qword [r13 + 16], rbx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x18c58349         // add    r13, 24
	JMP  LBB0_83

LBB0_77:
	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04     // mov    ecx, dword [rdi + 4]
	LONG $0x16e1c148             // shl    rcx, 22
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x08     // mov    eax, dword [rdi + 8]
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2ce2c148             // shl    rdx, 44
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x24548948; BYTE $0x08 // mov    qword [rsp + 8], rdx
	LONG $0x14e8c148             // shr    rax, 20
	WORD $0x4f8b; BYTE $0x0c     // mov    ecx, dword [rdi + 12]
	LONG $0x02e1c148             // shl    rcx, 2
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x10     // mov    eax, dword [rdi + 16]
	LONG $0x18e0c148             // shl    rax, 24
	WORD $0x578b; BYTE $0x14     // mov    edx, dword [rdi + 20]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x2ee1c149             // shl    r9, 46
	WORD $0x0949; BYTE $0xc1     // or    r9, rax
	WORD $0x0949; BYTE $0xc9     // or    r9, rcx
	LONG $0x12eac148             // shr    rdx, 18
	WORD $0x478b; BYTE $0x18     // mov    eax, dword [rdi + 24]
	LONG $0x04e0c148             // shl    rax, 4
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x1c     // mov    ecx, dword [rdi + 28]
	LONG $0x1ae1c148             // shl    rcx, 26
	WORD $0x578b; BYTE $0x20     // mov    edx, dword [rdi + 32]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x30e3c149             // shl    r11, 48
	WORD $0x0949; BYTE $0xcb     // or    r11, rcx
	WORD $0x0949; BYTE $0xc3     // or    r11, rax
	LONG $0x10eac148             // shr    rdx, 16
	WORD $0x478b; BYTE $0x24     // mov    eax, dword [rdi + 36]
	LONG $0x06e0c148             // shl    rax, 6
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x28     // mov    ecx, dword [rdi + 40]
	LONG $0x1ce1c148             // shl    rcx, 28
	WORD $0x578b; BYTE $0x2c     // mov    edx, dword [rdi + 44]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	LONG $0x32e6c149             // shl    r14, 50
	WORD $0x0949; BYTE $0xce     // or    r14, rcx
	WORD $0x0949; BYTE $0xc6     // or    r14, rax
	LONG $0x0eeac148             // shr    rdx, 14
	WORD $0x478b; BYTE $0x30     // mov    eax, dword [rdi + 48]
	LONG $0x08e0c148             // shl    rax, 8
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x34     // mov    ecx, dword [rdi + 52]
	LONG $0x1ee1c148             // shl    rcx, 30
	WORD $0x578b; BYTE $0x38     // mov    edx, dword [rdi + 56]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x34e2c149             // shl    r10, 52
	WORD $0x0949; BYTE $0xca     // or    r10, rcx
	WORD $0x0949; BYTE $0xc2     // or    r10, rax
	LONG $0x0ceac148             // shr    rdx, 12
	WORD $0x478b; BYTE $0x3c     // mov    eax, dword [rdi + 60]
	LONG $0x0ae0c148             // shl    rax, 10
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x40     // mov    ecx, dword [rdi + 64]
	LONG $0x20e1c148             // shl    rcx, 32
	WORD $0x578b; BYTE $0x44     // mov    edx, dword [rdi + 68]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x36e7c149             // shl    r15, 54
	WORD $0x0949; BYTE $0xcf     // or    r15, rcx
	WORD $0x0949; BYTE $0xc7     // or    r15, rax
	LONG $0x0aeac148             // shr    rdx, 10
	WORD $0x478b; BYTE $0x48     // mov    eax, dword [rdi + 72]
	LONG $0x0ce0c148             // shl    rax, 12
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x4c     // mov    ecx, dword [rdi + 76]
	LONG $0x22e1c148             // shl    rcx, 34
	WORD $0x578b; BYTE $0x50     // mov    edx, dword [rdi + 80]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x38e4c149             // shl    r12, 56
	WORD $0x0949; BYTE $0xcc     // or    r12, rcx
	WORD $0x0949; BYTE $0xc4     // or    r12, rax
	LONG $0x08eac148             // shr    rdx, 8
	WORD $0x478b; BYTE $0x54     // mov    eax, dword [rdi + 84]
	LONG $0x0ee0c148             // shl    rax, 14
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x4f8b; BYTE $0x58     // mov    ecx, dword [rdi + 88]
	LONG $0x24e1c148             // shl    rcx, 36
	WORD $0x578b; BYTE $0x5c     // mov    edx, dword [rdi + 92]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x3ae0c149             // shl    r8, 58
	WORD $0x0949; BYTE $0xc8     // or    r8, rcx
	WORD $0x0949; BYTE $0xc0     // or    r8, rax
	LONG $0x06eac148             // shr    rdx, 6
	WORD $0x4f8b; BYTE $0x60     // mov    ecx, dword [rdi + 96]
	LONG $0x10e1c148             // shl    rcx, 16
	WORD $0x0948; BYTE $0xd1     // or    rcx, rdx
	WORD $0x578b; BYTE $0x64     // mov    edx, dword [rdi + 100]
	LONG $0x26e2c148             // shl    rdx, 38
	WORD $0x478b; BYTE $0x68     // mov    eax, dword [rdi + 104]
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x3ce6c148             // shl    rsi, 60
	WORD $0x0948; BYTE $0xd6     // or    rsi, rdx
	WORD $0x0948; BYTE $0xce     // or    rsi, rcx
	LONG $0x04e8c148             // shr    rax, 4
	WORD $0x4f8b; BYTE $0x6c     // mov    ecx, dword [rdi + 108]
	LONG $0x12e1c148             // shl    rcx, 18
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	WORD $0x478b; BYTE $0x70     // mov    eax, dword [rdi + 112]
	LONG $0x28e0c148             // shl    rax, 40
	WORD $0x5f8b; BYTE $0x74     // mov    ebx, dword [rdi + 116]
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x3ee2c148             // shl    rdx, 62
	WORD $0x0948; BYTE $0xc2     // or    rdx, rax
	WORD $0x0948; BYTE $0xca     // or    rdx, rcx
	LONG $0x02ebc148             // shr    rbx, 2
	WORD $0x478b; BYTE $0x78     // mov    eax, dword [rdi + 120]
	LONG $0x14e0c148             // shl    rax, 20
	WORD $0x0948; BYTE $0xd8     // or    rax, rbx
	WORD $0x4f8b; BYTE $0x7c     // mov    ecx, dword [rdi + 124]
	LONG $0x2ae1c148             // shl    rcx, 42
	WORD $0x0948; BYTE $0xc1     // or    rcx, rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x00458949             // mov    qword [r13], rax
	LONG $0x084d894d             // mov    qword [r13 + 8], r9
	LONG $0x105d894d             // mov    qword [r13 + 16], r11
	LONG $0x1875894d             // mov    qword [r13 + 24], r14
	LONG $0x24348b44             // mov    r14d, dword [rsp]
	LONG $0x2055894d             // mov    qword [r13 + 32], r10
	LONG $0x287d894d             // mov    qword [r13 + 40], r15
	LONG $0x3065894d             // mov    qword [r13 + 48], r12
	LONG $0x24648b44; BYTE $0x04 // mov    r12d, dword [rsp + 4]
	LONG $0x3845894d             // mov    qword [r13 + 56], r8
	LONG $0x40758949             // mov    qword [r13 + 64], rsi
	LONG $0x48558949             // mov    qword [r13 + 72], rdx
	LONG $0x504d8949             // mov    qword [r13 + 80], rcx
	LONG $0x80ef8348             // sub    rdi, -128
	LONG $0x58c58349             // add    r13, 88
	JMP  LBB0_83

LBB0_73:
	WORD $0x078b             // mov    eax, dword [rdi]
	WORD $0x4f8b; BYTE $0x04 // mov    ecx, dword [rdi + 4]
	LONG $0x0ee1c148         // shl    rcx, 14
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x08 // mov    eax, dword [rdi + 8]
	LONG $0x1ce0c148         // shl    rax, 28
	WORD $0x578b; BYTE $0x0c // mov    edx, dword [rdi + 12]
	LONG $0x2ae2c148         // shl    rdx, 42
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x10 // mov    eax, dword [rdi + 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x38e0c149         // shl    r8, 56
	WORD $0x0949; BYTE $0xd0 // or    r8, rdx
	LONG $0x08e8c148         // shr    rax, 8
	WORD $0x4f8b; BYTE $0x14 // mov    ecx, dword [rdi + 20]
	LONG $0x06e1c148         // shl    rcx, 6
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x18 // mov    eax, dword [rdi + 24]
	LONG $0x14e0c148         // shl    rax, 20
	WORD $0x578b; BYTE $0x1c // mov    edx, dword [rdi + 28]
	LONG $0x22e2c148         // shl    rdx, 34
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x478b; BYTE $0x20 // mov    eax, dword [rdi + 32]
	LONG $0x30e0c148         // shl    rax, 48
	WORD $0x4f8b; BYTE $0x24 // mov    ecx, dword [rdi + 36]
	WORD $0x8949; BYTE $0xca // mov    r10, rcx
	LONG $0x3ee2c149         // shl    r10, 62
	WORD $0x0949; BYTE $0xc2 // or    r10, rax
	WORD $0x0949; BYTE $0xd2 // or    r10, rdx
	LONG $0x02e9c148         // shr    rcx, 2
	WORD $0x478b; BYTE $0x28 // mov    eax, dword [rdi + 40]
	LONG $0x0ce0c148         // shl    rax, 12
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x4f8b; BYTE $0x2c // mov    ecx, dword [rdi + 44]
	LONG $0x1ae1c148         // shl    rcx, 26
	WORD $0x578b; BYTE $0x30 // mov    edx, dword [rdi + 48]
	LONG $0x28e2c148         // shl    rdx, 40
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x478b; BYTE $0x34 // mov    eax, dword [rdi + 52]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x36e1c149         // shl    r9, 54
	WORD $0x0949; BYTE $0xd1 // or    r9, rdx
	LONG $0x0ae8c148         // shr    rax, 10
	WORD $0x4f8b; BYTE $0x38 // mov    ecx, dword [rdi + 56]
	LONG $0x04e1c148         // shl    rcx, 4
	WORD $0x0948; BYTE $0xc1 // or    rcx, rax
	WORD $0x478b; BYTE $0x3c // mov    eax, dword [rdi + 60]
	LONG $0x12e0c148         // shl    rax, 18
	WORD $0x578b; BYTE $0x40 // mov    edx, dword [rdi + 64]
	LONG $0x20e2c148         // shl    rdx, 32
	WORD $0x0948; BYTE $0xc2 // or    rdx, rax
	WORD $0x0948; BYTE $0xca // or    rdx, rcx
	WORD $0x4f8b; BYTE $0x44 // mov    ecx, dword [rdi + 68]
	LONG $0x2ee1c148         // shl    rcx, 46
	WORD $0x778b; BYTE $0x48 // mov    esi, dword [rdi + 72]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x3ce0c148         // shl    rax, 60
	WORD $0x0948; BYTE $0xc8 // or    rax, rcx
	WORD $0x0948; BYTE $0xd0 // or    rax, rdx
	LONG $0x04eec148         // shr    rsi, 4
	WORD $0x4f8b; BYTE $0x4c // mov    ecx, dword [rdi + 76]
	LONG $0x0ae1c148         // shl    rcx, 10
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x578b; BYTE $0x50 // mov    edx, dword [rdi + 80]
	LONG $0x18e2c148         // shl    rdx, 24
	WORD $0x778b; BYTE $0x54 // mov    esi, dword [rdi + 84]
	LONG $0x26e6c148         // shl    rsi, 38
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x58 // mov    ecx, dword [rdi + 88]
	WORD $0x8949; BYTE $0xcb // mov    r11, rcx
	LONG $0x34e3c149         // shl    r11, 52
	WORD $0x0949; BYTE $0xf3 // or    r11, rsi
	LONG $0x0ce9c148         // shr    rcx, 12
	WORD $0x778b; BYTE $0x5c // mov    esi, dword [rdi + 92]
	LONG $0x02e6c148         // shl    rsi, 2
	WORD $0x0948; BYTE $0xce // or    rsi, rcx
	WORD $0x4f8b; BYTE $0x60 // mov    ecx, dword [rdi + 96]
	LONG $0x10e1c148         // shl    rcx, 16
	WORD $0x5f8b; BYTE $0x64 // mov    ebx, dword [rdi + 100]
	LONG $0x1ee3c148         // shl    rbx, 30
	WORD $0x0948; BYTE $0xcb // or    rbx, rcx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x778b; BYTE $0x68 // mov    esi, dword [rdi + 104]
	LONG $0x2ce6c148         // shl    rsi, 44
	WORD $0x578b; BYTE $0x6c // mov    edx, dword [rdi + 108]
	WORD $0x8948; BYTE $0xd1 // mov    rcx, rdx
	LONG $0x3ae1c148         // shl    rcx, 58
	WORD $0x0948; BYTE $0xf1 // or    rcx, rsi
	WORD $0x0948; BYTE $0xd9 // or    rcx, rbx
	LONG $0x06eac148         // shr    rdx, 6
	WORD $0x778b; BYTE $0x70 // mov    esi, dword [rdi + 112]
	LONG $0x08e6c148         // shl    rsi, 8
	WORD $0x0948; BYTE $0xd6 // or    rsi, rdx
	WORD $0x578b; BYTE $0x74 // mov    edx, dword [rdi + 116]
	LONG $0x16e2c148         // shl    rdx, 22
	WORD $0x5f8b; BYTE $0x78 // mov    ebx, dword [rdi + 120]
	LONG $0x24e3c148         // shl    rbx, 36
	WORD $0x0948; BYTE $0xd3 // or    rbx, rdx
	WORD $0x0948; BYTE $0xf3 // or    rbx, rsi
	WORD $0x578b; BYTE $0x7c // mov    edx, dword [rdi + 124]
	LONG $0x32e2c148         // shl    rdx, 50
	WORD $0x0948; BYTE $0xda // or    rdx, rbx
	LONG $0x0045894d         // mov    qword [r13], r8
	LONG $0x0855894d         // mov    qword [r13 + 8], r10
	LONG $0x104d894d         // mov    qword [r13 + 16], r9
	LONG $0x18458949         // mov    qword [r13 + 24], rax
	LONG $0x205d894d         // mov    qword [r13 + 32], r11
	LONG $0x284d8949         // mov    qword [r13 + 40], rcx
	LONG $0x30558949         // mov    qword [r13 + 48], rdx
	LONG $0x80ef8348         // sub    rdi, -128
	LONG $0x38c58349         // add    r13, 56
	JMP  LBB0_83

LBB0_84:
	SUBQ $8, SP
	RET

TEXT Â·_turbounpack32(SB), $112-32

	MOVQ in+0(FP), DI
	MOVQ number+8(FP), SI
	MOVQ bit+16(FP), DX
	MOVQ out+24(FP), CX
	ADDQ $8, SP

	LONG $0x54247489         // mov    dword [rsp + 84], esi
	WORD $0xf685             // test    esi, esi
	JE   LBB1_86
	WORD $0x8941; BYTE $0xd5 // mov    r13d, edx
	WORD $0x8949; BYTE $0xff // mov    r15, rdi
	QUAD $0x000000003c2444c7 // mov    dword [rsp + 60], 0
	WORD $0x570f; BYTE $0xc0 // xorps    xmm0, xmm0
	LONG $0x1c245489         // mov    dword [rsp + 28], edx

LBB1_2:
	LONG $0x0ffd8341             // cmp    r13d, 15
	JLE  LBB1_10
	LONG $0x17fd8341             // cmp    r13d, 23
	JLE  LBB1_16
	LONG $0x1bfd8341             // cmp    r13d, 27
	JLE  LBB1_26
	LONG $0x1dfd8341             // cmp    r13d, 29
	JLE  LBB1_42
	LONG $0x1efd8341             // cmp    r13d, 30
	JE   LBB1_66
	LONG $0x1ffd8341             // cmp    r13d, 31
	JE   LBB1_67
	LONG $0x20fd8341             // cmp    r13d, 32
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07     // mov    rax, qword [r15]
	LONG $0x08578b49             // mov    rdx, qword [r15 + 8]
	LONG $0x10778b49             // mov    rsi, qword [r15 + 16]
	LONG $0x187f8b49             // mov    rdi, qword [r15 + 24]
	LONG $0x20478b4d             // mov    r8, qword [r15 + 32]
	LONG $0x284f8b4d             // mov    r9, qword [r15 + 40]
	LONG $0x30578b4d             // mov    r10, qword [r15 + 48]
	LONG $0x385f8b4d             // mov    r11, qword [r15 + 56]
	LONG $0x406f8b4d             // mov    r13, qword [r15 + 64]
	LONG $0x48678b4d             // mov    r12, qword [r15 + 72]
	LONG $0x505f8b49             // mov    rbx, qword [r15 + 80]
	LONG $0x245c8948; BYTE $0x40 // mov    qword [rsp + 64], rbx
	LONG $0x585f8b49             // mov    rbx, qword [r15 + 88]
	LONG $0x245c8948; BYTE $0x48 // mov    qword [rsp + 72], rbx
	LONG $0x605f8b49             // mov    rbx, qword [r15 + 96]
	LONG $0x245c8948; BYTE $0x30 // mov    qword [rsp + 48], rbx
	LONG $0x685f8b49             // mov    rbx, qword [r15 + 104]
	LONG $0x245c8948; BYTE $0x28 // mov    qword [rsp + 40], rbx
	LONG $0x705f8b49             // mov    rbx, qword [r15 + 112]
	LONG $0x245c8948; BYTE $0x20 // mov    qword [rsp + 32], rbx
	LONG $0x78778b4d             // mov    r14, qword [r15 + 120]
	LONG $0x2474894c; BYTE $0x10 // mov    qword [rsp + 16], r14
	WORD $0x0189                 // mov    dword [rcx], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x04     // mov    dword [rcx + 4], eax
	WORD $0x5189; BYTE $0x08     // mov    dword [rcx + 8], edx
	LONG $0x20eac148             // shr    rdx, 32
	WORD $0x5189; BYTE $0x0c     // mov    dword [rcx + 12], edx
	WORD $0x7189; BYTE $0x10     // mov    dword [rcx + 16], esi
	LONG $0x20eec148             // shr    rsi, 32
	WORD $0x7189; BYTE $0x14     // mov    dword [rcx + 20], esi
	WORD $0x7989; BYTE $0x18     // mov    dword [rcx + 24], edi
	LONG $0x20efc148             // shr    rdi, 32
	WORD $0x7989; BYTE $0x1c     // mov    dword [rcx + 28], edi
	LONG $0x20418944             // mov    dword [rcx + 32], r8d
	LONG $0x20e8c149             // shr    r8, 32
	LONG $0x24418944             // mov    dword [rcx + 36], r8d
	LONG $0x28498944             // mov    dword [rcx + 40], r9d
	LONG $0x20e9c149             // shr    r9, 32
	LONG $0x2c498944             // mov    dword [rcx + 44], r9d
	LONG $0x30518944             // mov    dword [rcx + 48], r10d
	LONG $0x20eac149             // shr    r10, 32
	LONG $0x34518944             // mov    dword [rcx + 52], r10d
	LONG $0x38598944             // mov    dword [rcx + 56], r11d
	LONG $0x20ebc149             // shr    r11, 32
	LONG $0x3c598944             // mov    dword [rcx + 60], r11d
	LONG $0x40698944             // mov    dword [rcx + 64], r13d
	LONG $0x20edc149             // shr    r13, 32
	LONG $0x44698944             // mov    dword [rcx + 68], r13d
	LONG $0x246c8b44; BYTE $0x1c // mov    r13d, dword [rsp + 28]
	LONG $0x48618944             // mov    dword [rcx + 72], r12d
	LONG $0x20ecc149             // shr    r12, 32
	LONG $0x4c618944             // mov    dword [rcx + 76], r12d
	LONG $0x24448b48; BYTE $0x40 // mov    rax, qword [rsp + 64]
	WORD $0x4189; BYTE $0x50     // mov    dword [rcx + 80], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x54     // mov    dword [rcx + 84], eax
	LONG $0x24448b48; BYTE $0x48 // mov    rax, qword [rsp + 72]
	WORD $0x4189; BYTE $0x58     // mov    dword [rcx + 88], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x5c     // mov    dword [rcx + 92], eax
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0x4189; BYTE $0x60     // mov    dword [rcx + 96], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x64     // mov    dword [rcx + 100], eax
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	WORD $0x4189; BYTE $0x68     // mov    dword [rcx + 104], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x6c     // mov    dword [rcx + 108], eax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0x4189; BYTE $0x70     // mov    dword [rcx + 112], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x74     // mov    dword [rcx + 116], eax
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	WORD $0x4189; BYTE $0x78     // mov    dword [rcx + 120], eax
	LONG $0x20e8c148             // shr    rax, 32
	WORD $0x4189; BYTE $0x7c     // mov    dword [rcx + 124], eax
	LONG $0x80ef8349             // sub    r15, -128
	JMP  LBB1_84

LBB1_10:
	LONG $0x07fd8341         // cmp    r13d, 7
	JG   LBB1_21
	LONG $0x03fd8341         // cmp    r13d, 3
	JG   LBB1_30
	LONG $0x01fd8341         // cmp    r13d, 1
	JG   LBB1_45
	WORD $0x8545; BYTE $0xed // test    r13d, r13d
	JE   LBB1_68
	LONG $0x01fd8341         // cmp    r13d, 1
	JNE  LBB1_85
	WORD $0x8b41; BYTE $0x07 // mov    eax, dword [r15]
	LONG $0x04c78349         // add    r15, 4
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x1189             // mov    dword [rcx], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xead1             // shr    edx, 1
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x04 // mov    dword [rcx + 4], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x02 // shr    edx, 2
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x08 // mov    dword [rcx + 8], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x03 // shr    edx, 3
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x0c // mov    dword [rcx + 12], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x04 // shr    edx, 4
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x10 // mov    dword [rcx + 16], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x05 // shr    edx, 5
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x14 // mov    dword [rcx + 20], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x06 // shr    edx, 6
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x18 // mov    dword [rcx + 24], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x07 // shr    edx, 7
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x1c // mov    dword [rcx + 28], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x08 // shr    edx, 8
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x20 // mov    dword [rcx + 32], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x09 // shr    edx, 9
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x24 // mov    dword [rcx + 36], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0a // shr    edx, 10
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x28 // mov    dword [rcx + 40], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0b // shr    edx, 11
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x2c // mov    dword [rcx + 44], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c // shr    edx, 12
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x30 // mov    dword [rcx + 48], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0d // shr    edx, 13
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x34 // mov    dword [rcx + 52], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0e // shr    edx, 14
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x38 // mov    dword [rcx + 56], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0f // shr    edx, 15
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x3c // mov    dword [rcx + 60], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x10 // shr    edx, 16
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x40 // mov    dword [rcx + 64], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x11 // shr    edx, 17
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x44 // mov    dword [rcx + 68], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x12 // shr    edx, 18
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x48 // mov    dword [rcx + 72], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x13 // shr    edx, 19
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x4c // mov    dword [rcx + 76], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x14 // shr    edx, 20
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x50 // mov    dword [rcx + 80], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x15 // shr    edx, 21
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x54 // mov    dword [rcx + 84], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x16 // shr    edx, 22
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x58 // mov    dword [rcx + 88], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x17 // shr    edx, 23
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x5c // mov    dword [rcx + 92], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x18 // shr    edx, 24
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x60 // mov    dword [rcx + 96], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x19 // shr    edx, 25
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x64 // mov    dword [rcx + 100], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1a // shr    edx, 26
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x68 // mov    dword [rcx + 104], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1b // shr    edx, 27
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x6c // mov    dword [rcx + 108], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1c // shr    edx, 28
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x70 // mov    dword [rcx + 112], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1d // shr    edx, 29
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x74 // mov    dword [rcx + 116], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1e // shr    edx, 30
	WORD $0xe283; BYTE $0x01 // and    edx, 1
	WORD $0x5189; BYTE $0x78 // mov    dword [rcx + 120], edx
	WORD $0xe8c1; BYTE $0x1f // shr    eax, 31
	WORD $0x4189; BYTE $0x7c // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_16:
	LONG $0x13fd8341                           // cmp    r13d, 19
	JG   LBB1_34
	LONG $0x11fd8341                           // cmp    r13d, 17
	JG   LBB1_48
	LONG $0x10fd8341                           // cmp    r13d, 16
	JE   LBB1_69
	LONG $0x11fd8341                           // cmp    r13d, 17
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x3f                   // mov    rdi, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x10578b49                           // mov    rdx, qword [r15 + 16]
	LONG $0x185f8b49                           // mov    rbx, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28778b4d                           // mov    r14, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x38578b4d                           // mov    r10, qword [r15 + 56]
	LONG $0x40478b4d                           // mov    r8, qword [r15 + 64]
	LONG $0x44c78349                           // add    r15, 68
	WORD $0xf889                               // mov    eax, edi
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x0189                               // mov    dword [rcx], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x11e8c148                           // shr    rax, 17
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xf8a40f48; BYTE $0x0d               // shld    rax, rdi, 13
	LONG $0x22efc148                           // shr    rdi, 34
	LONG $0xffffe781; WORD $0x0001             // and    edi, 131071
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x0c                   // mov    dword [rcx + 12], eax
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x15e8c148                           // shr    rax, 21
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xf7a40f48; BYTE $0x09               // shld    rdi, rsi, 9
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	LONG $0x26eec148                           // shr    rsi, 38
	LONG $0xffffe681; WORD $0x0001             // and    esi, 131071
	WORD $0x7189; BYTE $0x18                   // mov    dword [rcx + 24], esi
	LONG $0xffffe781; WORD $0x0001             // and    edi, 131071
	WORD $0x7989; BYTE $0x1c                   // mov    dword [rcx + 28], edi
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x19e8c148                           // shr    rax, 25
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0xd0a40f48; BYTE $0x05               // shld    rax, rdx, 5
	LONG $0x2aeac148                           // shr    rdx, 42
	LONG $0xffffe281; WORD $0x0001             // and    edx, 131071
	WORD $0x5189; BYTE $0x28                   // mov    dword [rcx + 40], edx
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x1de8c148                           // shr    rax, 29
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xd8a40f48; BYTE $0x01               // shld    rax, rbx, 1
	LONG $0x2eebc148                           // shr    rbx, 46
	LONG $0xffffe381; WORD $0x0001             // and    ebx, 131071
	WORD $0x5989; BYTE $0x38                   // mov    dword [rcx + 56], ebx
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	LONG $0xcaa40f4c; BYTE $0x0e               // shld    rdx, r9, 14
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	LONG $0x21e9c149                           // shr    r9, 33
	LONG $0xffe18141; WORD $0x01ff; BYTE $0x00 // and    r9d, 131071
	LONG $0x44498944                           // mov    dword [rcx + 68], r9d
	LONG $0xffffe281; WORD $0x0001             // and    edx, 131071
	WORD $0x5189; BYTE $0x48                   // mov    dword [rcx + 72], edx
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8c1; BYTE $0x03                   // shr    eax, 3
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xf0a40f4c; BYTE $0x0a               // shld    rax, r14, 10
	LONG $0x25eec149                           // shr    r14, 37
	LONG $0xffe68141; WORD $0x01ff; BYTE $0x00 // and    r14d, 131071
	LONG $0x54718944                           // mov    dword [rcx + 84], r14d
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x07                   // shr    eax, 7
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f4c; BYTE $0x06               // shld    rax, r11, 6
	LONG $0x29ebc149                           // shr    r11, 41
	LONG $0xffe38141; WORD $0x01ff; BYTE $0x00 // and    r11d, 131071
	LONG $0x64598944                           // mov    dword [rcx + 100], r11d
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x0b                   // shr    eax, 11
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f4c; BYTE $0x02               // shld    rax, r10, 2
	LONG $0x2deac149                           // shr    r10, 45
	LONG $0xffe28141; WORD $0x01ff; BYTE $0x00 // and    r10d, 131071
	LONG $0x74518944                           // mov    dword [rcx + 116], r10d
	LONG $0x01ffff25; BYTE $0x00               // and    eax, 131071
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x0fe8c141                           // shr    r8d, 15
	JMP  LBB1_83

LBB1_21:
	LONG $0x0bfd8341               // cmp    r13d, 11
	JG   LBB1_38
	LONG $0x09fd8341               // cmp    r13d, 9
	JG   LBB1_51
	LONG $0x08fd8341               // cmp    r13d, 8
	JE   LBB1_70
	LONG $0x09fd8341               // cmp    r13d, 9
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x17       // mov    rdx, qword [r15]
	LONG $0x08778b49               // mov    rsi, qword [r15 + 8]
	LONG $0x105f8b49               // mov    rbx, qword [r15 + 16]
	LONG $0x18478b49               // mov    rax, qword [r15 + 24]
	LONG $0x20478b4d               // mov    r8, qword [r15 + 32]
	LONG $0x24c78349               // add    r15, 36
	WORD $0xd789                   // mov    edi, edx
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x3989                   // mov    dword [rcx], edi
	WORD $0xd789                   // mov    edi, edx
	WORD $0xefc1; BYTE $0x09       // shr    edi, 9
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x04       // mov    dword [rcx + 4], edi
	WORD $0xd789                   // mov    edi, edx
	WORD $0xefc1; BYTE $0x12       // shr    edi, 18
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x08       // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xd7       // mov    rdi, rdx
	LONG $0x1befc148               // shr    rdi, 27
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x0c       // mov    dword [rcx + 12], edi
	WORD $0x8948; BYTE $0xd7       // mov    rdi, rdx
	LONG $0x24efc148               // shr    rdi, 36
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x10       // mov    dword [rcx + 16], edi
	WORD $0x8948; BYTE $0xd7       // mov    rdi, rdx
	LONG $0x2defc148               // shr    rdi, 45
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x14       // mov    dword [rcx + 20], edi
	WORD $0x8948; BYTE $0xf7       // mov    rdi, rsi
	LONG $0xd7a40f48; BYTE $0x01   // shld    rdi, rdx, 1
	LONG $0x36eac148               // shr    rdx, 54
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x18       // mov    dword [rcx + 24], edx
	LONG $0x01ffe781; WORD $0x0000 // and    edi, 511
	WORD $0x7989; BYTE $0x1c       // mov    dword [rcx + 28], edi
	WORD $0xf289                   // mov    edx, esi
	WORD $0xeac1; BYTE $0x08       // shr    edx, 8
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x20       // mov    dword [rcx + 32], edx
	WORD $0xf289                   // mov    edx, esi
	WORD $0xeac1; BYTE $0x11       // shr    edx, 17
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x24       // mov    dword [rcx + 36], edx
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	LONG $0x1aeac148               // shr    rdx, 26
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x28       // mov    dword [rcx + 40], edx
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	LONG $0x23eac148               // shr    rdx, 35
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x2c       // mov    dword [rcx + 44], edx
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	LONG $0x2ceac148               // shr    rdx, 44
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x30       // mov    dword [rcx + 48], edx
	WORD $0x8948; BYTE $0xda       // mov    rdx, rbx
	LONG $0xf2a40f48; BYTE $0x02   // shld    rdx, rsi, 2
	LONG $0x35eec148               // shr    rsi, 53
	LONG $0x01ffe681; WORD $0x0000 // and    esi, 511
	WORD $0x7189; BYTE $0x34       // mov    dword [rcx + 52], esi
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x38       // mov    dword [rcx + 56], edx
	WORD $0xda89                   // mov    edx, ebx
	WORD $0xeac1; BYTE $0x07       // shr    edx, 7
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x3c       // mov    dword [rcx + 60], edx
	WORD $0xda89                   // mov    edx, ebx
	WORD $0xeac1; BYTE $0x10       // shr    edx, 16
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x40       // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xda       // mov    rdx, rbx
	LONG $0x19eac148               // shr    rdx, 25
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x44       // mov    dword [rcx + 68], edx
	WORD $0x8948; BYTE $0xda       // mov    rdx, rbx
	LONG $0x22eac148               // shr    rdx, 34
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x48       // mov    dword [rcx + 72], edx
	WORD $0x8948; BYTE $0xda       // mov    rdx, rbx
	LONG $0x2beac148               // shr    rdx, 43
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x4c       // mov    dword [rcx + 76], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0xdaa40f48; BYTE $0x03   // shld    rdx, rbx, 3
	LONG $0x34ebc148               // shr    rbx, 52
	LONG $0x01ffe381; WORD $0x0000 // and    ebx, 511
	WORD $0x5989; BYTE $0x50       // mov    dword [rcx + 80], ebx
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x54       // mov    dword [rcx + 84], edx
	WORD $0xc289                   // mov    edx, eax
	WORD $0xeac1; BYTE $0x06       // shr    edx, 6
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x58       // mov    dword [rcx + 88], edx
	WORD $0xc289                   // mov    edx, eax
	WORD $0xeac1; BYTE $0x0f       // shr    edx, 15
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x5c       // mov    dword [rcx + 92], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0x18eac148               // shr    rdx, 24
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x60       // mov    dword [rcx + 96], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0x21eac148               // shr    rdx, 33
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x64       // mov    dword [rcx + 100], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0x2aeac148               // shr    rdx, 42
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x68       // mov    dword [rcx + 104], edx
	WORD $0x894c; BYTE $0xc2       // mov    rdx, r8
	LONG $0xc2a40f48; BYTE $0x04   // shld    rdx, rax, 4
	LONG $0x33e8c148               // shr    rax, 51
	LONG $0x0001ff25; BYTE $0x00   // and    eax, 511
	WORD $0x4189; BYTE $0x6c       // mov    dword [rcx + 108], eax
	LONG $0x01ffe281; WORD $0x0000 // and    edx, 511
	WORD $0x5189; BYTE $0x70       // mov    dword [rcx + 112], edx
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x05       // shr    eax, 5
	LONG $0x0001ff25; BYTE $0x00   // and    eax, 511
	WORD $0x4189; BYTE $0x74       // mov    dword [rcx + 116], eax
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x0e       // shr    eax, 14
	LONG $0x0001ff25; BYTE $0x00   // and    eax, 511
	WORD $0x4189; BYTE $0x78       // mov    dword [rcx + 120], eax
	LONG $0x17e8c141               // shr    r8d, 23
	JMP  LBB1_83

LBB1_26:
	LONG $0x19fd8341                           // cmp    r13d, 25
	JG   LBB1_54
	LONG $0x18fd8341                           // cmp    r13d, 24
	JE   LBB1_71
	LONG $0x19fd8341                           // cmp    r13d, 25
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x085f8b49                           // mov    rbx, qword [r15 + 8]
	LONG $0x107f8b49                           // mov    rdi, qword [r15 + 16]
	LONG $0x18478b4d                           // mov    r8, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x286f8b4d                           // mov    r13, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x38678b4d                           // mov    r12, qword [r15 + 56]
	LONG $0x247c894c; BYTE $0x08               // mov    qword [rsp + 8], r15
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x407a8b4c                           // mov    r15, qword [rdx + 64]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x48528b48                           // mov    rdx, qword [rdx + 72]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x50728b4c                           // mov    r14, qword [rdx + 80]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x58528b48                           // mov    rdx, qword [rdx + 88]
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	LONG $0x24748b48; BYTE $0x08               // mov    rsi, qword [rsp + 8]
	LONG $0x60568b4c                           // mov    r10, qword [rsi + 96]
	LONG $0x2454894c; BYTE $0x10               // mov    qword [rsp + 16], r10
	WORD $0x1189                               // mov    dword [rcx], edx
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0xc2a40f48; BYTE $0x0e               // shld    rdx, rax, 14
	LONG $0x19e8c148                           // shr    rax, 25
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x0be8c148                           // shr    rax, 11
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x0c                   // mov    dword [rcx + 12], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xd8a40f48; BYTE $0x03               // shld    rax, rbx, 3
	LONG $0x24ebc148                           // shr    rbx, 36
	LONG $0xffffe381; WORD $0x01ff             // and    ebx, 33554431
	WORD $0x5989; BYTE $0x10                   // mov    dword [rcx + 16], ebx
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x894c; BYTE $0xc2                   // mov    rdx, r8
	LONG $0xfaa40f48; BYTE $0x11               // shld    rdx, rdi, 17
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	LONG $0x16efc148                           // shr    rdi, 22
	LONG $0xffffe781; WORD $0x01ff             // and    edi, 33554431
	WORD $0x7989; BYTE $0x18                   // mov    dword [rcx + 24], edi
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	WORD $0x5189; BYTE $0x1c                   // mov    dword [rcx + 28], edx
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x08e8c148                           // shr    rax, 8
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x06               // shld    rax, r8, 6
	LONG $0x21e8c149                           // shr    r8, 33
	LONG $0xffe08141; WORD $0xffff; BYTE $0x01 // and    r8d, 33554431
	LONG $0x24418944                           // mov    dword [rcx + 36], r8d
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0xc8a40f4c; BYTE $0x14               // shld    rax, r9, 20
	LONG $0x13e9c149                           // shr    r9, 19
	LONG $0xffe18141; WORD $0xffff; BYTE $0x01 // and    r9d, 33554431
	LONG $0x2c498944                           // mov    dword [rcx + 44], r9d
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x8944; BYTE $0xe8                   // mov    eax, r13d
	WORD $0xe8c1; BYTE $0x05                   // shr    eax, 5
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xe8a40f4c; BYTE $0x09               // shld    rax, r13, 9
	LONG $0x1eedc149                           // shr    r13, 30
	LONG $0xffe58141; WORD $0xffff; BYTE $0x01 // and    r13d, 33554431
	LONG $0x38698944                           // mov    dword [rcx + 56], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xd8a40f4c; BYTE $0x17               // shld    rax, r11, 23
	LONG $0x10ebc149                           // shr    r11, 16
	LONG $0xffe38141; WORD $0xffff; BYTE $0x01 // and    r11d, 33554431
	LONG $0x40598944                           // mov    dword [rcx + 64], r11d
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x8944; BYTE $0xe0                   // mov    eax, r12d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x894c; BYTE $0xfa                   // mov    rdx, r15
	LONG $0xe2a40f4c; BYTE $0x0c               // shld    rdx, r12, 12
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	LONG $0x1becc149                           // shr    r12, 27
	LONG $0xffe48141; WORD $0xffff; BYTE $0x01 // and    r12d, 33554431
	LONG $0x4c618944                           // mov    dword [rcx + 76], r12d
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	WORD $0x5189; BYTE $0x50                   // mov    dword [rcx + 80], edx
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0x0de8c148                           // shr    rax, 13
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf8a40f4c; BYTE $0x01               // shld    rax, r15, 1
	LONG $0x26efc149                           // shr    r15, 38
	LONG $0xffe78141; WORD $0xffff; BYTE $0x01 // and    r15d, 33554431
	LONG $0x58798944                           // mov    dword [rcx + 88], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xd0a40f48; BYTE $0x0f               // shld    rax, rdx, 15
	LONG $0x18eac148                           // shr    rdx, 24
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	WORD $0x5189; BYTE $0x60                   // mov    dword [rcx + 96], edx
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x0ae8c148                           // shr    rax, 10
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f4c; BYTE $0x04               // shld    rax, r14, 4
	LONG $0x23eec149                           // shr    r14, 35
	LONG $0xffe68141; WORD $0xffff; BYTE $0x01 // and    r14d, 33554431
	LONG $0x6c718944                           // mov    dword [rcx + 108], r14d
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd0a40f48; BYTE $0x12               // shld    rax, rdx, 18
	LONG $0x15eac148                           // shr    rdx, 21
	LONG $0xffffe281; WORD $0x01ff             // and    edx, 33554431
	WORD $0x5189; BYTE $0x74                   // mov    dword [rcx + 116], edx
	LONG $0xffffff25; BYTE $0x01               // and    eax, 33554431
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	WORD $0xe8c1; BYTE $0x07                   // shr    eax, 7
	WORD $0x4189; BYTE $0x7c                   // mov    dword [rcx + 124], eax
	LONG $0x64c78349                           // add    r15, 100
	JMP  LBB1_84

LBB1_30:
	LONG $0x05fd8341             // cmp    r13d, 5
	JG   LBB1_57
	LONG $0x04fd8341             // cmp    r13d, 4
	JE   LBB1_72
	LONG $0x05fd8341             // cmp    r13d, 5
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x17     // mov    rdx, qword [r15]
	LONG $0x085f8b49             // mov    rbx, qword [r15 + 8]
	LONG $0x10478b49             // mov    rax, qword [r15 + 16]
	WORD $0xd689                 // mov    esi, edx
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x3189                 // mov    dword [rcx], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x05     // shr    esi, 5
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x04     // mov    dword [rcx + 4], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x0a     // shr    esi, 10
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x08     // mov    dword [rcx + 8], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x0f     // shr    esi, 15
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x0c     // mov    dword [rcx + 12], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x14     // shr    esi, 20
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x10     // mov    dword [rcx + 16], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x19     // shr    esi, 25
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x14     // mov    dword [rcx + 20], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x1eeec148             // shr    rsi, 30
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x18     // mov    dword [rcx + 24], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x23eec148             // shr    rsi, 35
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x1c     // mov    dword [rcx + 28], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x28eec148             // shr    rsi, 40
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x20     // mov    dword [rcx + 32], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x2deec148             // shr    rsi, 45
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x24     // mov    dword [rcx + 36], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x32eec148             // shr    rsi, 50
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x28     // mov    dword [rcx + 40], esi
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xd6a40f48; BYTE $0x04 // shld    rsi, rdx, 4
	LONG $0x14c78349             // add    r15, 20
	LONG $0x37eac148             // shr    rdx, 55
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x2c     // mov    dword [rcx + 44], edx
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x30     // mov    dword [rcx + 48], esi
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xead1                 // shr    edx, 1
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x34     // mov    dword [rcx + 52], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x06     // shr    edx, 6
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x38     // mov    dword [rcx + 56], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x0b     // shr    edx, 11
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x3c     // mov    dword [rcx + 60], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x10     // shr    edx, 16
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x40     // mov    dword [rcx + 64], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x15     // shr    edx, 21
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x44     // mov    dword [rcx + 68], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x1a     // shr    edx, 26
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x48     // mov    dword [rcx + 72], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x1feac148             // shr    rdx, 31
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x4c     // mov    dword [rcx + 76], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x24eac148             // shr    rdx, 36
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x50     // mov    dword [rcx + 80], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x29eac148             // shr    rdx, 41
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x54     // mov    dword [rcx + 84], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x2eeac148             // shr    rdx, 46
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x58     // mov    dword [rcx + 88], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x33eac148             // shr    rdx, 51
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0xdea40f48; BYTE $0x03 // shld    rsi, rbx, 3
	WORD $0x5189; BYTE $0x5c     // mov    dword [rcx + 92], edx
	LONG $0x38ebc148             // shr    rbx, 56
	WORD $0xe383; BYTE $0x1f     // and    ebx, 31
	WORD $0x5989; BYTE $0x60     // mov    dword [rcx + 96], ebx
	WORD $0xe683; BYTE $0x1f     // and    esi, 31
	WORD $0x7189; BYTE $0x64     // mov    dword [rcx + 100], esi
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x02     // shr    edx, 2
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x68     // mov    dword [rcx + 104], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x07     // shr    edx, 7
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x6c     // mov    dword [rcx + 108], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c     // shr    edx, 12
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x70     // mov    dword [rcx + 112], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x11     // shr    edx, 17
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x74     // mov    dword [rcx + 116], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x16     // shr    edx, 22
	WORD $0xe283; BYTE $0x1f     // and    edx, 31
	WORD $0x5189; BYTE $0x78     // mov    dword [rcx + 120], edx
	WORD $0xe8c1; BYTE $0x1b     // shr    eax, 27
	WORD $0x4189; BYTE $0x7c     // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_34:
	LONG $0x15fd8341                           // cmp    r13d, 21
	JG   LBB1_60
	LONG $0x14fd8341                           // cmp    r13d, 20
	JE   LBB1_73
	LONG $0x15fd8341                           // cmp    r13d, 21
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x1f                   // mov    rbx, qword [r15]
	LONG $0x08578b49                           // mov    rdx, qword [r15 + 8]
	LONG $0x10778b49                           // mov    rsi, qword [r15 + 16]
	LONG $0x186f8b4d                           // mov    r13, qword [r15 + 24]
	LONG $0x20678b4d                           // mov    r12, qword [r15 + 32]
	LONG $0x284f8b4d                           // mov    r9, qword [r15 + 40]
	WORD $0x894d; BYTE $0xf8                   // mov    r8, r15
	LONG $0x307f8b4d                           // mov    r15, qword [r15 + 48]
	LONG $0x38708b4d                           // mov    r14, qword [r8 + 56]
	LONG $0x40588b4d                           // mov    r11, qword [r8 + 64]
	LONG $0x48508b4d                           // mov    r10, qword [r8 + 72]
	LONG $0x50408b49                           // mov    rax, qword [r8 + 80]
	LONG $0x24448948; BYTE $0x10               // mov    qword [rsp + 16], rax
	WORD $0xd889                               // mov    eax, ebx
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x0189                               // mov    dword [rcx], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x15e8c148                           // shr    rax, 21
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xdfa40f48; BYTE $0x01               // shld    rdi, rbx, 1
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0x2aebc148                           // shr    rbx, 42
	LONG $0xffffe381; WORD $0x001f             // and    ebx, 2097151
	WORD $0x5989; BYTE $0x08                   // mov    dword [rcx + 8], ebx
	LONG $0xffffe781; WORD $0x001f             // and    edi, 2097151
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd0a40f48; BYTE $0x02               // shld    rax, rdx, 2
	LONG $0x29eac148                           // shr    rdx, 41
	LONG $0xffffe281; WORD $0x001f             // and    edx, 2097151
	WORD $0x5189; BYTE $0x14                   // mov    dword [rcx + 20], edx
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x13e8c148                           // shr    rax, 19
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	LONG $0xf2a40f48; BYTE $0x03               // shld    rdx, rsi, 3
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	LONG $0x28eec148                           // shr    rsi, 40
	LONG $0xffffe681; WORD $0x001f             // and    esi, 2097151
	WORD $0x7189; BYTE $0x20                   // mov    dword [rcx + 32], esi
	LONG $0xffffe281; WORD $0x001f             // and    edx, 2097151
	WORD $0x5189; BYTE $0x24                   // mov    dword [rcx + 36], edx
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0x12e8c148                           // shr    rax, 18
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xe8a40f4c; BYTE $0x04               // shld    rax, r13, 4
	LONG $0x27edc149                           // shr    r13, 39
	LONG $0xffe58141; WORD $0x1fff; BYTE $0x00 // and    r13d, 2097151
	LONG $0x2c698944                           // mov    dword [rcx + 44], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0x11e8c148                           // shr    rax, 17
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xe2a40f4c; BYTE $0x05               // shld    rdx, r12, 5
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	LONG $0x26ecc149                           // shr    r12, 38
	LONG $0xffe48141; WORD $0x1fff; BYTE $0x00 // and    r12d, 2097151
	LONG $0x38618944                           // mov    dword [rcx + 56], r12d
	LONG $0xffffe281; WORD $0x001f             // and    edx, 2097151
	WORD $0x5189; BYTE $0x3c                   // mov    dword [rcx + 60], edx
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xc8a40f4c; BYTE $0x06               // shld    rax, r9, 6
	LONG $0x25e9c149                           // shr    r9, 37
	LONG $0xffe18141; WORD $0x1fff; BYTE $0x00 // and    r9d, 2097151
	LONG $0x44498944                           // mov    dword [rcx + 68], r9d
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0x0fe8c148                           // shr    rax, 15
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	LONG $0xfaa40f4c; BYTE $0x07               // shld    rdx, r15, 7
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	LONG $0x24efc149                           // shr    r15, 36
	LONG $0xffe78141; WORD $0x1fff; BYTE $0x00 // and    r15d, 2097151
	LONG $0x50798944                           // mov    dword [rcx + 80], r15d
	WORD $0x894d; BYTE $0xc7                   // mov    r15, r8
	LONG $0xffffe281; WORD $0x001f             // and    edx, 2097151
	WORD $0x5189; BYTE $0x54                   // mov    dword [rcx + 84], edx
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x0ee8c148                           // shr    rax, 14
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xf0a40f4c; BYTE $0x08               // shld    rax, r14, 8
	LONG $0x23eec149                           // shr    r14, 35
	LONG $0xffe68141; WORD $0x1fff; BYTE $0x00 // and    r14d, 2097151
	LONG $0x5c718944                           // mov    dword [rcx + 92], r14d
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x0de8c148                           // shr    rax, 13
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xdaa40f4c; BYTE $0x09               // shld    rdx, r11, 9
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	LONG $0x22ebc149                           // shr    r11, 34
	LONG $0xffe38141; WORD $0x1fff; BYTE $0x00 // and    r11d, 2097151
	LONG $0x68598944                           // mov    dword [rcx + 104], r11d
	LONG $0xffffe281; WORD $0x001f             // and    edx, 2097151
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x0ce8c148                           // shr    rax, 12
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xd0a40f4c; BYTE $0x0a               // shld    rax, r10, 10
	LONG $0x21eac149                           // shr    r10, 33
	LONG $0xffe28141; WORD $0x1fff; BYTE $0x00 // and    r10d, 2097151
	LONG $0x74518944                           // mov    dword [rcx + 116], r10d
	LONG $0x1fffff25; BYTE $0x00               // and    eax, 2097151
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	WORD $0xe8c1; BYTE $0x0b                   // shr    eax, 11
	WORD $0x4189; BYTE $0x7c                   // mov    dword [rcx + 124], eax
	LONG $0x54c78349                           // add    r15, 84
	JMP  LBB1_84

LBB1_38:
	LONG $0x0dfd8341                           // cmp    r13d, 13
	JG   LBB1_63
	LONG $0x0cfd8341                           // cmp    r13d, 12
	JE   LBB1_74
	LONG $0x0dfd8341                           // cmp    r13d, 13
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08578b49                           // mov    rdx, qword [r15 + 8]
	LONG $0x10778b49                           // mov    rsi, qword [r15 + 16]
	LONG $0x185f8b4d                           // mov    r11, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x30478b4d                           // mov    r8, qword [r15 + 48]
	WORD $0xc389                               // mov    ebx, eax
	LONG $0x1fffe381; WORD $0x0000             // and    ebx, 8191
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0xc389                               // mov    ebx, eax
	WORD $0xebc1; BYTE $0x0d                   // shr    ebx, 13
	LONG $0x1fffe381; WORD $0x0000             // and    ebx, 8191
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x1aefc148                           // shr    rdi, 26
	LONG $0x1fffe781; WORD $0x0000             // and    edi, 8191
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xc7a40f48; BYTE $0x0c               // shld    rdi, rax, 12
	LONG $0x34c78349                           // add    r15, 52
	LONG $0x27e8c148                           // shr    rax, 39
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x0c                   // mov    dword [rcx + 12], eax
	LONG $0x1fffe781; WORD $0x0000             // and    edi, 8191
	WORD $0x7989; BYTE $0x10                   // mov    dword [rcx + 16], edi
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8d1                               // shr    eax, 1
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x0e                   // shr    eax, 14
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x1be8c148                           // shr    rax, 27
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0xd7a40f48; BYTE $0x0b               // shld    rdi, rdx, 11
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	LONG $0x28eac148                           // shr    rdx, 40
	LONG $0x1fffe281; WORD $0x0000             // and    edx, 8191
	WORD $0x5189; BYTE $0x20                   // mov    dword [rcx + 32], edx
	LONG $0x1fffe781; WORD $0x0000             // and    edi, 8191
	WORD $0x7989; BYTE $0x24                   // mov    dword [rcx + 36], edi
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x0f                   // shr    eax, 15
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0xf2a40f48; BYTE $0x0a               // shld    rdx, rsi, 10
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	LONG $0x29eec148                           // shr    rsi, 41
	LONG $0x1fffe681; WORD $0x0000             // and    esi, 8191
	WORD $0x7189; BYTE $0x34                   // mov    dword [rcx + 52], esi
	LONG $0x1fffe281; WORD $0x0000             // and    edx, 8191
	WORD $0x5189; BYTE $0x38                   // mov    dword [rcx + 56], edx
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x03                   // shr    eax, 3
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x1de8c148                           // shr    rax, 29
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xdaa40f4c; BYTE $0x09               // shld    rdx, r11, 9
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	LONG $0x2aebc149                           // shr    r11, 42
	LONG $0xffe38141; WORD $0x001f; BYTE $0x00 // and    r11d, 8191
	LONG $0x48598944                           // mov    dword [rcx + 72], r11d
	LONG $0x1fffe281; WORD $0x0000             // and    edx, 8191
	WORD $0x5189; BYTE $0x4c                   // mov    dword [rcx + 76], edx
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x11                   // shr    eax, 17
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x1ee8c148                           // shr    rax, 30
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xcaa40f4c; BYTE $0x08               // shld    rdx, r9, 8
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x2be9c149                           // shr    r9, 43
	LONG $0xffe18141; WORD $0x001f; BYTE $0x00 // and    r9d, 8191
	LONG $0x5c498944                           // mov    dword [rcx + 92], r9d
	LONG $0x1fffe281; WORD $0x0000             // and    edx, 8191
	WORD $0x5189; BYTE $0x60                   // mov    dword [rcx + 96], edx
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x05                   // shr    eax, 5
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x12                   // shr    eax, 18
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x1fe8c148                           // shr    rax, 31
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x894c; BYTE $0xc2                   // mov    rdx, r8
	LONG $0xd2a40f4c; BYTE $0x07               // shld    rdx, r10, 7
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	LONG $0x2ceac149                           // shr    r10, 44
	LONG $0xffe28141; WORD $0x001f; BYTE $0x00 // and    r10d, 8191
	LONG $0x70518944                           // mov    dword [rcx + 112], r10d
	LONG $0x1fffe281; WORD $0x0000             // and    edx, 8191
	WORD $0x5189; BYTE $0x74                   // mov    dword [rcx + 116], edx
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x001fff25; BYTE $0x00               // and    eax, 8191
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x13e8c141                           // shr    r8d, 19
	JMP  LBB1_83

LBB1_42:
	LONG $0x1cfd8341                           // cmp    r13d, 28
	LONG $0x247c894c; BYTE $0x08               // mov    qword [rsp + 8], r15
	JE   LBB1_75
	LONG $0x1dfd8341                           // cmp    r13d, 29
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x105f8b49                           // mov    rbx, qword [r15 + 16]
	LONG $0x18478b4d                           // mov    r8, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x38678b4d                           // mov    r12, qword [r15 + 56]
	LONG $0x40578b49                           // mov    rdx, qword [r15 + 64]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x486f8b4d                           // mov    r13, qword [r15 + 72]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x507a8b4c                           // mov    r15, qword [rdx + 80]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x58528b48                           // mov    rdx, qword [rdx + 88]
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	LONG $0x24748b4c; BYTE $0x08               // mov    r14, qword [rsp + 8]
	LONG $0x607e8b49                           // mov    rdi, qword [r14 + 96]
	LONG $0x247c8948; BYTE $0x10               // mov    qword [rsp + 16], rdi
	LONG $0x247c8b48; BYTE $0x08               // mov    rdi, qword [rsp + 8]
	LONG $0x68778b4c                           // mov    r14, qword [rdi + 104]
	LONG $0x247c8b48; BYTE $0x08               // mov    rdi, qword [rsp + 8]
	LONG $0x707f8b48                           // mov    rdi, qword [rdi + 112]
	WORD $0x1189                               // mov    dword [rcx], edx
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xc2a40f48; BYTE $0x06               // shld    rdx, rax, 6
	LONG $0x1de8c148                           // shr    rax, 29
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0xf0a40f48; BYTE $0x0c               // shld    rax, rsi, 12
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	LONG $0x17eec148                           // shr    rsi, 23
	LONG $0xffffe681; WORD $0x1fff             // and    esi, 536870911
	WORD $0x7189; BYTE $0x0c                   // mov    dword [rcx + 12], esi
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd8a40f48; BYTE $0x12               // shld    rax, rbx, 18
	LONG $0x11ebc148                           // shr    rbx, 17
	LONG $0xffffe381; WORD $0x1fff             // and    ebx, 536870911
	WORD $0x5989; BYTE $0x14                   // mov    dword [rcx + 20], ebx
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x18               // shld    rax, r8, 24
	LONG $0x0be8c149                           // shr    r8, 11
	LONG $0xffe08141; WORD $0xffff; BYTE $0x1f // and    r8d, 536870911
	LONG $0x1c418944                           // mov    dword [rcx + 28], r8d
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x05e8c148                           // shr    rax, 5
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xcaa40f4c; BYTE $0x01               // shld    rdx, r9, 1
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	LONG $0x22e9c149                           // shr    r9, 34
	LONG $0xffe18141; WORD $0xffff; BYTE $0x1f // and    r9d, 536870911
	LONG $0x28498944                           // mov    dword [rcx + 40], r9d
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	WORD $0x5189; BYTE $0x2c                   // mov    dword [rcx + 44], edx
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xd0a40f4c; BYTE $0x07               // shld    rax, r10, 7
	LONG $0x1ceac149                           // shr    r10, 28
	LONG $0xffe28141; WORD $0xffff; BYTE $0x1f // and    r10d, 536870911
	LONG $0x30518944                           // mov    dword [rcx + 48], r10d
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xd8a40f4c; BYTE $0x0d               // shld    rax, r11, 13
	LONG $0x16ebc149                           // shr    r11, 22
	LONG $0xffe38141; WORD $0xffff; BYTE $0x1f // and    r11d, 536870911
	LONG $0x38598944                           // mov    dword [rcx + 56], r11d
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xe0a40f4c; BYTE $0x13               // shld    rax, r12, 19
	LONG $0x10ecc149                           // shr    r12, 16
	LONG $0xffe48141; WORD $0xffff; BYTE $0x1f // and    r12d, 536870911
	LONG $0x40618944                           // mov    dword [rcx + 64], r12d
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	LONG $0xf2a40f48; BYTE $0x19               // shld    rdx, rsi, 25
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	LONG $0x0aeec148                           // shr    rsi, 10
	LONG $0xffffe681; WORD $0x1fff             // and    esi, 536870911
	WORD $0x7189; BYTE $0x48                   // mov    dword [rcx + 72], esi
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	WORD $0x5189; BYTE $0x4c                   // mov    dword [rcx + 76], edx
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0x04e8c148                           // shr    rax, 4
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xe8a40f4c; BYTE $0x02               // shld    rax, r13, 2
	LONG $0x21edc149                           // shr    r13, 33
	LONG $0xffe58141; WORD $0xffff; BYTE $0x1f // and    r13d, 536870911
	LONG $0x54698944                           // mov    dword [rcx + 84], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x24748b48; BYTE $0x20               // mov    rsi, qword [rsp + 32]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xf8a40f4c; BYTE $0x08               // shld    rax, r15, 8
	LONG $0x1befc149                           // shr    r15, 27
	LONG $0xffe78141; WORD $0xffff; BYTE $0x1f // and    r15d, 536870911
	LONG $0x5c798944                           // mov    dword [rcx + 92], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	LONG $0x245c8b48; BYTE $0x10               // mov    rbx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0xf2a40f48; BYTE $0x0e               // shld    rdx, rsi, 14
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	LONG $0x15eec148                           // shr    rsi, 21
	LONG $0xffffe681; WORD $0x1fff             // and    esi, 536870911
	WORD $0x7189; BYTE $0x64                   // mov    dword [rcx + 100], esi
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	WORD $0x5189; BYTE $0x68                   // mov    dword [rcx + 104], edx
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0xd8a40f48; BYTE $0x14               // shld    rax, rbx, 20
	LONG $0x0feac148                           // shr    rdx, 15
	LONG $0xffffe281; WORD $0x1fff             // and    edx, 536870911
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xf0a40f4c; BYTE $0x1a               // shld    rax, r14, 26
	LONG $0x09eec149                           // shr    r14, 9
	LONG $0xffe68141; WORD $0xffff; BYTE $0x1f // and    r14d, 536870911
	LONG $0x74718944                           // mov    dword [rcx + 116], r14d
	LONG $0xffffff25; BYTE $0x1f               // and    eax, 536870911
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0xefc1; BYTE $0x03                   // shr    edi, 3
	WORD $0x7989; BYTE $0x7c                   // mov    dword [rcx + 124], edi
	LONG $0x74c78349                           // add    r15, 116
	JMP  LBB1_84

LBB1_45:
	LONG $0x02fd8341             // cmp    r13d, 2
	JE   LBB1_76
	LONG $0x03fd8341             // cmp    r13d, 3
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x1f     // mov    rbx, qword [r15]
	LONG $0x08478b49             // mov    rax, qword [r15 + 8]
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x1189                 // mov    dword [rcx], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x03     // shr    edx, 3
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x04     // mov    dword [rcx + 4], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x06     // shr    edx, 6
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x08     // mov    dword [rcx + 8], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x09     // shr    edx, 9
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x0c     // mov    dword [rcx + 12], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x0c     // shr    edx, 12
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x10     // mov    dword [rcx + 16], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x0f     // shr    edx, 15
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x14     // mov    dword [rcx + 20], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x12     // shr    edx, 18
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x18     // mov    dword [rcx + 24], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x15     // shr    edx, 21
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x1c     // mov    dword [rcx + 28], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x18     // shr    edx, 24
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x20     // mov    dword [rcx + 32], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x1b     // shr    edx, 27
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x24     // mov    dword [rcx + 36], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x1eeac148             // shr    rdx, 30
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x28     // mov    dword [rcx + 40], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x21eac148             // shr    rdx, 33
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x2c     // mov    dword [rcx + 44], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x24eac148             // shr    rdx, 36
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x30     // mov    dword [rcx + 48], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x27eac148             // shr    rdx, 39
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x34     // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x2aeac148             // shr    rdx, 42
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x38     // mov    dword [rcx + 56], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x2deac148             // shr    rdx, 45
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x3c     // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x30eac148             // shr    rdx, 48
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x40     // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x33eac148             // shr    rdx, 51
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x44     // mov    dword [rcx + 68], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x36eac148             // shr    rdx, 54
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x48     // mov    dword [rcx + 72], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x39eac148             // shr    rdx, 57
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x4c     // mov    dword [rcx + 76], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0xdaa40f48; BYTE $0x01 // shld    rdx, rbx, 1
	LONG $0x0cc78349             // add    r15, 12
	LONG $0x3cebc148             // shr    rbx, 60
	WORD $0xe383; BYTE $0x07     // and    ebx, 7
	WORD $0x5989; BYTE $0x50     // mov    dword [rcx + 80], ebx
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x54     // mov    dword [rcx + 84], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x02     // shr    edx, 2
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x58     // mov    dword [rcx + 88], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x05     // shr    edx, 5
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x5c     // mov    dword [rcx + 92], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x08     // shr    edx, 8
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x60     // mov    dword [rcx + 96], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x0b     // shr    edx, 11
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x64     // mov    dword [rcx + 100], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x0e     // shr    edx, 14
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x68     // mov    dword [rcx + 104], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x11     // shr    edx, 17
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x6c     // mov    dword [rcx + 108], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x14     // shr    edx, 20
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x70     // mov    dword [rcx + 112], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x17     // shr    edx, 23
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x74     // mov    dword [rcx + 116], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x1a     // shr    edx, 26
	WORD $0xe283; BYTE $0x07     // and    edx, 7
	WORD $0x5189; BYTE $0x78     // mov    dword [rcx + 120], edx
	WORD $0xe8c1; BYTE $0x1d     // shr    eax, 29
	WORD $0x4189; BYTE $0x7c     // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_48:
	LONG $0x12fd8341                           // cmp    r13d, 18
	JE   LBB1_77
	LONG $0x13fd8341                           // cmp    r13d, 19
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x087f8b49                           // mov    rdi, qword [r15 + 8]
	LONG $0x10578b49                           // mov    rdx, qword [r15 + 16]
	LONG $0x18778b49                           // mov    rsi, qword [r15 + 24]
	WORD $0x894d; BYTE $0xfc                   // mov    r12, r15
	LONG $0x207f8b4d                           // mov    r15, qword [r15 + 32]
	LONG $0x244c8b4d; BYTE $0x28               // mov    r9, qword [r12 + 40]
	LONG $0x24748b4d; BYTE $0x30               // mov    r14, qword [r12 + 48]
	LONG $0x245c8b4d; BYTE $0x38               // mov    r11, qword [r12 + 56]
	LONG $0x24548b4d; BYTE $0x40               // mov    r10, qword [r12 + 64]
	LONG $0x24448b4d; BYTE $0x48               // mov    r8, qword [r12 + 72]
	LONG $0x4cc48349                           // add    r12, 76
	WORD $0xc389                               // mov    ebx, eax
	LONG $0xffffe381; WORD $0x0007             // and    ebx, 524287
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x13ebc148                           // shr    rbx, 19
	LONG $0xffffe381; WORD $0x0007             // and    ebx, 524287
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xfb                   // mov    rbx, rdi
	LONG $0xc3a40f48; BYTE $0x07               // shld    rbx, rax, 7
	LONG $0x26e8c148                           // shr    rax, 38
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x08                   // mov    dword [rcx + 8], eax
	LONG $0xffffe381; WORD $0x0007             // and    ebx, 524287
	WORD $0x5989; BYTE $0x0c                   // mov    dword [rcx + 12], ebx
	WORD $0xf889                               // mov    eax, edi
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x8948; BYTE $0xd3                   // mov    rbx, rdx
	LONG $0xfba40f48; BYTE $0x0e               // shld    rbx, rdi, 14
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	LONG $0x1fefc148                           // shr    rdi, 31
	LONG $0xffffe781; WORD $0x0007             // and    edi, 524287
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	LONG $0xffffe381; WORD $0x0007             // and    ebx, 524287
	WORD $0x5989; BYTE $0x18                   // mov    dword [rcx + 24], ebx
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x05                   // shr    eax, 5
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd0a40f48; BYTE $0x02               // shld    rax, rdx, 2
	LONG $0x2beac148                           // shr    rdx, 43
	LONG $0xffffe281; WORD $0x0007             // and    edx, 524287
	WORD $0x5189; BYTE $0x24                   // mov    dword [rcx + 36], edx
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x11e8c148                           // shr    rax, 17
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xf0a40f48; BYTE $0x09               // shld    rax, rsi, 9
	LONG $0x24eec148                           // shr    rsi, 36
	LONG $0xffffe681; WORD $0x0007             // and    esi, 524287
	WORD $0x7189; BYTE $0x30                   // mov    dword [rcx + 48], esi
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xf8a40f4c; BYTE $0x10               // shld    rax, r15, 16
	LONG $0x1defc149                           // shr    r15, 29
	LONG $0xffe78141; WORD $0x07ff; BYTE $0x00 // and    r15d, 524287
	LONG $0x3c798944                           // mov    dword [rcx + 60], r15d
	WORD $0x894d; BYTE $0xe7                   // mov    r15, r12
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x03                   // shr    eax, 3
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x16e8c148                           // shr    rax, 22
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xc8a40f4c; BYTE $0x04               // shld    rax, r9, 4
	LONG $0x29e9c149                           // shr    r9, 41
	LONG $0xffe18141; WORD $0x07ff; BYTE $0x00 // and    r9d, 524287
	LONG $0x4c498944                           // mov    dword [rcx + 76], r9d
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x0fe8c148                           // shr    rax, 15
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0xf2a40f4c; BYTE $0x0b               // shld    rdx, r14, 11
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	LONG $0x22eec149                           // shr    r14, 34
	LONG $0xffe68141; WORD $0x07ff; BYTE $0x00 // and    r14d, 524287
	LONG $0x58718944                           // mov    dword [rcx + 88], r14d
	LONG $0xffffe281; WORD $0x0007             // and    edx, 524287
	WORD $0x5189; BYTE $0x5c                   // mov    dword [rcx + 92], edx
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f4c; BYTE $0x12               // shld    rax, r11, 18
	LONG $0x1bebc149                           // shr    r11, 27
	LONG $0xffe38141; WORD $0x07ff; BYTE $0x00 // and    r11d, 524287
	LONG $0x64598944                           // mov    dword [rcx + 100], r11d
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8d1                               // shr    eax, 1
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f4c; BYTE $0x06               // shld    rax, r10, 6
	LONG $0x27eac149                           // shr    r10, 39
	LONG $0xffe28141; WORD $0x07ff; BYTE $0x00 // and    r10d, 524287
	LONG $0x74518944                           // mov    dword [rcx + 116], r10d
	LONG $0x07ffff25; BYTE $0x00               // and    eax, 524287
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x0de8c141                           // shr    r8d, 13
	JMP  LBB1_83

LBB1_51:
	LONG $0x0afd8341                           // cmp    r13d, 10
	JE   LBB1_78
	LONG $0x0bfd8341                           // cmp    r13d, 11
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x37                   // mov    rsi, qword [r15]
	LONG $0x08578b49                           // mov    rdx, qword [r15 + 8]
	LONG $0x10478b49                           // mov    rax, qword [r15 + 16]
	LONG $0x185f8b49                           // mov    rbx, qword [r15 + 24]
	LONG $0x20578b4d                           // mov    r10, qword [r15 + 32]
	LONG $0x28478b4d                           // mov    r8, qword [r15 + 40]
	WORD $0xf789                               // mov    edi, esi
	LONG $0x07ffe781; WORD $0x0000             // and    edi, 2047
	WORD $0x3989                               // mov    dword [rcx], edi
	WORD $0xf789                               // mov    edi, esi
	WORD $0xefc1; BYTE $0x0b                   // shr    edi, 11
	LONG $0x07ffe781; WORD $0x0000             // and    edi, 2047
	WORD $0x7989; BYTE $0x04                   // mov    dword [rcx + 4], edi
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0x16efc148                           // shr    rdi, 22
	LONG $0x07ffe781; WORD $0x0000             // and    edi, 2047
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0x21efc148                           // shr    rdi, 33
	LONG $0x07ffe781; WORD $0x0000             // and    edi, 2047
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xf7a40f48; BYTE $0x09               // shld    rdi, rsi, 9
	LONG $0x2cc78349                           // add    r15, 44
	LONG $0x2ceec148                           // shr    rsi, 44
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x10                   // mov    dword [rcx + 16], esi
	LONG $0x07ffe781; WORD $0x0000             // and    edi, 2047
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	WORD $0xd689                               // mov    esi, edx
	WORD $0xeec1; BYTE $0x02                   // shr    esi, 2
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x18                   // mov    dword [rcx + 24], esi
	WORD $0xd689                               // mov    esi, edx
	WORD $0xeec1; BYTE $0x0d                   // shr    esi, 13
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x1c                   // mov    dword [rcx + 28], esi
	WORD $0x8948; BYTE $0xd6                   // mov    rsi, rdx
	LONG $0x18eec148                           // shr    rsi, 24
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x20                   // mov    dword [rcx + 32], esi
	WORD $0x8948; BYTE $0xd6                   // mov    rsi, rdx
	LONG $0x23eec148                           // shr    rsi, 35
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x24                   // mov    dword [rcx + 36], esi
	WORD $0x8948; BYTE $0xc6                   // mov    rsi, rax
	LONG $0xd6a40f48; BYTE $0x07               // shld    rsi, rdx, 7
	LONG $0x2eeac148                           // shr    rdx, 46
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x28                   // mov    dword [rcx + 40], edx
	LONG $0x07ffe681; WORD $0x0000             // and    esi, 2047
	WORD $0x7189; BYTE $0x2c                   // mov    dword [rcx + 44], esi
	WORD $0xc289                               // mov    edx, eax
	WORD $0xeac1; BYTE $0x04                   // shr    edx, 4
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x30                   // mov    dword [rcx + 48], edx
	WORD $0xc289                               // mov    edx, eax
	WORD $0xeac1; BYTE $0x0f                   // shr    edx, 15
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x34                   // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x1aeac148                           // shr    rdx, 26
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x38                   // mov    dword [rcx + 56], edx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x25eac148                           // shr    rdx, 37
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x3c                   // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0xc2a40f48; BYTE $0x05               // shld    rdx, rax, 5
	LONG $0x30e8c148                           // shr    rax, 48
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x44                   // mov    dword [rcx + 68], edx
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x11                   // shr    eax, 17
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x27e8c148                           // shr    rax, 39
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f48; BYTE $0x03               // shld    rax, rbx, 3
	LONG $0x32ebc148                           // shr    rbx, 50
	LONG $0x07ffe381; WORD $0x0000             // and    ebx, 2047
	WORD $0x5989; BYTE $0x58                   // mov    dword [rcx + 88], ebx
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x13                   // shr    eax, 19
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x1ee8c148                           // shr    rax, 30
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x29e8c148                           // shr    rax, 41
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x894c; BYTE $0xc2                   // mov    rdx, r8
	LONG $0xd2a40f4c; BYTE $0x01               // shld    rdx, r10, 1
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	LONG $0x34eac149                           // shr    r10, 52
	LONG $0xffe28141; WORD $0x0007; BYTE $0x00 // and    r10d, 2047
	LONG $0x70518944                           // mov    dword [rcx + 112], r10d
	LONG $0x07ffe281; WORD $0x0000             // and    edx, 2047
	WORD $0x5189; BYTE $0x74                   // mov    dword [rcx + 116], edx
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	LONG $0x0007ff25; BYTE $0x00               // and    eax, 2047
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x15e8c141                           // shr    r8d, 21
	JMP  LBB1_83

LBB1_54:
	LONG $0x1afd8341                           // cmp    r13d, 26
	LONG $0x247c894c; BYTE $0x08               // mov    qword [rsp + 8], r15
	JE   LBB1_79
	LONG $0x1bfd8341                           // cmp    r13d, 27
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x107f8b49                           // mov    rdi, qword [r15 + 16]
	LONG $0x18478b4d                           // mov    r8, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x306f8b4d                           // mov    r13, qword [r15 + 48]
	LONG $0x38678b4d                           // mov    r12, qword [r15 + 56]
	LONG $0x40778b4d                           // mov    r14, qword [r15 + 64]
	LONG $0x48578b49                           // mov    rdx, qword [r15 + 72]
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x507a8b4c                           // mov    r15, qword [rdx + 80]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x58528b48                           // mov    rdx, qword [rdx + 88]
	LONG $0x24548948; BYTE $0x10               // mov    qword [rsp + 16], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x07ff             // and    edx, 134217727
	LONG $0x245c8b4c; BYTE $0x08               // mov    r11, qword [rsp + 8]
	LONG $0x605b8b4d                           // mov    r11, qword [r11 + 96]
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x685b8b48                           // mov    rbx, qword [rbx + 104]
	WORD $0x1189                               // mov    dword [rcx], edx
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xc2a40f48; BYTE $0x0a               // shld    rdx, rax, 10
	LONG $0x1be8c148                           // shr    rax, 27
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe281; WORD $0x07ff             // and    edx, 134217727
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xf0a40f48; BYTE $0x14               // shld    rax, rsi, 20
	LONG $0x11eec148                           // shr    rsi, 17
	LONG $0xffffe681; WORD $0x07ff             // and    esi, 134217727
	WORD $0x7189; BYTE $0x0c                   // mov    dword [rcx + 12], esi
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x07e8c148                           // shr    rax, 7
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xf8a40f48; BYTE $0x03               // shld    rax, rdi, 3
	LONG $0x22efc148                           // shr    rdi, 34
	LONG $0xffffe781; WORD $0x07ff             // and    edi, 134217727
	WORD $0x7989; BYTE $0x18                   // mov    dword [rcx + 24], edi
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x0d               // shld    rax, r8, 13
	LONG $0x18e8c149                           // shr    r8, 24
	LONG $0xffe08141; WORD $0xffff; BYTE $0x07 // and    r8d, 134217727
	LONG $0x20418944                           // mov    dword [rcx + 32], r8d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xc8a40f4c; BYTE $0x17               // shld    rax, r9, 23
	LONG $0x0ee9c149                           // shr    r9, 14
	LONG $0xffe18141; WORD $0xffff; BYTE $0x07 // and    r9d, 134217727
	LONG $0x28498944                           // mov    dword [rcx + 40], r9d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0xd0a40f4c; BYTE $0x06               // shld    rax, r10, 6
	LONG $0x1feac149                           // shr    r10, 31
	LONG $0xffe28141; WORD $0xffff; BYTE $0x07 // and    r10d, 134217727
	LONG $0x34518944                           // mov    dword [rcx + 52], r10d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xe8a40f4c; BYTE $0x10               // shld    rax, r13, 16
	LONG $0x15edc149                           // shr    r13, 21
	LONG $0xffe58141; WORD $0xffff; BYTE $0x07 // and    r13d, 134217727
	LONG $0x3c698944                           // mov    dword [rcx + 60], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xe0a40f4c; BYTE $0x1a               // shld    rax, r12, 26
	LONG $0x0becc149                           // shr    r12, 11
	LONG $0xffe48141; WORD $0xffff; BYTE $0x07 // and    r12d, 134217727
	LONG $0x44618944                           // mov    dword [rcx + 68], r12d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8d1                               // shr    eax, 1
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f4c; BYTE $0x09               // shld    rax, r14, 9
	LONG $0x1ceec149                           // shr    r14, 28
	LONG $0xffe68141; WORD $0xffff; BYTE $0x07 // and    r14d, 134217727
	LONG $0x50718944                           // mov    dword [rcx + 80], r14d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xd0a40f48; BYTE $0x13               // shld    rax, rdx, 19
	LONG $0x12eac148                           // shr    rdx, 18
	LONG $0xffffe281; WORD $0x07ff             // and    edx, 134217727
	WORD $0x5189; BYTE $0x58                   // mov    dword [rcx + 88], edx
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0x08e8c148                           // shr    rax, 8
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xfaa40f4c; BYTE $0x02               // shld    rdx, r15, 2
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	LONG $0x23efc149                           // shr    r15, 35
	LONG $0xffe78141; WORD $0xffff; BYTE $0x07 // and    r15d, 134217727
	LONG $0x64798944                           // mov    dword [rcx + 100], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffe281; WORD $0x07ff             // and    edx, 134217727
	WORD $0x5189; BYTE $0x68                   // mov    dword [rcx + 104], edx
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xf0a40f48; BYTE $0x0c               // shld    rax, rsi, 12
	LONG $0x19eac148                           // shr    rdx, 25
	LONG $0xffffe281; WORD $0x07ff             // and    edx, 134217727
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0xd8a40f4c; BYTE $0x16               // shld    rax, r11, 22
	LONG $0x0febc149                           // shr    r11, 15
	LONG $0xffe38141; WORD $0xffff; BYTE $0x07 // and    r11d, 134217727
	LONG $0x74598944                           // mov    dword [rcx + 116], r11d
	LONG $0xffffff25; BYTE $0x07               // and    eax, 134217727
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0xebc1; BYTE $0x05                   // shr    ebx, 5
	WORD $0x5989; BYTE $0x7c                   // mov    dword [rcx + 124], ebx
	LONG $0x6cc78349                           // add    r15, 108
	JMP  LBB1_84

LBB1_57:
	LONG $0x06fd8341             // cmp    r13d, 6
	JE   LBB1_80
	LONG $0x07fd8341             // cmp    r13d, 7
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x17     // mov    rdx, qword [r15]
	LONG $0x085f8b49             // mov    rbx, qword [r15 + 8]
	LONG $0x10478b49             // mov    rax, qword [r15 + 16]
	LONG $0x18478b4d             // mov    r8, qword [r15 + 24]
	LONG $0x1cc78349             // add    r15, 28
	WORD $0xd689                 // mov    esi, edx
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x3189                 // mov    dword [rcx], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x07     // shr    esi, 7
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x04     // mov    dword [rcx + 4], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x0e     // shr    esi, 14
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x08     // mov    dword [rcx + 8], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x15     // shr    esi, 21
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x0c     // mov    dword [rcx + 12], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x1ceec148             // shr    rsi, 28
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x10     // mov    dword [rcx + 16], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x23eec148             // shr    rsi, 35
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x14     // mov    dword [rcx + 20], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x2aeec148             // shr    rsi, 42
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x18     // mov    dword [rcx + 24], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x31eec148             // shr    rsi, 49
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x1c     // mov    dword [rcx + 28], esi
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xd6a40f48; BYTE $0x01 // shld    rsi, rdx, 1
	LONG $0x38eac148             // shr    rdx, 56
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x20     // mov    dword [rcx + 32], edx
	WORD $0xe683; BYTE $0x7f     // and    esi, 127
	WORD $0x7189; BYTE $0x24     // mov    dword [rcx + 36], esi
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x06     // shr    edx, 6
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x28     // mov    dword [rcx + 40], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x0d     // shr    edx, 13
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x2c     // mov    dword [rcx + 44], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x14     // shr    edx, 20
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x30     // mov    dword [rcx + 48], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x1beac148             // shr    rdx, 27
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x34     // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x22eac148             // shr    rdx, 34
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x38     // mov    dword [rcx + 56], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x29eac148             // shr    rdx, 41
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x3c     // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x30eac148             // shr    rdx, 48
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x40     // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0xdaa40f48; BYTE $0x02 // shld    rdx, rbx, 2
	LONG $0x37ebc148             // shr    rbx, 55
	WORD $0xe383; BYTE $0x7f     // and    ebx, 127
	WORD $0x5989; BYTE $0x44     // mov    dword [rcx + 68], ebx
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x48     // mov    dword [rcx + 72], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x05     // shr    edx, 5
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x4c     // mov    dword [rcx + 76], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c     // shr    edx, 12
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x50     // mov    dword [rcx + 80], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x13     // shr    edx, 19
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x54     // mov    dword [rcx + 84], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x1aeac148             // shr    rdx, 26
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x58     // mov    dword [rcx + 88], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x21eac148             // shr    rdx, 33
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x5c     // mov    dword [rcx + 92], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x28eac148             // shr    rdx, 40
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x60     // mov    dword [rcx + 96], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2feac148             // shr    rdx, 47
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x64     // mov    dword [rcx + 100], edx
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xc2a40f48; BYTE $0x03 // shld    rdx, rax, 3
	LONG $0x36e8c148             // shr    rax, 54
	WORD $0xe083; BYTE $0x7f     // and    eax, 127
	WORD $0x4189; BYTE $0x68     // mov    dword [rcx + 104], eax
	WORD $0xe283; BYTE $0x7f     // and    edx, 127
	WORD $0x5189; BYTE $0x6c     // mov    dword [rcx + 108], edx
	WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04     // shr    eax, 4
	WORD $0xe083; BYTE $0x7f     // and    eax, 127
	WORD $0x4189; BYTE $0x70     // mov    dword [rcx + 112], eax
	WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x0b     // shr    eax, 11
	WORD $0xe083; BYTE $0x7f     // and    eax, 127
	WORD $0x4189; BYTE $0x74     // mov    dword [rcx + 116], eax
	WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x12     // shr    eax, 18
	WORD $0xe083; BYTE $0x7f     // and    eax, 127
	WORD $0x4189; BYTE $0x78     // mov    dword [rcx + 120], eax
	LONG $0x19e8c141             // shr    r8d, 25
	JMP  LBB1_83

LBB1_60:
	LONG $0x16fd8341                           // cmp    r13d, 22
	JE   LBB1_81
	LONG $0x17fd8341                           // cmp    r13d, 23
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x1f                   // mov    rbx, qword [r15]
	LONG $0x08578b49                           // mov    rdx, qword [r15 + 8]
	LONG $0x10478b4d                           // mov    r8, qword [r15 + 16]
	LONG $0x184f8b4d                           // mov    r9, qword [r15 + 24]
	LONG $0x206f8b4d                           // mov    r13, qword [r15 + 32]
	LONG $0x28678b4d                           // mov    r12, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x247c894c; BYTE $0x08               // mov    qword [rsp + 8], r15
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x38788b4c                           // mov    r15, qword [rax + 56]
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x40708b4c                           // mov    r14, qword [rax + 64]
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x48408b48                           // mov    rax, qword [rax + 72]
	LONG $0x24448948; BYTE $0x28               // mov    qword [rsp + 40], rax
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x50408b48                           // mov    rax, qword [rax + 80]
	LONG $0x24448948; BYTE $0x20               // mov    qword [rsp + 32], rax
	WORD $0xde89                               // mov    esi, ebx
	LONG $0xffffe681; WORD $0x007f             // and    esi, 8388607
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xd8a40f48; BYTE $0x12               // shld    rax, rbx, 18
	LONG $0x247c8b48; BYTE $0x08               // mov    rdi, qword [rsp + 8]
	LONG $0x58578b4c                           // mov    r10, qword [rdi + 88]
	LONG $0x2454894c; BYTE $0x10               // mov    qword [rsp + 16], r10
	WORD $0x3189                               // mov    dword [rcx], esi
	LONG $0x17ebc148                           // shr    rbx, 23
	LONG $0xffffe381; WORD $0x007f             // and    ebx, 8388607
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x08                   // mov    dword [rcx + 8], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x05                   // shr    eax, 5
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x0c                   // mov    dword [rcx + 12], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f48; BYTE $0x0d               // shld    rax, rdx, 13
	LONG $0x1ceac148                           // shr    rdx, 28
	LONG $0xffffe281; WORD $0x007f             // and    edx, 8388607
	WORD $0x5189; BYTE $0x10                   // mov    dword [rcx + 16], edx
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x0ae8c148                           // shr    rax, 10
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xc2a40f4c; BYTE $0x08               // shld    rdx, r8, 8
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	LONG $0x21e8c149                           // shr    r8, 33
	LONG $0xffe08141; WORD $0x7fff; BYTE $0x00 // and    r8d, 8388607
	LONG $0x1c418944                           // mov    dword [rcx + 28], r8d
	LONG $0xffffe281; WORD $0x007f             // and    edx, 8388607
	WORD $0x5189; BYTE $0x20                   // mov    dword [rcx + 32], edx
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x0fe8c148                           // shr    rax, 15
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0xc8a40f4c; BYTE $0x03               // shld    rax, r9, 3
	LONG $0x26e9c149                           // shr    r9, 38
	LONG $0xffe18141; WORD $0x7fff; BYTE $0x00 // and    r9d, 8388607
	LONG $0x28498944                           // mov    dword [rcx + 40], r9d
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xe8a40f4c; BYTE $0x15               // shld    rax, r13, 21
	LONG $0x14edc149                           // shr    r13, 20
	LONG $0xffe58141; WORD $0x7fff; BYTE $0x00 // and    r13d, 8388607
	LONG $0x30698944                           // mov    dword [rcx + 48], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x8944; BYTE $0xe0                   // mov    eax, r12d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xe0a40f4c; BYTE $0x10               // shld    rax, r12, 16
	LONG $0x19ecc149                           // shr    r12, 25
	LONG $0xffe48141; WORD $0x7fff; BYTE $0x00 // and    r12d, 8388607
	LONG $0x3c618944                           // mov    dword [rcx + 60], r12d
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x07                   // shr    eax, 7
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xd8a40f4c; BYTE $0x0b               // shld    rax, r11, 11
	LONG $0x1eebc149                           // shr    r11, 30
	LONG $0xffe38141; WORD $0x7fff; BYTE $0x00 // and    r11d, 8388607
	LONG $0x48598944                           // mov    dword [rcx + 72], r11d
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0x0ce8c148                           // shr    rax, 12
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xf8a40f4c; BYTE $0x06               // shld    rax, r15, 6
	LONG $0x23efc149                           // shr    r15, 35
	LONG $0xffe78141; WORD $0x7fff; BYTE $0x00 // and    r15d, 8388607
	LONG $0x54798944                           // mov    dword [rcx + 84], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x11e8c148                           // shr    rax, 17
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	LONG $0x247c8b48; BYTE $0x28               // mov    rdi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xf0a40f4c; BYTE $0x01               // shld    rax, r14, 1
	LONG $0x28eec149                           // shr    r14, 40
	LONG $0xffe68141; WORD $0x7fff; BYTE $0x00 // and    r14d, 8388607
	LONG $0x60718944                           // mov    dword [rcx + 96], r14d
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	LONG $0x24748b48; BYTE $0x20               // mov    rsi, qword [rsp + 32]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xfaa40f48; BYTE $0x13               // shld    rdx, rdi, 19
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	LONG $0x16efc148                           // shr    rdi, 22
	LONG $0xffffe781; WORD $0x007f             // and    edi, 8388607
	WORD $0x7989; BYTE $0x68                   // mov    dword [rcx + 104], edi
	LONG $0xffffe281; WORD $0x007f             // and    edx, 8388607
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x0e               // shld    rax, rsi, 14
	LONG $0x1beec148                           // shr    rsi, 27
	LONG $0xffffe681; WORD $0x007f             // and    esi, 8388607
	WORD $0x7189; BYTE $0x74                   // mov    dword [rcx + 116], esi
	LONG $0x7fffff25; BYTE $0x00               // and    eax, 8388607
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	WORD $0xe8c1; BYTE $0x09                   // shr    eax, 9
	WORD $0x4189; BYTE $0x7c                   // mov    dword [rcx + 124], eax
	LONG $0x5cc78349                           // add    r15, 92
	JMP  LBB1_84

LBB1_63:
	LONG $0x0efd8341                           // cmp    r13d, 14
	JE   LBB1_82
	LONG $0x0ffd8341                           // cmp    r13d, 15
	JNE  LBB1_85
	WORD $0x8b49; BYTE $0x3f                   // mov    rdi, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x10578b49                           // mov    rdx, qword [r15 + 16]
	LONG $0x18478b49                           // mov    rax, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x285f8b4d                           // mov    r11, qword [r15 + 40]
	LONG $0x30578b4d                           // mov    r10, qword [r15 + 48]
	LONG $0x38478b4d                           // mov    r8, qword [r15 + 56]
	LONG $0x3cc78349                           // add    r15, 60
	WORD $0xfb89                               // mov    ebx, edi
	LONG $0x7fffe381; WORD $0x0000             // and    ebx, 32767
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0xfb89                               // mov    ebx, edi
	WORD $0xebc1; BYTE $0x0f                   // shr    ebx, 15
	LONG $0x7fffe381; WORD $0x0000             // and    ebx, 32767
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xfb                   // mov    rbx, rdi
	LONG $0x1eebc148                           // shr    rbx, 30
	LONG $0x7fffe381; WORD $0x0000             // and    ebx, 32767
	WORD $0x5989; BYTE $0x08                   // mov    dword [rcx + 8], ebx
	WORD $0x8948; BYTE $0xf3                   // mov    rbx, rsi
	LONG $0xfba40f48; BYTE $0x04               // shld    rbx, rdi, 4
	LONG $0x2defc148                           // shr    rdi, 45
	LONG $0x7fffe781; WORD $0x0000             // and    edi, 32767
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	LONG $0x7fffe381; WORD $0x0000             // and    ebx, 32767
	WORD $0x5989; BYTE $0x10                   // mov    dword [rcx + 16], ebx
	WORD $0xf789                               // mov    edi, esi
	WORD $0xefc1; BYTE $0x0b                   // shr    edi, 11
	LONG $0x7fffe781; WORD $0x0000             // and    edi, 32767
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0x1aefc148                           // shr    rdi, 26
	LONG $0x7fffe781; WORD $0x0000             // and    edi, 32767
	WORD $0x8948; BYTE $0xd3                   // mov    rbx, rdx
	LONG $0xf3a40f48; BYTE $0x08               // shld    rbx, rsi, 8
	WORD $0x7989; BYTE $0x18                   // mov    dword [rcx + 24], edi
	LONG $0x29eec148                           // shr    rsi, 41
	LONG $0x7fffe681; WORD $0x0000             // and    esi, 32767
	WORD $0x7189; BYTE $0x1c                   // mov    dword [rcx + 28], esi
	LONG $0x7fffe381; WORD $0x0000             // and    ebx, 32767
	WORD $0x5989; BYTE $0x20                   // mov    dword [rcx + 32], ebx
	WORD $0xd689                               // mov    esi, edx
	WORD $0xeec1; BYTE $0x07                   // shr    esi, 7
	LONG $0x7fffe681; WORD $0x0000             // and    esi, 32767
	WORD $0x7189; BYTE $0x24                   // mov    dword [rcx + 36], esi
	WORD $0x8948; BYTE $0xd6                   // mov    rsi, rdx
	LONG $0x16eec148                           // shr    rsi, 22
	LONG $0x7fffe681; WORD $0x0000             // and    esi, 32767
	WORD $0x7189; BYTE $0x28                   // mov    dword [rcx + 40], esi
	WORD $0x8948; BYTE $0xc6                   // mov    rsi, rax
	LONG $0xd6a40f48; BYTE $0x0c               // shld    rsi, rdx, 12
	LONG $0x25eac148                           // shr    rdx, 37
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x2c                   // mov    dword [rcx + 44], edx
	LONG $0x7fffe681; WORD $0x0000             // and    esi, 32767
	WORD $0x7189; BYTE $0x30                   // mov    dword [rcx + 48], esi
	WORD $0xc289                               // mov    edx, eax
	WORD $0xeac1; BYTE $0x03                   // shr    edx, 3
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x34                   // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x12eac148                           // shr    rdx, 18
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x38                   // mov    dword [rcx + 56], edx
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	LONG $0x21eac148                           // shr    rdx, 33
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x3c                   // mov    dword [rcx + 60], edx
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xc2a40f48; BYTE $0x01               // shld    rdx, rax, 1
	LONG $0x30e8c148                           // shr    rax, 48
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x44                   // mov    dword [rcx + 68], edx
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x0e                   // shr    eax, 14
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x1de8c148                           // shr    rax, 29
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xc8a40f4c; BYTE $0x05               // shld    rax, r9, 5
	LONG $0x2ce9c149                           // shr    r9, 44
	LONG $0xffe18141; WORD $0x007f; BYTE $0x00 // and    r9d, 32767
	LONG $0x50498944                           // mov    dword [rcx + 80], r9d
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x19e8c148                           // shr    rax, 25
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f4c; BYTE $0x09               // shld    rax, r11, 9
	LONG $0x28ebc149                           // shr    r11, 40
	LONG $0xffe38141; WORD $0x007f; BYTE $0x00 // and    r11d, 32767
	LONG $0x60598944                           // mov    dword [rcx + 96], r11d
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x15e8c148                           // shr    rax, 21
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x894c; BYTE $0xc2                   // mov    rdx, r8
	LONG $0xd2a40f4c; BYTE $0x0d               // shld    rdx, r10, 13
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	LONG $0x24eac149                           // shr    r10, 36
	LONG $0xffe28141; WORD $0x007f; BYTE $0x00 // and    r10d, 32767
	LONG $0x70518944                           // mov    dword [rcx + 112], r10d
	LONG $0x7fffe281; WORD $0x0000             // and    edx, 32767
	WORD $0x5189; BYTE $0x74                   // mov    dword [rcx + 116], edx
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0x007fff25; BYTE $0x00               // and    eax, 32767
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x11e8c141                           // shr    r8d, 17
	JMP  LBB1_83

LBB1_66:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x107f8b49                           // mov    rdi, qword [r15 + 16]
	LONG $0x18478b4d                           // mov    r8, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x386f8b4d                           // mov    r13, qword [r15 + 56]
	LONG $0x40678b4d                           // mov    r12, qword [r15 + 64]
	LONG $0x48578b49                           // mov    rdx, qword [r15 + 72]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x247c894c; BYTE $0x08               // mov    qword [rsp + 8], r15
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x507a8b4c                           // mov    r15, qword [rdx + 80]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x58528b48                           // mov    rdx, qword [rdx + 88]
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	LONG $0x24748b4c; BYTE $0x08               // mov    r14, qword [rsp + 8]
	LONG $0x605e8b49                           // mov    rbx, qword [r14 + 96]
	LONG $0x245c8948; BYTE $0x10               // mov    qword [rsp + 16], rbx
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x68738b4c                           // mov    r14, qword [rbx + 104]
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x705b8b48                           // mov    rbx, qword [rbx + 112]
	WORD $0x1189                               // mov    dword [rcx], edx
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xc2a40f48; BYTE $0x04               // shld    rdx, rax, 4
	LONG $0x1ee8c148                           // shr    rax, 30
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xf0a40f48; BYTE $0x08               // shld    rax, rsi, 8
	LONG $0x1aeec148                           // shr    rsi, 26
	LONG $0xffffe681; WORD $0x3fff             // and    esi, 1073741823
	WORD $0x7189; BYTE $0x0c                   // mov    dword [rcx + 12], esi
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x894c; BYTE $0xc2                   // mov    rdx, r8
	LONG $0xfaa40f48; BYTE $0x0c               // shld    rdx, rdi, 12
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	LONG $0x16efc148                           // shr    rdi, 22
	LONG $0xffffe781; WORD $0x3fff             // and    edi, 1073741823
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x18                   // mov    dword [rcx + 24], edx
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x10               // shld    rax, r8, 16
	LONG $0x12e8c149                           // shr    r8, 18
	LONG $0xffe08141; WORD $0xffff; BYTE $0x3f // and    r8d, 1073741823
	LONG $0x1c418944                           // mov    dword [rcx + 28], r8d
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xc8a40f4c; BYTE $0x14               // shld    rax, r9, 20
	LONG $0x0ee9c149                           // shr    r9, 14
	LONG $0xffe18141; WORD $0xffff; BYTE $0x3f // and    r9d, 1073741823
	LONG $0x24498944                           // mov    dword [rcx + 36], r9d
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xd0a40f4c; BYTE $0x18               // shld    rax, r10, 24
	LONG $0x0aeac149                           // shr    r10, 10
	LONG $0xffe28141; WORD $0xffff; BYTE $0x3f // and    r10d, 1073741823
	LONG $0x2c518944                           // mov    dword [rcx + 44], r10d
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	LONG $0xdaa40f4c; BYTE $0x1c               // shld    rdx, r11, 28
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	LONG $0x06ebc149                           // shr    r11, 6
	LONG $0xffe38141; WORD $0xffff; BYTE $0x3f // and    r11d, 1073741823
	LONG $0x34598944                           // mov    dword [rcx + 52], r11d
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x38                   // mov    dword [rcx + 56], edx
	WORD $0x8944; BYTE $0xe8                   // mov    eax, r13d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xe8a40f4c; BYTE $0x02               // shld    rax, r13, 2
	LONG $0x20edc149                           // shr    r13, 32
	LONG $0xffe58141; WORD $0xffff; BYTE $0x3f // and    r13d, 1073741823
	LONG $0x40698944                           // mov    dword [rcx + 64], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xe2a40f4c; BYTE $0x06               // shld    rdx, r12, 6
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	LONG $0x1cecc149                           // shr    r12, 28
	LONG $0xffe48141; WORD $0xffff; BYTE $0x3f // and    r12d, 1073741823
	LONG $0x48618944                           // mov    dword [rcx + 72], r12d
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x4c                   // mov    dword [rcx + 76], edx
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xf0a40f48; BYTE $0x0a               // shld    rax, rsi, 10
	LONG $0x18eac148                           // shr    rdx, 24
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x50                   // mov    dword [rcx + 80], edx
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf8a40f4c; BYTE $0x0e               // shld    rax, r15, 14
	LONG $0x14efc149                           // shr    r15, 20
	LONG $0xffe78141; WORD $0xffff; BYTE $0x3f // and    r15d, 1073741823
	LONG $0x58798944                           // mov    dword [rcx + 88], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd0a40f48; BYTE $0x12               // shld    rax, rdx, 18
	LONG $0x10eac148                           // shr    rdx, 16
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x60                   // mov    dword [rcx + 96], edx
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	LONG $0xf2a40f48; BYTE $0x16               // shld    rdx, rsi, 22
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	LONG $0x0ceec148                           // shr    rsi, 12
	LONG $0xffffe681; WORD $0x3fff             // and    esi, 1073741823
	WORD $0x7189; BYTE $0x68                   // mov    dword [rcx + 104], esi
	LONG $0xffffe281; WORD $0x3fff             // and    edx, 1073741823
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0xf0a40f4c; BYTE $0x1a               // shld    rax, r14, 26
	LONG $0x08eec149                           // shr    r14, 8
	LONG $0xffe68141; WORD $0xffff; BYTE $0x3f // and    r14d, 1073741823
	LONG $0x70718944                           // mov    dword [rcx + 112], r14d
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x04e8c148                           // shr    rax, 4
	LONG $0xffffff25; BYTE $0x3f               // and    eax, 1073741823
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x22ebc148                           // shr    rbx, 34
	WORD $0x5989; BYTE $0x7c                   // mov    dword [rcx + 124], ebx
	LONG $0x78c78349                           // add    r15, 120
	JMP  LBB1_84

LBB1_67:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x087f8b49                           // mov    rdi, qword [r15 + 8]
	LONG $0x10478b4d                           // mov    r8, qword [r15 + 16]
	LONG $0x184f8b4d                           // mov    r9, qword [r15 + 24]
	LONG $0x20578b4d                           // mov    r10, qword [r15 + 32]
	LONG $0x285f8b4d                           // mov    r11, qword [r15 + 40]
	LONG $0x30778b4d                           // mov    r14, qword [r15 + 48]
	LONG $0x38678b4d                           // mov    r12, qword [r15 + 56]
	LONG $0x40578b49                           // mov    rdx, qword [r15 + 64]
	LONG $0x24548948; BYTE $0x58               // mov    qword [rsp + 88], rdx
	LONG $0x48578b49                           // mov    rdx, qword [r15 + 72]
	LONG $0x24548948; BYTE $0x60               // mov    qword [rsp + 96], rdx
	LONG $0x50578b49                           // mov    rdx, qword [r15 + 80]
	LONG $0x24548948; BYTE $0x48               // mov    qword [rsp + 72], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0xc6a40f48; BYTE $0x02               // shld    rsi, rax, 2
	LONG $0x585f8b49                           // mov    rbx, qword [r15 + 88]
	LONG $0x245c8948; BYTE $0x40               // mov    qword [rsp + 64], rbx
	LONG $0x605f8b49                           // mov    rbx, qword [r15 + 96]
	LONG $0x245c8948; BYTE $0x30               // mov    qword [rsp + 48], rbx
	LONG $0x685f8b49                           // mov    rbx, qword [r15 + 104]
	LONG $0x245c8948; BYTE $0x28               // mov    qword [rsp + 40], rbx
	LONG $0x705f8b49                           // mov    rbx, qword [r15 + 112]
	LONG $0x245c8948; BYTE $0x20               // mov    qword [rsp + 32], rbx
	LONG $0x786f8b4d                           // mov    r13, qword [r15 + 120]
	LONG $0x246c894c; BYTE $0x10               // mov    qword [rsp + 16], r13
	WORD $0x1189                               // mov    dword [rcx], edx
	LONG $0x1fe8c148                           // shr    rax, 31
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe681; WORD $0x7fff             // and    esi, 2147483647
	WORD $0x7189; BYTE $0x08                   // mov    dword [rcx + 8], esi
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xf8a40f48; BYTE $0x04               // shld    rax, rdi, 4
	LONG $0x1defc148                           // shr    rdi, 29
	LONG $0xffffe781; WORD $0x7fff             // and    edi, 2147483647
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x06               // shld    rax, r8, 6
	LONG $0x1be8c149                           // shr    r8, 27
	LONG $0xffe08141; WORD $0xffff; BYTE $0x7f // and    r8d, 2147483647
	LONG $0x14418944                           // mov    dword [rcx + 20], r8d
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xc8a40f4c; BYTE $0x08               // shld    rax, r9, 8
	LONG $0x19e9c149                           // shr    r9, 25
	LONG $0xffe18141; WORD $0xffff; BYTE $0x7f // and    r9d, 2147483647
	LONG $0x1c498944                           // mov    dword [rcx + 28], r9d
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0xd2a40f4c; BYTE $0x0a               // shld    rdx, r10, 10
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	LONG $0x17eac149                           // shr    r10, 23
	LONG $0xffe28141; WORD $0xffff; BYTE $0x7f // and    r10d, 2147483647
	LONG $0x24518944                           // mov    dword [rcx + 36], r10d
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x28                   // mov    dword [rcx + 40], edx
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xd8a40f4c; BYTE $0x0c               // shld    rax, r11, 12
	LONG $0x15ebc149                           // shr    r11, 21
	LONG $0xffe38141; WORD $0xffff; BYTE $0x7f // and    r11d, 2147483647
	LONG $0x2c598944                           // mov    dword [rcx + 44], r11d
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xf0a40f4c; BYTE $0x0e               // shld    rax, r14, 14
	LONG $0x13eec149                           // shr    r14, 19
	LONG $0xffe68141; WORD $0xffff; BYTE $0x7f // and    r14d, 2147483647
	LONG $0x34718944                           // mov    dword [rcx + 52], r14d
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	LONG $0x247c8b48; BYTE $0x58               // mov    rdi, qword [rsp + 88]
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xe0a40f4c; BYTE $0x10               // shld    rax, r12, 16
	LONG $0x11ecc149                           // shr    r12, 17
	LONG $0xffe48141; WORD $0xffff; BYTE $0x7f // and    r12d, 2147483647
	LONG $0x3c618944                           // mov    dword [rcx + 60], r12d
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xfaa40f48; BYTE $0x12               // shld    rdx, rdi, 18
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	LONG $0x0fefc148                           // shr    rdi, 15
	LONG $0xffffe781; WORD $0x7fff             // and    edi, 2147483647
	WORD $0x7989; BYTE $0x44                   // mov    dword [rcx + 68], edi
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x48                   // mov    dword [rcx + 72], edx
	LONG $0x24548b48; BYTE $0x48               // mov    rdx, qword [rsp + 72]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x14               // shld    rax, rsi, 20
	LONG $0x0deec148                           // shr    rsi, 13
	LONG $0xffffe681; WORD $0x7fff             // and    esi, 2147483647
	WORD $0x7189; BYTE $0x4c                   // mov    dword [rcx + 76], esi
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	LONG $0x247c8b48; BYTE $0x40               // mov    rdi, qword [rsp + 64]
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xd0a40f48; BYTE $0x16               // shld    rax, rdx, 22
	LONG $0x0beac148                           // shr    rdx, 11
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x54                   // mov    dword [rcx + 84], edx
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x24748b48; BYTE $0x30               // mov    rsi, qword [rsp + 48]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0xf8a40f48; BYTE $0x18               // shld    rax, rdi, 24
	LONG $0x09eac148                           // shr    rdx, 9
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x5c                   // mov    dword [rcx + 92], edx
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	LONG $0x247c8b48; BYTE $0x28               // mov    rdi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0xf2a40f48; BYTE $0x1a               // shld    rdx, rsi, 26
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	LONG $0x07eec148                           // shr    rsi, 7
	LONG $0xffffe681; WORD $0x7fff             // and    esi, 2147483647
	WORD $0x7189; BYTE $0x64                   // mov    dword [rcx + 100], esi
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x68                   // mov    dword [rcx + 104], edx
	LONG $0x24748b48; BYTE $0x20               // mov    rsi, qword [rsp + 32]
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0xf8a40f48; BYTE $0x1c               // shld    rax, rdi, 28
	LONG $0x05eac148                           // shr    rdx, 5
	LONG $0xffffe281; WORD $0x7fff             // and    edx, 2147483647
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x1e               // shld    rax, rsi, 30
	LONG $0x03eec148                           // shr    rsi, 3
	LONG $0xffffe681; WORD $0x7fff             // and    esi, 2147483647
	WORD $0x7189; BYTE $0x74                   // mov    dword [rcx + 116], esi
	LONG $0xffffff25; BYTE $0x7f               // and    eax, 2147483647
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	WORD $0xe8d1                               // shr    eax, 1
	WORD $0x4189; BYTE $0x7c                   // mov    dword [rcx + 124], eax
	LONG $0x7cc78349                           // add    r15, 124
	JMP  LBB1_84

LBB1_68:
	LONG $0x1041110f         // movups    oword [rcx + 16], xmm0
	WORD $0x110f; BYTE $0x01 // movups    oword [rcx], xmm0
	JMP  LBB1_84

LBB1_69:
	WORD $0x8b49; BYTE $0x07 // mov    rax, qword [r15]
	LONG $0x085f8b49         // mov    rbx, qword [r15 + 8]
	LONG $0x107f8b49         // mov    rdi, qword [r15 + 16]
	LONG $0x18578b49         // mov    rdx, qword [r15 + 24]
	LONG $0x205f8b4d         // mov    r11, qword [r15 + 32]
	LONG $0x28578b4d         // mov    r10, qword [r15 + 40]
	LONG $0x304f8b4d         // mov    r9, qword [r15 + 48]
	LONG $0x38478b4d         // mov    r8, qword [r15 + 56]
	LONG $0x40c78349         // add    r15, 64
	WORD $0xb70f; BYTE $0xf0 // movzx    esi, ax
	WORD $0x3189             // mov    dword [rcx], esi
	WORD $0xc689             // mov    esi, eax
	WORD $0xeec1; BYTE $0x10 // shr    esi, 16
	WORD $0x7189; BYTE $0x04 // mov    dword [rcx + 4], esi
	WORD $0x8948; BYTE $0xc6 // mov    rsi, rax
	LONG $0x20eec148         // shr    rsi, 32
	WORD $0xb70f; BYTE $0xf6 // movzx    esi, si
	WORD $0x7189; BYTE $0x08 // mov    dword [rcx + 8], esi
	LONG $0x30e8c148         // shr    rax, 48
	WORD $0x4189; BYTE $0x0c // mov    dword [rcx + 12], eax
	WORD $0xb70f; BYTE $0xc3 // movzx    eax, bx
	WORD $0x4189; BYTE $0x10 // mov    dword [rcx + 16], eax
	WORD $0xd889             // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x14 // mov    dword [rcx + 20], eax
	WORD $0x8948; BYTE $0xd8 // mov    rax, rbx
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x18 // mov    dword [rcx + 24], eax
	LONG $0x30ebc148         // shr    rbx, 48
	WORD $0x5989; BYTE $0x1c // mov    dword [rcx + 28], ebx
	WORD $0xb70f; BYTE $0xc7 // movzx    eax, di
	WORD $0x4189; BYTE $0x20 // mov    dword [rcx + 32], eax
	WORD $0xf889             // mov    eax, edi
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x24 // mov    dword [rcx + 36], eax
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x28 // mov    dword [rcx + 40], eax
	LONG $0x30efc148         // shr    rdi, 48
	WORD $0x7989; BYTE $0x2c // mov    dword [rcx + 44], edi
	WORD $0xb70f; BYTE $0xc2 // movzx    eax, dx
	WORD $0x4189; BYTE $0x30 // mov    dword [rcx + 48], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x34 // mov    dword [rcx + 52], eax
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x38 // mov    dword [rcx + 56], eax
	LONG $0x30eac148         // shr    rdx, 48
	WORD $0x5189; BYTE $0x3c // mov    dword [rcx + 60], edx
	LONG $0xc3b70f41         // movzx    eax, r11w
	WORD $0x4189; BYTE $0x40 // mov    dword [rcx + 64], eax
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x44 // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x48 // mov    dword [rcx + 72], eax
	LONG $0x30ebc149         // shr    r11, 48
	LONG $0x4c598944         // mov    dword [rcx + 76], r11d
	LONG $0xc2b70f41         // movzx    eax, r10w
	WORD $0x4189; BYTE $0x50 // mov    dword [rcx + 80], eax
	WORD $0x8944; BYTE $0xd0 // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x54 // mov    dword [rcx + 84], eax
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x58 // mov    dword [rcx + 88], eax
	LONG $0x30eac149         // shr    r10, 48
	LONG $0x5c518944         // mov    dword [rcx + 92], r10d
	LONG $0xc1b70f41         // movzx    eax, r9w
	WORD $0x4189; BYTE $0x60 // mov    dword [rcx + 96], eax
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x64 // mov    dword [rcx + 100], eax
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x68 // mov    dword [rcx + 104], eax
	LONG $0x30e9c149         // shr    r9, 48
	LONG $0x6c498944         // mov    dword [rcx + 108], r9d
	LONG $0xc0b70f41         // movzx    eax, r8w
	WORD $0x4189; BYTE $0x70 // mov    dword [rcx + 112], eax
	WORD $0x8944; BYTE $0xc0 // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0x4189; BYTE $0x74 // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb70f; BYTE $0xc0 // movzx    eax, ax
	WORD $0x4189; BYTE $0x78 // mov    dword [rcx + 120], eax
	LONG $0x30e8c149         // shr    r8, 48
	JMP  LBB1_83

LBB1_70:
	WORD $0x8b49; BYTE $0x07 // mov    rax, qword [r15]
	LONG $0x08578b49         // mov    rdx, qword [r15 + 8]
	LONG $0x107f8b49         // mov    rdi, qword [r15 + 16]
	WORD $0xb60f; BYTE $0xf0 // movzx    esi, al
	LONG $0x18478b4d         // mov    r8, qword [r15 + 24]
	WORD $0x3189             // mov    dword [rcx], esi
	WORD $0xb60f; BYTE $0xf4 // movzx    esi, ah
	WORD $0x7189; BYTE $0x04 // mov    dword [rcx + 4], esi
	WORD $0xc689             // mov    esi, eax
	WORD $0xeec1; BYTE $0x10 // shr    esi, 16
	LONG $0xf6b60f40         // movzx    esi, sil
	WORD $0x7189; BYTE $0x08 // mov    dword [rcx + 8], esi
	WORD $0xc389             // mov    ebx, eax
	WORD $0xebc1; BYTE $0x18 // shr    ebx, 24
	WORD $0x5989; BYTE $0x0c // mov    dword [rcx + 12], ebx
	WORD $0x8948; BYTE $0xc6 // mov    rsi, rax
	LONG $0x20eec148         // shr    rsi, 32
	LONG $0xf6b60f40         // movzx    esi, sil
	WORD $0x7189; BYTE $0x10 // mov    dword [rcx + 16], esi
	WORD $0x8948; BYTE $0xc6 // mov    rsi, rax
	LONG $0x28eec148         // shr    rsi, 40
	LONG $0xf6b60f40         // movzx    esi, sil
	WORD $0x7189; BYTE $0x14 // mov    dword [rcx + 20], esi
	WORD $0x8948; BYTE $0xc6 // mov    rsi, rax
	LONG $0x30eec148         // shr    rsi, 48
	LONG $0xf6b60f40         // movzx    esi, sil
	WORD $0x7189; BYTE $0x18 // mov    dword [rcx + 24], esi
	LONG $0x38e8c148         // shr    rax, 56
	WORD $0x4189; BYTE $0x1c // mov    dword [rcx + 28], eax
	WORD $0xb60f; BYTE $0xc2 // movzx    eax, dl
	WORD $0x4189; BYTE $0x20 // mov    dword [rcx + 32], eax
	WORD $0xb60f; BYTE $0xc6 // movzx    eax, dh
	WORD $0x4189; BYTE $0x24 // mov    dword [rcx + 36], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x28 // mov    dword [rcx + 40], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x18 // shr    eax, 24
	WORD $0x4189; BYTE $0x2c // mov    dword [rcx + 44], eax
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x30 // mov    dword [rcx + 48], eax
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x28e8c148         // shr    rax, 40
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x34 // mov    dword [rcx + 52], eax
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x30e8c148         // shr    rax, 48
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x38 // mov    dword [rcx + 56], eax
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0x5189; BYTE $0x3c // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xfa // mov    rdx, rdi
	WORD $0xb60f; BYTE $0xc2 // movzx    eax, dl
	WORD $0x4189; BYTE $0x40 // mov    dword [rcx + 64], eax
	WORD $0xb60f; BYTE $0xc6 // movzx    eax, dh
	WORD $0x4189; BYTE $0x44 // mov    dword [rcx + 68], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x48 // mov    dword [rcx + 72], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x18 // shr    eax, 24
	WORD $0x4189; BYTE $0x4c // mov    dword [rcx + 76], eax
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x50 // mov    dword [rcx + 80], eax
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	LONG $0x28e8c148         // shr    rax, 40
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x54 // mov    dword [rcx + 84], eax
	WORD $0x8948; BYTE $0xf8 // mov    rax, rdi
	LONG $0x30e8c148         // shr    rax, 48
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x58 // mov    dword [rcx + 88], eax
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0x5189; BYTE $0x5c // mov    dword [rcx + 92], edx
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	WORD $0xb60f; BYTE $0xc2 // movzx    eax, dl
	WORD $0x4189; BYTE $0x60 // mov    dword [rcx + 96], eax
	WORD $0xb60f; BYTE $0xc6 // movzx    eax, dh
	WORD $0x4189; BYTE $0x64 // mov    dword [rcx + 100], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x10 // shr    eax, 16
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x68 // mov    dword [rcx + 104], eax
	WORD $0xd089             // mov    eax, edx
	WORD $0xe8c1; BYTE $0x18 // shr    eax, 24
	WORD $0x4189; BYTE $0x6c // mov    dword [rcx + 108], eax
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0x20e8c148         // shr    rax, 32
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x70 // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0x28e8c148         // shr    rax, 40
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x74 // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0x30e8c148         // shr    rax, 48
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4189; BYTE $0x78 // mov    dword [rcx + 120], eax
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0x5189; BYTE $0x7c // mov    dword [rcx + 124], edx
	LONG $0x20c78349         // add    r15, 32
	JMP  LBB1_84

LBB1_71:
	WORD $0x8b49; BYTE $0x1f                   // mov    rbx, qword [r15]
	LONG $0x08478b49                           // mov    rax, qword [r15 + 8]
	LONG $0x106f8b4d                           // mov    r13, qword [r15 + 16]
	LONG $0x18778b49                           // mov    rsi, qword [r15 + 24]
	LONG $0x20578b49                           // mov    rdx, qword [r15 + 32]
	LONG $0x284f8b4d                           // mov    r9, qword [r15 + 40]
	WORD $0x894d; BYTE $0xf8                   // mov    r8, r15
	LONG $0x307f8b4d                           // mov    r15, qword [r15 + 48]
	LONG $0x38608b4d                           // mov    r12, qword [r8 + 56]
	LONG $0x40508b4d                           // mov    r10, qword [r8 + 64]
	LONG $0x48588b4d                           // mov    r11, qword [r8 + 72]
	LONG $0x50708b4d                           // mov    r14, qword [r8 + 80]
	LONG $0x58788b49                           // mov    rdi, qword [r8 + 88]
	LONG $0x247c8948; BYTE $0x10               // mov    qword [rsp + 16], rdi
	WORD $0xdf89                               // mov    edi, ebx
	LONG $0xffffe781; WORD $0x00ff             // and    edi, 16777215
	WORD $0x3989                               // mov    dword [rcx], edi
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0xdfa40f48; BYTE $0x10               // shld    rdi, rbx, 16
	LONG $0x18ebc148                           // shr    rbx, 24
	LONG $0xffffe381; WORD $0x00ff             // and    ebx, 16777215
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	LONG $0xffffe781; WORD $0x00ff             // and    edi, 16777215
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	WORD $0xc789                               // mov    edi, eax
	WORD $0xefc1; BYTE $0x08                   // shr    edi, 8
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	WORD $0x894c; BYTE $0xef                   // mov    rdi, r13
	LONG $0xc7a40f48; BYTE $0x08               // shld    rdi, rax, 8
	LONG $0x20e8c148                           // shr    rax, 32
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	LONG $0xffffe781; WORD $0x00ff             // and    edi, 16777215
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	LONG $0x28edc149                           // shr    r13, 40
	LONG $0x1c698944                           // mov    dword [rcx + 28], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	WORD $0xf089                               // mov    eax, esi
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xf7a40f48; BYTE $0x10               // shld    rdi, rsi, 16
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	LONG $0x18eec148                           // shr    rsi, 24
	LONG $0xffffe681; WORD $0x00ff             // and    esi, 16777215
	WORD $0x7189; BYTE $0x24                   // mov    dword [rcx + 36], esi
	LONG $0xffffe781; WORD $0x00ff             // and    edi, 16777215
	WORD $0x7989; BYTE $0x28                   // mov    dword [rcx + 40], edi
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xd0a40f48; BYTE $0x08               // shld    rax, rdx, 8
	LONG $0x20eac148                           // shr    rdx, 32
	LONG $0xffffe281; WORD $0x00ff             // and    edx, 16777215
	WORD $0x5189; BYTE $0x30                   // mov    dword [rcx + 48], edx
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	LONG $0x28e9c149                           // shr    r9, 40
	LONG $0x3c498944                           // mov    dword [rcx + 60], r9d
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xf8a40f4c; BYTE $0x10               // shld    rax, r15, 16
	LONG $0x18efc149                           // shr    r15, 24
	LONG $0xffe78141; WORD $0xffff; BYTE $0x00 // and    r15d, 16777215
	LONG $0x44798944                           // mov    dword [rcx + 68], r15d
	WORD $0x894d; BYTE $0xc7                   // mov    r15, r8
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x8944; BYTE $0xe0                   // mov    eax, r12d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xe2a40f4c; BYTE $0x08               // shld    rdx, r12, 8
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	LONG $0x20ecc149                           // shr    r12, 32
	LONG $0xffe48141; WORD $0xffff; BYTE $0x00 // and    r12d, 16777215
	LONG $0x50618944                           // mov    dword [rcx + 80], r12d
	LONG $0xffffe281; WORD $0x00ff             // and    edx, 16777215
	WORD $0x5189; BYTE $0x54                   // mov    dword [rcx + 84], edx
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x28eac149                           // shr    r10, 40
	LONG $0x5c518944                           // mov    dword [rcx + 92], r10d
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xd8a40f4c; BYTE $0x10               // shld    rax, r11, 16
	LONG $0x18ebc149                           // shr    r11, 24
	LONG $0xffe38141; WORD $0xffff; BYTE $0x00 // and    r11d, 16777215
	LONG $0x64598944                           // mov    dword [rcx + 100], r11d
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f4c; BYTE $0x08               // shld    rax, r14, 8
	LONG $0x20eec149                           // shr    r14, 32
	LONG $0xffe68141; WORD $0xffff; BYTE $0x00 // and    r14d, 16777215
	LONG $0x70718944                           // mov    dword [rcx + 112], r14d
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0xffffff25; BYTE $0x00               // and    eax, 16777215
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x28eac148                           // shr    rdx, 40
	WORD $0x5189; BYTE $0x7c                   // mov    dword [rcx + 124], edx
	LONG $0x60c78349                           // add    r15, 96
	JMP  LBB1_84

LBB1_72:
	WORD $0x8b49; BYTE $0x37 // mov    rsi, qword [r15]
	LONG $0x08478b49         // mov    rax, qword [r15 + 8]
	LONG $0x10c78349         // add    r15, 16
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x1189             // mov    dword [rcx], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x04 // shr    edx, 4
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x04 // mov    dword [rcx + 4], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x08 // shr    edx, 8
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x08 // mov    dword [rcx + 8], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x0c // shr    edx, 12
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x0c // mov    dword [rcx + 12], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x10 // shr    edx, 16
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x10 // mov    dword [rcx + 16], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x14 // shr    edx, 20
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x14 // mov    dword [rcx + 20], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x18 // shr    edx, 24
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x18 // mov    dword [rcx + 24], edx
	WORD $0xf289             // mov    edx, esi
	WORD $0xeac1; BYTE $0x1c // shr    edx, 28
	WORD $0x5189; BYTE $0x1c // mov    dword [rcx + 28], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x20eac148         // shr    rdx, 32
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x20 // mov    dword [rcx + 32], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x24eac148         // shr    rdx, 36
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x24 // mov    dword [rcx + 36], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x28eac148         // shr    rdx, 40
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x28 // mov    dword [rcx + 40], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x2ceac148         // shr    rdx, 44
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x2c // mov    dword [rcx + 44], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x30eac148         // shr    rdx, 48
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x30 // mov    dword [rcx + 48], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x34eac148         // shr    rdx, 52
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x34 // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x38 // mov    dword [rcx + 56], edx
	LONG $0x3ceec148         // shr    rsi, 60
	WORD $0x7189; BYTE $0x3c // mov    dword [rcx + 60], esi
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x40 // mov    dword [rcx + 64], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x04 // shr    edx, 4
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x44 // mov    dword [rcx + 68], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x08 // shr    edx, 8
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x48 // mov    dword [rcx + 72], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c // shr    edx, 12
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x4c // mov    dword [rcx + 76], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x10 // shr    edx, 16
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x50 // mov    dword [rcx + 80], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x14 // shr    edx, 20
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x54 // mov    dword [rcx + 84], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x18 // shr    edx, 24
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x58 // mov    dword [rcx + 88], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1c // shr    edx, 28
	WORD $0x5189; BYTE $0x5c // mov    dword [rcx + 92], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x20eac148         // shr    rdx, 32
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x60 // mov    dword [rcx + 96], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x24eac148         // shr    rdx, 36
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x64 // mov    dword [rcx + 100], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x28eac148         // shr    rdx, 40
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x68 // mov    dword [rcx + 104], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x2ceac148         // shr    rdx, 44
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x6c // mov    dword [rcx + 108], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x30eac148         // shr    rdx, 48
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x70 // mov    dword [rcx + 112], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x34eac148         // shr    rdx, 52
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x74 // mov    dword [rcx + 116], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x5189; BYTE $0x78 // mov    dword [rcx + 120], edx
	LONG $0x3ce8c148         // shr    rax, 60
	WORD $0x4189; BYTE $0x7c // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_73:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x087f8b49                           // mov    rdi, qword [r15 + 8]
	LONG $0x10778b49                           // mov    rsi, qword [r15 + 16]
	LONG $0x18578b49                           // mov    rdx, qword [r15 + 24]
	LONG $0x20778b4d                           // mov    r14, qword [r15 + 32]
	WORD $0x894d; BYTE $0xfc                   // mov    r12, r15
	LONG $0x287f8b4d                           // mov    r15, qword [r15 + 40]
	LONG $0x244c8b4d; BYTE $0x30               // mov    r9, qword [r12 + 48]
	LONG $0x245c8b4d; BYTE $0x38               // mov    r11, qword [r12 + 56]
	LONG $0x24548b4d; BYTE $0x40               // mov    r10, qword [r12 + 64]
	LONG $0x24448b4d; BYTE $0x48               // mov    r8, qword [r12 + 72]
	LONG $0x50c48349                           // add    r12, 80
	WORD $0xc389                               // mov    ebx, eax
	LONG $0xffffe381; WORD $0x000f             // and    ebx, 1048575
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x14ebc148                           // shr    rbx, 20
	LONG $0xffffe381; WORD $0x000f             // and    ebx, 1048575
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xfb                   // mov    rbx, rdi
	LONG $0xc3a40f48; BYTE $0x04               // shld    rbx, rax, 4
	LONG $0x28e8c148                           // shr    rax, 40
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x08                   // mov    dword [rcx + 8], eax
	LONG $0xffffe381; WORD $0x000f             // and    ebx, 1048575
	WORD $0x5989; BYTE $0x0c                   // mov    dword [rcx + 12], ebx
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xf8a40f48; BYTE $0x08               // shld    rax, rdi, 8
	LONG $0x24efc148                           // shr    rdi, 36
	LONG $0xffffe781; WORD $0x000f             // and    edi, 1048575
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x0c               // shld    rax, rsi, 12
	LONG $0x20eec148                           // shr    rsi, 32
	LONG $0xffffe681; WORD $0x000f             // and    esi, 1048575
	WORD $0x7189; BYTE $0x20                   // mov    dword [rcx + 32], esi
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	LONG $0xd6a40f48; BYTE $0x10               // shld    rsi, rdx, 16
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	LONG $0x1ceac148                           // shr    rdx, 28
	LONG $0xffffe281; WORD $0x000f             // and    edx, 1048575
	WORD $0x5189; BYTE $0x2c                   // mov    dword [rcx + 44], edx
	LONG $0xffffe681; WORD $0x000f             // and    esi, 1048575
	WORD $0x7189; BYTE $0x30                   // mov    dword [rcx + 48], esi
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	LONG $0x2ceec149                           // shr    r14, 44
	LONG $0x3c718944                           // mov    dword [rcx + 60], r14d
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xfaa40f4c; BYTE $0x04               // shld    rdx, r15, 4
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	LONG $0x28efc149                           // shr    r15, 40
	LONG $0xffe78141; WORD $0x0fff; BYTE $0x00 // and    r15d, 1048575
	LONG $0x48798944                           // mov    dword [rcx + 72], r15d
	WORD $0x894d; BYTE $0xe7                   // mov    r15, r12
	LONG $0xffffe281; WORD $0x000f             // and    edx, 1048575
	WORD $0x5189; BYTE $0x4c                   // mov    dword [rcx + 76], edx
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xc8a40f4c; BYTE $0x08               // shld    rax, r9, 8
	LONG $0x24e9c149                           // shr    r9, 36
	LONG $0xffe18141; WORD $0x0fff; BYTE $0x00 // and    r9d, 1048575
	LONG $0x54498944                           // mov    dword [rcx + 84], r9d
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f4c; BYTE $0x0c               // shld    rax, r11, 12
	LONG $0x20ebc149                           // shr    r11, 32
	LONG $0xffe38141; WORD $0x0fff; BYTE $0x00 // and    r11d, 1048575
	LONG $0x60598944                           // mov    dword [rcx + 96], r11d
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f4c; BYTE $0x10               // shld    rax, r10, 16
	LONG $0x1ceac149                           // shr    r10, 28
	LONG $0xffe28141; WORD $0x0fff; BYTE $0x00 // and    r10d, 1048575
	LONG $0x6c518944                           // mov    dword [rcx + 108], r10d
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x0fffff25; BYTE $0x00               // and    eax, 1048575
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x2ce8c149                           // shr    r8, 44
	JMP  LBB1_83

LBB1_74:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08578b49                           // mov    rdx, qword [r15 + 8]
	LONG $0x10778b49                           // mov    rsi, qword [r15 + 16]
	LONG $0x18578b4d                           // mov    r10, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28478b4d                           // mov    r8, qword [r15 + 40]
	LONG $0x30c78349                           // add    r15, 48
	WORD $0xc389                               // mov    ebx, eax
	LONG $0x0fffe381; WORD $0x0000             // and    ebx, 4095
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0xc389                               // mov    ebx, eax
	WORD $0xebc1; BYTE $0x0c                   // shr    ebx, 12
	LONG $0x0fffe381; WORD $0x0000             // and    ebx, 4095
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x18efc148                           // shr    rdi, 24
	LONG $0x0fffe781; WORD $0x0000             // and    edi, 4095
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x24efc148                           // shr    rdi, 36
	LONG $0x0fffe781; WORD $0x0000             // and    edi, 4095
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	WORD $0x8948; BYTE $0xd7                   // mov    rdi, rdx
	LONG $0xc7a40f48; BYTE $0x04               // shld    rdi, rax, 4
	LONG $0x30e8c148                           // shr    rax, 48
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	LONG $0x0fffe781; WORD $0x0000             // and    edi, 4095
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x14                   // shr    eax, 20
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x20e8c148                           // shr    rax, 32
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0xd7a40f48; BYTE $0x08               // shld    rdi, rdx, 8
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	LONG $0x2ceac148                           // shr    rdx, 44
	LONG $0x0fffe281; WORD $0x0000             // and    edx, 4095
	WORD $0x5189; BYTE $0x24                   // mov    dword [rcx + 36], edx
	LONG $0x0fffe781; WORD $0x0000             // and    edi, 4095
	WORD $0x7989; BYTE $0x28                   // mov    dword [rcx + 40], edi
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x28e8c148                           // shr    rax, 40
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	LONG $0x34eec148                           // shr    rsi, 52
	WORD $0x7189; BYTE $0x3c                   // mov    dword [rcx + 60], esi
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x24e8c148                           // shr    rax, 36
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x894c; BYTE $0xca                   // mov    rdx, r9
	LONG $0xd2a40f4c; BYTE $0x04               // shld    rdx, r10, 4
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	LONG $0x30eac149                           // shr    r10, 48
	LONG $0xffe28141; WORD $0x000f; BYTE $0x00 // and    r10d, 4095
	LONG $0x50518944                           // mov    dword [rcx + 80], r10d
	LONG $0x0fffe281; WORD $0x0000             // and    edx, 4095
	WORD $0x5189; BYTE $0x54                   // mov    dword [rcx + 84], edx
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x14                   // shr    eax, 20
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x20e8c148                           // shr    rax, 32
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xc8a40f4c; BYTE $0x08               // shld    rax, r9, 8
	LONG $0x2ce9c149                           // shr    r9, 44
	LONG $0xffe18141; WORD $0x000f; BYTE $0x00 // and    r9d, 4095
	LONG $0x64498944                           // mov    dword [rcx + 100], r9d
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x28e8c148                           // shr    rax, 40
	LONG $0x000fff25; BYTE $0x00               // and    eax, 4095
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x34e8c149                           // shr    r8, 52
	JMP  LBB1_83

LBB1_75:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x085f8b49                           // mov    rbx, qword [r15 + 8]
	LONG $0x107f8b49                           // mov    rdi, qword [r15 + 16]
	LONG $0x18478b4d                           // mov    r8, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x30578b49                           // mov    rdx, qword [r15 + 48]
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x386f8b4d                           // mov    r13, qword [r15 + 56]
	LONG $0x40778b4d                           // mov    r14, qword [r15 + 64]
	LONG $0x48678b4d                           // mov    r12, qword [r15 + 72]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x507a8b4c                           // mov    r15, qword [rdx + 80]
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	LONG $0x58528b48                           // mov    rdx, qword [rdx + 88]
	LONG $0x24548948; BYTE $0x10               // mov    qword [rsp + 16], rdx
	WORD $0xc289                               // mov    edx, eax
	LONG $0xffffe281; WORD $0x0fff             // and    edx, 268435455
	LONG $0x245c8b4c; BYTE $0x08               // mov    r11, qword [rsp + 8]
	LONG $0x605b8b4d                           // mov    r11, qword [r11 + 96]
	LONG $0x24748b48; BYTE $0x08               // mov    rsi, qword [rsp + 8]
	LONG $0x68768b48                           // mov    rsi, qword [rsi + 104]
	WORD $0x1189                               // mov    dword [rcx], edx
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0xc2a40f48; BYTE $0x08               // shld    rdx, rax, 8
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x04                   // mov    dword [rcx + 4], eax
	LONG $0xffffe281; WORD $0x0fff             // and    edx, 268435455
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xd8a40f48; BYTE $0x10               // shld    rax, rbx, 16
	LONG $0x14ebc148                           // shr    rbx, 20
	LONG $0xffffe381; WORD $0x0fff             // and    ebx, 268435455
	WORD $0x5989; BYTE $0x0c                   // mov    dword [rcx + 12], ebx
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xf8a40f48; BYTE $0x18               // shld    rax, rdi, 24
	LONG $0x0cefc148                           // shr    rdi, 12
	LONG $0xffffe781; WORD $0x0fff             // and    edi, 268435455
	WORD $0x7989; BYTE $0x14                   // mov    dword [rcx + 20], edi
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x04               // shld    rax, r8, 4
	LONG $0x20e8c149                           // shr    r8, 32
	LONG $0xffe08141; WORD $0xffff; BYTE $0x0f // and    r8d, 268435455
	LONG $0x20418944                           // mov    dword [rcx + 32], r8d
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xc8a40f4c; BYTE $0x0c               // shld    rax, r9, 12
	LONG $0x18e9c149                           // shr    r9, 24
	LONG $0xffe18141; WORD $0xffff; BYTE $0x0f // and    r9d, 268435455
	LONG $0x28498944                           // mov    dword [rcx + 40], r9d
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	LONG $0x247c8b48; BYTE $0x20               // mov    rdi, qword [rsp + 32]
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0xd2a40f4c; BYTE $0x14               // shld    rdx, r10, 20
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	LONG $0x10eac149                           // shr    r10, 16
	LONG $0xffe28141; WORD $0xffff; BYTE $0x0f // and    r10d, 268435455
	LONG $0x30518944                           // mov    dword [rcx + 48], r10d
	LONG $0xffffe281; WORD $0x0fff             // and    edx, 268435455
	WORD $0x5189; BYTE $0x34                   // mov    dword [rcx + 52], edx
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x08e8c148                           // shr    rax, 8
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	LONG $0x24eac148                           // shr    rdx, 36
	WORD $0x5189; BYTE $0x3c                   // mov    dword [rcx + 60], edx
	WORD $0x8944; BYTE $0xe8                   // mov    eax, r13d
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xe8a40f4c; BYTE $0x08               // shld    rax, r13, 8
	LONG $0x1cedc149                           // shr    r13, 28
	LONG $0xffe58141; WORD $0xffff; BYTE $0x0f // and    r13d, 268435455
	LONG $0x44698944                           // mov    dword [rcx + 68], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xf0a40f4c; BYTE $0x10               // shld    rax, r14, 16
	LONG $0x14eec149                           // shr    r14, 20
	LONG $0xffe68141; WORD $0xffff; BYTE $0x0f // and    r14d, 268435455
	LONG $0x4c718944                           // mov    dword [rcx + 76], r14d
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x894c; BYTE $0xfa                   // mov    rdx, r15
	LONG $0xe2a40f4c; BYTE $0x18               // shld    rdx, r12, 24
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	LONG $0x0cecc149                           // shr    r12, 12
	LONG $0xffe48141; WORD $0xffff; BYTE $0x0f // and    r12d, 268435455
	LONG $0x54618944                           // mov    dword [rcx + 84], r12d
	LONG $0xffffe281; WORD $0x0fff             // and    edx, 268435455
	WORD $0x5189; BYTE $0x58                   // mov    dword [rcx + 88], edx
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xf8a40f4c; BYTE $0x04               // shld    rax, r15, 4
	LONG $0x20efc149                           // shr    r15, 32
	LONG $0xffe78141; WORD $0xffff; BYTE $0x0f // and    r15d, 268435455
	LONG $0x60798944                           // mov    dword [rcx + 96], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0xfaa40f48; BYTE $0x0c               // shld    rdx, rdi, 12
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	LONG $0x18efc148                           // shr    rdi, 24
	LONG $0xffffe781; WORD $0x0fff             // and    edi, 268435455
	WORD $0x7989; BYTE $0x68                   // mov    dword [rcx + 104], edi
	LONG $0xffffe281; WORD $0x0fff             // and    edx, 268435455
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd8a40f4c; BYTE $0x14               // shld    rax, r11, 20
	LONG $0x10ebc149                           // shr    r11, 16
	LONG $0xffe38141; WORD $0xffff; BYTE $0x0f // and    r11d, 268435455
	LONG $0x70598944                           // mov    dword [rcx + 112], r11d
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x08e8c148                           // shr    rax, 8
	LONG $0xffffff25; BYTE $0x0f               // and    eax, 268435455
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x24eec148                           // shr    rsi, 36
	WORD $0x7189; BYTE $0x7c                   // mov    dword [rcx + 124], esi
	LONG $0x70c78349                           // add    r15, 112
	JMP  LBB1_84

LBB1_76:
	WORD $0x8b49; BYTE $0x07 // mov    rax, qword [r15]
	LONG $0x08c78349         // add    r15, 8
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x1189             // mov    dword [rcx], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x02 // shr    edx, 2
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x04 // mov    dword [rcx + 4], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x04 // shr    edx, 4
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x08 // mov    dword [rcx + 8], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x06 // shr    edx, 6
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x0c // mov    dword [rcx + 12], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x08 // shr    edx, 8
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x10 // mov    dword [rcx + 16], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0a // shr    edx, 10
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x14 // mov    dword [rcx + 20], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c // shr    edx, 12
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x18 // mov    dword [rcx + 24], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x0e // shr    edx, 14
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x1c // mov    dword [rcx + 28], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x10 // shr    edx, 16
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x20 // mov    dword [rcx + 32], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x12 // shr    edx, 18
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x24 // mov    dword [rcx + 36], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x14 // shr    edx, 20
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x28 // mov    dword [rcx + 40], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x16 // shr    edx, 22
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x2c // mov    dword [rcx + 44], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x18 // shr    edx, 24
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x30 // mov    dword [rcx + 48], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1a // shr    edx, 26
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x34 // mov    dword [rcx + 52], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1c // shr    edx, 28
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x38 // mov    dword [rcx + 56], edx
	WORD $0xc289             // mov    edx, eax
	WORD $0xeac1; BYTE $0x1e // shr    edx, 30
	WORD $0x5189; BYTE $0x3c // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x20eac148         // shr    rdx, 32
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x40 // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x22eac148         // shr    rdx, 34
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x44 // mov    dword [rcx + 68], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x24eac148         // shr    rdx, 36
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x48 // mov    dword [rcx + 72], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x26eac148         // shr    rdx, 38
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x4c // mov    dword [rcx + 76], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x28eac148         // shr    rdx, 40
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x50 // mov    dword [rcx + 80], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x2aeac148         // shr    rdx, 42
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x54 // mov    dword [rcx + 84], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x2ceac148         // shr    rdx, 44
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x58 // mov    dword [rcx + 88], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x2eeac148         // shr    rdx, 46
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x5c // mov    dword [rcx + 92], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x30eac148         // shr    rdx, 48
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x60 // mov    dword [rcx + 96], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x32eac148         // shr    rdx, 50
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x64 // mov    dword [rcx + 100], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x34eac148         // shr    rdx, 52
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x68 // mov    dword [rcx + 104], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x36eac148         // shr    rdx, 54
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x6c // mov    dword [rcx + 108], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x38eac148         // shr    rdx, 56
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x70 // mov    dword [rcx + 112], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x3aeac148         // shr    rdx, 58
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x74 // mov    dword [rcx + 116], edx
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x3ceac148         // shr    rdx, 60
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	WORD $0x5189; BYTE $0x78 // mov    dword [rcx + 120], edx
	LONG $0x3ee8c148         // shr    rax, 62
	WORD $0x4189; BYTE $0x7c // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_77:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x087f8b49                           // mov    rdi, qword [r15 + 8]
	LONG $0x10578b49                           // mov    rdx, qword [r15 + 16]
	LONG $0x18778b49                           // mov    rsi, qword [r15 + 24]
	LONG $0x20778b4d                           // mov    r14, qword [r15 + 32]
	LONG $0x284f8b4d                           // mov    r9, qword [r15 + 40]
	LONG $0x305f8b4d                           // mov    r11, qword [r15 + 48]
	LONG $0x38578b4d                           // mov    r10, qword [r15 + 56]
	LONG $0x40478b4d                           // mov    r8, qword [r15 + 64]
	WORD $0xc389                               // mov    ebx, eax
	LONG $0xffffe381; WORD $0x0003             // and    ebx, 262143
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x12ebc148                           // shr    rbx, 18
	LONG $0xffffe381; WORD $0x0003             // and    ebx, 262143
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xfb                   // mov    rbx, rdi
	LONG $0xc3a40f48; BYTE $0x0a               // shld    rbx, rax, 10
	LONG $0x48c78349                           // add    r15, 72
	LONG $0x24e8c148                           // shr    rax, 36
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x08                   // mov    dword [rcx + 8], eax
	LONG $0xffffe381; WORD $0x0003             // and    ebx, 262143
	WORD $0x5989; BYTE $0x0c                   // mov    dword [rcx + 12], ebx
	WORD $0xf889                               // mov    eax, edi
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x1ae8c148                           // shr    rax, 26
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf8a40f48; BYTE $0x02               // shld    rax, rdi, 2
	LONG $0x2cefc148                           // shr    rdi, 44
	LONG $0xffffe781; WORD $0x0003             // and    edi, 262143
	WORD $0x7989; BYTE $0x18                   // mov    dword [rcx + 24], edi
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0xd0a40f48; BYTE $0x0c               // shld    rax, rdx, 12
	LONG $0x22eac148                           // shr    rdx, 34
	LONG $0xffffe281; WORD $0x0003             // and    edx, 262143
	WORD $0x5189; BYTE $0x24                   // mov    dword [rcx + 36], edx
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	LONG $0xf2a40f48; BYTE $0x04               // shld    rdx, rsi, 4
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	LONG $0x2aeec148                           // shr    rsi, 42
	LONG $0xffffe681; WORD $0x0003             // and    esi, 262143
	WORD $0x7189; BYTE $0x34                   // mov    dword [rcx + 52], esi
	LONG $0xffffe281; WORD $0x0003             // and    edx, 262143
	WORD $0x5189; BYTE $0x38                   // mov    dword [rcx + 56], edx
	WORD $0x8944; BYTE $0xf0                   // mov    eax, r14d
	WORD $0xe8c1; BYTE $0x0e                   // shr    eax, 14
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xf0a40f4c; BYTE $0x0e               // shld    rax, r14, 14
	LONG $0x20eec149                           // shr    r14, 32
	LONG $0xffe68141; WORD $0x03ff; BYTE $0x00 // and    r14d, 262143
	LONG $0x40718944                           // mov    dword [rcx + 64], r14d
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x16e8c148                           // shr    rax, 22
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xc8a40f4c; BYTE $0x06               // shld    rax, r9, 6
	LONG $0x28e9c149                           // shr    r9, 40
	LONG $0xffe18141; WORD $0x03ff; BYTE $0x00 // and    r9d, 262143
	LONG $0x50498944                           // mov    dword [rcx + 80], r9d
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xdaa40f4c; BYTE $0x10               // shld    rdx, r11, 16
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x1eebc149                           // shr    r11, 30
	LONG $0xffe38141; WORD $0x03ff; BYTE $0x00 // and    r11d, 262143
	LONG $0x5c598944                           // mov    dword [rcx + 92], r11d
	LONG $0xffffe281; WORD $0x0003             // and    edx, 262143
	WORD $0x5189; BYTE $0x60                   // mov    dword [rcx + 96], edx
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f4c; BYTE $0x08               // shld    rax, r10, 8
	LONG $0x26eac149                           // shr    r10, 38
	LONG $0xffe28141; WORD $0x03ff; BYTE $0x00 // and    r10d, 262143
	LONG $0x6c518944                           // mov    dword [rcx + 108], r10d
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x1ce8c148                           // shr    rax, 28
	LONG $0x03ffff25; BYTE $0x00               // and    eax, 262143
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x2ee8c149                           // shr    r8, 46
	JMP  LBB1_83

LBB1_78:
	WORD $0x8b49; BYTE $0x37       // mov    rsi, qword [r15]
	LONG $0x08578b49               // mov    rdx, qword [r15 + 8]
	LONG $0x10478b49               // mov    rax, qword [r15 + 16]
	LONG $0x185f8b49               // mov    rbx, qword [r15 + 24]
	LONG $0x20478b4d               // mov    r8, qword [r15 + 32]
	LONG $0x28c78349               // add    r15, 40
	WORD $0xf789                   // mov    edi, esi
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x3989                   // mov    dword [rcx], edi
	WORD $0xf789                   // mov    edi, esi
	WORD $0xefc1; BYTE $0x0a       // shr    edi, 10
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x04       // mov    dword [rcx + 4], edi
	WORD $0xf789                   // mov    edi, esi
	WORD $0xefc1; BYTE $0x14       // shr    edi, 20
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x08       // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xf7       // mov    rdi, rsi
	LONG $0x1eefc148               // shr    rdi, 30
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x0c       // mov    dword [rcx + 12], edi
	WORD $0x8948; BYTE $0xf7       // mov    rdi, rsi
	LONG $0x28efc148               // shr    rdi, 40
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x10       // mov    dword [rcx + 16], edi
	WORD $0x8948; BYTE $0xd7       // mov    rdi, rdx
	LONG $0xf7a40f48; BYTE $0x04   // shld    rdi, rsi, 4
	LONG $0x32eec148               // shr    rsi, 50
	LONG $0x03ffe681; WORD $0x0000 // and    esi, 1023
	WORD $0x7189; BYTE $0x14       // mov    dword [rcx + 20], esi
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x18       // mov    dword [rcx + 24], edi
	WORD $0xd689                   // mov    esi, edx
	WORD $0xeec1; BYTE $0x06       // shr    esi, 6
	LONG $0x03ffe681; WORD $0x0000 // and    esi, 1023
	WORD $0x7189; BYTE $0x1c       // mov    dword [rcx + 28], esi
	WORD $0xd689                   // mov    esi, edx
	WORD $0xeec1; BYTE $0x10       // shr    esi, 16
	LONG $0x03ffe681; WORD $0x0000 // and    esi, 1023
	WORD $0x7189; BYTE $0x20       // mov    dword [rcx + 32], esi
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x1aeec148               // shr    rsi, 26
	LONG $0x03ffe681; WORD $0x0000 // and    esi, 1023
	WORD $0x7189; BYTE $0x24       // mov    dword [rcx + 36], esi
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x24eec148               // shr    rsi, 36
	LONG $0x03ffe681; WORD $0x0000 // and    esi, 1023
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0xd7a40f48; BYTE $0x08   // shld    rdi, rdx, 8
	WORD $0x7189; BYTE $0x28       // mov    dword [rcx + 40], esi
	LONG $0x2eeac148               // shr    rdx, 46
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x2c       // mov    dword [rcx + 44], edx
	LONG $0x03ffe781; WORD $0x0000 // and    edi, 1023
	WORD $0x7989; BYTE $0x30       // mov    dword [rcx + 48], edi
	WORD $0xc289                   // mov    edx, eax
	WORD $0xeac1; BYTE $0x02       // shr    edx, 2
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x34       // mov    dword [rcx + 52], edx
	WORD $0xc289                   // mov    edx, eax
	WORD $0xeac1; BYTE $0x0c       // shr    edx, 12
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x38       // mov    dword [rcx + 56], edx
	WORD $0xc289                   // mov    edx, eax
	WORD $0xeac1; BYTE $0x16       // shr    edx, 22
	WORD $0x5189; BYTE $0x3c       // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0x20eac148               // shr    rdx, 32
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x40       // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xc2       // mov    rdx, rax
	LONG $0x2aeac148               // shr    rdx, 42
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x44       // mov    dword [rcx + 68], edx
	WORD $0x8948; BYTE $0xda       // mov    rdx, rbx
	LONG $0xc2a40f48; BYTE $0x02   // shld    rdx, rax, 2
	LONG $0x34e8c148               // shr    rax, 52
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x48       // mov    dword [rcx + 72], eax
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x4c       // mov    dword [rcx + 76], edx
	WORD $0xd889                   // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x08       // shr    eax, 8
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x50       // mov    dword [rcx + 80], eax
	WORD $0xd889                   // mov    eax, ebx
	WORD $0xe8c1; BYTE $0x12       // shr    eax, 18
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x54       // mov    dword [rcx + 84], eax
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0x1ce8c148               // shr    rax, 28
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x58       // mov    dword [rcx + 88], eax
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0x26e8c148               // shr    rax, 38
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x894c; BYTE $0xc2       // mov    rdx, r8
	LONG $0xdaa40f48; BYTE $0x06   // shld    rdx, rbx, 6
	WORD $0x4189; BYTE $0x5c       // mov    dword [rcx + 92], eax
	LONG $0x30ebc148               // shr    rbx, 48
	LONG $0x03ffe381; WORD $0x0000 // and    ebx, 1023
	WORD $0x5989; BYTE $0x60       // mov    dword [rcx + 96], ebx
	LONG $0x03ffe281; WORD $0x0000 // and    edx, 1023
	WORD $0x5189; BYTE $0x64       // mov    dword [rcx + 100], edx
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04       // shr    eax, 4
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x68       // mov    dword [rcx + 104], eax
	WORD $0x8944; BYTE $0xc0       // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x0e       // shr    eax, 14
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x6c       // mov    dword [rcx + 108], eax
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0x18e8c148               // shr    rax, 24
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x70       // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0x22e8c148               // shr    rax, 34
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x74       // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0x2ce8c148               // shr    rax, 44
	LONG $0x0003ff25; BYTE $0x00   // and    eax, 1023
	WORD $0x4189; BYTE $0x78       // mov    dword [rcx + 120], eax
	LONG $0x36e8c149               // shr    r8, 54
	JMP  LBB1_83

LBB1_79:
	WORD $0x8b49; BYTE $0x37                   // mov    rsi, qword [r15]
	LONG $0x087f8b49                           // mov    rdi, qword [r15 + 8]
	LONG $0x10478b4d                           // mov    r8, qword [r15 + 16]
	LONG $0x184f8b4d                           // mov    r9, qword [r15 + 24]
	LONG $0x20578b4d                           // mov    r10, qword [r15 + 32]
	LONG $0x286f8b4d                           // mov    r13, qword [r15 + 40]
	LONG $0x30678b4d                           // mov    r12, qword [r15 + 48]
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x38788b4c                           // mov    r15, qword [rax + 56]
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x40588b4c                           // mov    r11, qword [rax + 64]
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x48408b48                           // mov    rax, qword [rax + 72]
	LONG $0x24448948; BYTE $0x30               // mov    qword [rsp + 48], rax
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x50408b48                           // mov    rax, qword [rax + 80]
	LONG $0x24448948; BYTE $0x28               // mov    qword [rsp + 40], rax
	WORD $0xf089                               // mov    eax, esi
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0xf2a40f48; BYTE $0x0c               // shld    rdx, rsi, 12
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x585b8b48                           // mov    rbx, qword [rbx + 88]
	LONG $0x245c8948; BYTE $0x20               // mov    qword [rsp + 32], rbx
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x60738b4c                           // mov    r14, qword [rbx + 96]
	LONG $0x2474894c; BYTE $0x10               // mov    qword [rsp + 16], r14
	WORD $0x0189                               // mov    dword [rcx], eax
	LONG $0x1aeec148                           // shr    rsi, 26
	LONG $0xffffe681; WORD $0x03ff             // and    esi, 67108863
	WORD $0x7189; BYTE $0x04                   // mov    dword [rcx + 4], esi
	LONG $0xffffe281; WORD $0x03ff             // and    edx, 67108863
	WORD $0x5189; BYTE $0x08                   // mov    dword [rcx + 8], edx
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xf8a40f48; BYTE $0x18               // shld    rax, rdi, 24
	LONG $0x0eefc148                           // shr    rdi, 14
	LONG $0xffffe781; WORD $0x03ff             // and    edi, 67108863
	WORD $0x7989; BYTE $0x0c                   // mov    dword [rcx + 12], edi
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xc0a40f4c; BYTE $0x0a               // shld    rax, r8, 10
	LONG $0x1ce8c149                           // shr    r8, 28
	LONG $0xffe08141; WORD $0xffff; BYTE $0x03 // and    r8d, 67108863
	LONG $0x18418944                           // mov    dword [rcx + 24], r8d
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x894c; BYTE $0xd2                   // mov    rdx, r10
	LONG $0xcaa40f4c; BYTE $0x16               // shld    rdx, r9, 22
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	LONG $0x10e9c149                           // shr    r9, 16
	LONG $0xffe18141; WORD $0xffff; BYTE $0x03 // and    r9d, 67108863
	LONG $0x20498944                           // mov    dword [rcx + 32], r9d
	LONG $0xffffe281; WORD $0x03ff             // and    edx, 67108863
	WORD $0x5189; BYTE $0x24                   // mov    dword [rcx + 36], edx
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0xd0a40f4c; BYTE $0x08               // shld    rax, r10, 8
	LONG $0x1eeac149                           // shr    r10, 30
	LONG $0xffe28141; WORD $0xffff; BYTE $0x03 // and    r10d, 67108863
	LONG $0x2c518944                           // mov    dword [rcx + 44], r10d
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xe8a40f4c; BYTE $0x14               // shld    rax, r13, 20
	LONG $0x12edc149                           // shr    r13, 18
	LONG $0xffe58141; WORD $0xffff; BYTE $0x03 // and    r13d, 67108863
	LONG $0x34698944                           // mov    dword [rcx + 52], r13d
	LONG $0x246c8b44; BYTE $0x1c               // mov    r13d, dword [rsp + 28]
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x8944; BYTE $0xe0                   // mov    eax, r12d
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xe0a40f4c; BYTE $0x06               // shld    rax, r12, 6
	LONG $0x20ecc149                           // shr    r12, 32
	LONG $0xffe48141; WORD $0xffff; BYTE $0x03 // and    r12d, 67108863
	LONG $0x40618944                           // mov    dword [rcx + 64], r12d
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xf8a40f4c; BYTE $0x12               // shld    rax, r15, 18
	LONG $0x14efc149                           // shr    r15, 20
	LONG $0xffe78141; WORD $0xffff; BYTE $0x03 // and    r15d, 67108863
	LONG $0x48798944                           // mov    dword [rcx + 72], r15d
	LONG $0x247c8b4c; BYTE $0x08               // mov    r15, qword [rsp + 8]
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x08e8c148                           // shr    rax, 8
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	LONG $0x24548b48; BYTE $0x30               // mov    rdx, qword [rsp + 48]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xd8a40f4c; BYTE $0x04               // shld    rax, r11, 4
	LONG $0x22ebc149                           // shr    r11, 34
	LONG $0xffe38141; WORD $0xffff; BYTE $0x03 // and    r11d, 67108863
	LONG $0x54598944                           // mov    dword [rcx + 84], r11d
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	LONG $0x247c8b48; BYTE $0x28               // mov    rdi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0xd0a40f48; BYTE $0x10               // shld    rax, rdx, 16
	LONG $0x16eac148                           // shr    rdx, 22
	LONG $0xffffe281; WORD $0x03ff             // and    edx, 67108863
	WORD $0x5189; BYTE $0x5c                   // mov    dword [rcx + 92], edx
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	LONG $0x0ae8c148                           // shr    rax, 10
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	LONG $0x24748b48; BYTE $0x20               // mov    rsi, qword [rsp + 32]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0xfaa40f48; BYTE $0x02               // shld    rdx, rdi, 2
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	LONG $0x24efc148                           // shr    rdi, 36
	LONG $0xffffe781; WORD $0x03ff             // and    edi, 67108863
	WORD $0x7989; BYTE $0x68                   // mov    dword [rcx + 104], edi
	LONG $0xffffe281; WORD $0x03ff             // and    edx, 67108863
	WORD $0x5189; BYTE $0x6c                   // mov    dword [rcx + 108], edx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x0e               // shld    rax, rsi, 14
	LONG $0x18eec148                           // shr    rsi, 24
	LONG $0xffffe681; WORD $0x03ff             // and    esi, 67108863
	WORD $0x7189; BYTE $0x70                   // mov    dword [rcx + 112], esi
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x0ce8c148                           // shr    rax, 12
	LONG $0xffffff25; BYTE $0x03               // and    eax, 67108863
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x26eac148                           // shr    rdx, 38
	WORD $0x5189; BYTE $0x7c                   // mov    dword [rcx + 124], edx
	LONG $0x68c78349                           // add    r15, 104
	JMP  LBB1_84

LBB1_80:
	WORD $0x8b49; BYTE $0x17     // mov    rdx, qword [r15]
	LONG $0x085f8b49             // mov    rbx, qword [r15 + 8]
	LONG $0x10478b49             // mov    rax, qword [r15 + 16]
	LONG $0x18c78349             // add    r15, 24
	WORD $0xd689                 // mov    esi, edx
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x3189                 // mov    dword [rcx], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x06     // shr    esi, 6
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x04     // mov    dword [rcx + 4], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x0c     // shr    esi, 12
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x08     // mov    dword [rcx + 8], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x12     // shr    esi, 18
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x0c     // mov    dword [rcx + 12], esi
	WORD $0xd689                 // mov    esi, edx
	WORD $0xeec1; BYTE $0x18     // shr    esi, 24
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x10     // mov    dword [rcx + 16], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x1eeec148             // shr    rsi, 30
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x14     // mov    dword [rcx + 20], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x24eec148             // shr    rsi, 36
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x18     // mov    dword [rcx + 24], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x2aeec148             // shr    rsi, 42
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x1c     // mov    dword [rcx + 28], esi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	LONG $0x30eec148             // shr    rsi, 48
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x20     // mov    dword [rcx + 32], esi
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xd6a40f48; BYTE $0x04 // shld    rsi, rdx, 4
	LONG $0x36eac148             // shr    rdx, 54
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x24     // mov    dword [rcx + 36], edx
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x28     // mov    dword [rcx + 40], esi
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x02     // shr    edx, 2
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x2c     // mov    dword [rcx + 44], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x08     // shr    edx, 8
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x30     // mov    dword [rcx + 48], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x0e     // shr    edx, 14
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x34     // mov    dword [rcx + 52], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x14     // shr    edx, 20
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x38     // mov    dword [rcx + 56], edx
	WORD $0xda89                 // mov    edx, ebx
	WORD $0xeac1; BYTE $0x1a     // shr    edx, 26
	WORD $0x5189; BYTE $0x3c     // mov    dword [rcx + 60], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x20eac148             // shr    rdx, 32
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x40     // mov    dword [rcx + 64], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x26eac148             // shr    rdx, 38
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x44     // mov    dword [rcx + 68], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x2ceac148             // shr    rdx, 44
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x48     // mov    dword [rcx + 72], edx
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x32eac148             // shr    rdx, 50
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0xdea40f48; BYTE $0x02 // shld    rsi, rbx, 2
	WORD $0x5189; BYTE $0x4c     // mov    dword [rcx + 76], edx
	LONG $0x38ebc148             // shr    rbx, 56
	WORD $0xe383; BYTE $0x3f     // and    ebx, 63
	WORD $0x5989; BYTE $0x50     // mov    dword [rcx + 80], ebx
	WORD $0xe683; BYTE $0x3f     // and    esi, 63
	WORD $0x7189; BYTE $0x54     // mov    dword [rcx + 84], esi
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x04     // shr    edx, 4
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x58     // mov    dword [rcx + 88], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x0a     // shr    edx, 10
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x5c     // mov    dword [rcx + 92], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x10     // shr    edx, 16
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x60     // mov    dword [rcx + 96], edx
	WORD $0xc289                 // mov    edx, eax
	WORD $0xeac1; BYTE $0x16     // shr    edx, 22
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x64     // mov    dword [rcx + 100], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x1ceac148             // shr    rdx, 28
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x68     // mov    dword [rcx + 104], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x22eac148             // shr    rdx, 34
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x6c     // mov    dword [rcx + 108], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x28eac148             // shr    rdx, 40
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x70     // mov    dword [rcx + 112], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x2eeac148             // shr    rdx, 46
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x74     // mov    dword [rcx + 116], edx
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	LONG $0x34eac148             // shr    rdx, 52
	WORD $0xe283; BYTE $0x3f     // and    edx, 63
	WORD $0x5189; BYTE $0x78     // mov    dword [rcx + 120], edx
	LONG $0x3ae8c148             // shr    rax, 58
	WORD $0x4189; BYTE $0x7c     // mov    dword [rcx + 124], eax
	JMP  LBB1_84

LBB1_81:
	WORD $0x8b49; BYTE $0x1f                   // mov    rbx, qword [r15]
	LONG $0x08478b49                           // mov    rax, qword [r15 + 8]
	LONG $0x107f8b49                           // mov    rdi, qword [r15 + 16]
	LONG $0x18578b49                           // mov    rdx, qword [r15 + 24]
	LONG $0x20678b4d                           // mov    r12, qword [r15 + 32]
	WORD $0x894d; BYTE $0xf8                   // mov    r8, r15
	LONG $0x287f8b4d                           // mov    r15, qword [r15 + 40]
	LONG $0x30488b4d                           // mov    r9, qword [r8 + 48]
	LONG $0x38708b4d                           // mov    r14, qword [r8 + 56]
	LONG $0x40588b4d                           // mov    r11, qword [r8 + 64]
	LONG $0x48508b4d                           // mov    r10, qword [r8 + 72]
	LONG $0x50708b49                           // mov    rsi, qword [r8 + 80]
	LONG $0x24748948; BYTE $0x10               // mov    qword [rsp + 16], rsi
	WORD $0xde89                               // mov    esi, ebx
	LONG $0xffffe681; WORD $0x003f             // and    esi, 4194303
	WORD $0x3189                               // mov    dword [rcx], esi
	WORD $0x8948; BYTE $0xc6                   // mov    rsi, rax
	LONG $0xdea40f48; BYTE $0x14               // shld    rsi, rbx, 20
	LONG $0x16ebc148                           // shr    rbx, 22
	LONG $0xffffe381; WORD $0x003f             // and    ebx, 4194303
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	LONG $0xffffe681; WORD $0x003f             // and    esi, 4194303
	WORD $0x7189; BYTE $0x08                   // mov    dword [rcx + 8], esi
	WORD $0xc689                               // mov    esi, eax
	WORD $0xeec1; BYTE $0x02                   // shr    esi, 2
	LONG $0xffffe681; WORD $0x003f             // and    esi, 4194303
	WORD $0x8948; BYTE $0xfb                   // mov    rbx, rdi
	LONG $0xc3a40f48; BYTE $0x12               // shld    rbx, rax, 18
	WORD $0x7189; BYTE $0x0c                   // mov    dword [rcx + 12], esi
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x10                   // mov    dword [rcx + 16], eax
	LONG $0xffffe381; WORD $0x003f             // and    ebx, 4194303
	WORD $0x5989; BYTE $0x14                   // mov    dword [rcx + 20], ebx
	WORD $0xf889                               // mov    eax, edi
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf8a40f48; BYTE $0x10               // shld    rax, rdi, 16
	LONG $0x1aefc148                           // shr    rdi, 26
	LONG $0xffffe781; WORD $0x003f             // and    edi, 4194303
	WORD $0x7989; BYTE $0x1c                   // mov    dword [rcx + 28], edi
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x20                   // mov    dword [rcx + 32], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x894c; BYTE $0xe6                   // mov    rsi, r12
	LONG $0xd6a40f48; BYTE $0x0e               // shld    rsi, rdx, 14
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	LONG $0x1ceac148                           // shr    rdx, 28
	LONG $0xffffe281; WORD $0x003f             // and    edx, 4194303
	WORD $0x5189; BYTE $0x28                   // mov    dword [rcx + 40], edx
	LONG $0xffffe681; WORD $0x003f             // and    esi, 4194303
	WORD $0x7189; BYTE $0x2c                   // mov    dword [rcx + 44], esi
	WORD $0x8944; BYTE $0xe0                   // mov    eax, r12d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x30                   // mov    dword [rcx + 48], eax
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xe0a40f4c; BYTE $0x0c               // shld    rax, r12, 12
	LONG $0x1eecc149                           // shr    r12, 30
	LONG $0xffe48141; WORD $0x3fff; BYTE $0x00 // and    r12d, 4194303
	LONG $0x34618944                           // mov    dword [rcx + 52], r12d
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x8944; BYTE $0xf8                   // mov    eax, r15d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xf8a40f4c; BYTE $0x0a               // shld    rax, r15, 10
	LONG $0x20efc149                           // shr    r15, 32
	LONG $0xffe78141; WORD $0x3fff; BYTE $0x00 // and    r15d, 4194303
	LONG $0x40798944                           // mov    dword [rcx + 64], r15d
	WORD $0x894d; BYTE $0xc7                   // mov    r15, r8
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x44                   // mov    dword [rcx + 68], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x0ce8c148                           // shr    rax, 12
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0xc8a40f4c; BYTE $0x08               // shld    rax, r9, 8
	LONG $0x22e9c149                           // shr    r9, 34
	LONG $0xffe18141; WORD $0x3fff; BYTE $0x00 // and    r9d, 4194303
	LONG $0x4c498944                           // mov    dword [rcx + 76], r9d
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xf0                   // mov    rax, r14
	LONG $0x0ee8c148                           // shr    rax, 14
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x54                   // mov    dword [rcx + 84], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xf0a40f4c; BYTE $0x06               // shld    rax, r14, 6
	LONG $0x24eec149                           // shr    r14, 36
	LONG $0xffe68141; WORD $0x3fff; BYTE $0x00 // and    r14d, 4194303
	LONG $0x58718944                           // mov    dword [rcx + 88], r14d
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x10e8c148                           // shr    rax, 16
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xd8a40f4c; BYTE $0x04               // shld    rax, r11, 4
	LONG $0x26ebc149                           // shr    r11, 38
	LONG $0xffe38141; WORD $0x3fff; BYTE $0x00 // and    r11d, 4194303
	LONG $0x64598944                           // mov    dword [rcx + 100], r11d
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x68                   // mov    dword [rcx + 104], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x12e8c148                           // shr    rax, 18
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xd0a40f4c; BYTE $0x02               // shld    rax, r10, 2
	LONG $0x28eac149                           // shr    r10, 40
	LONG $0xffe28141; WORD $0x3fff; BYTE $0x00 // and    r10d, 4194303
	LONG $0x70518944                           // mov    dword [rcx + 112], r10d
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x3fffff25; BYTE $0x00               // and    eax, 4194303
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x2aeac148                           // shr    rdx, 42
	WORD $0x5189; BYTE $0x7c                   // mov    dword [rcx + 124], edx
	LONG $0x58c78349                           // add    r15, 88
	JMP  LBB1_84

LBB1_82:
	WORD $0x8b49; BYTE $0x07                   // mov    rax, qword [r15]
	LONG $0x08778b49                           // mov    rsi, qword [r15 + 8]
	LONG $0x10578b49                           // mov    rdx, qword [r15 + 16]
	LONG $0x185f8b4d                           // mov    r11, qword [r15 + 24]
	LONG $0x204f8b4d                           // mov    r9, qword [r15 + 32]
	LONG $0x28578b4d                           // mov    r10, qword [r15 + 40]
	LONG $0x30478b4d                           // mov    r8, qword [r15 + 48]
	LONG $0x38c78349                           // add    r15, 56
	WORD $0xc389                               // mov    ebx, eax
	LONG $0x3fffe381; WORD $0x0000             // and    ebx, 16383
	WORD $0x1989                               // mov    dword [rcx], ebx
	WORD $0xc389                               // mov    ebx, eax
	WORD $0xebc1; BYTE $0x0e                   // shr    ebx, 14
	LONG $0x3fffe381; WORD $0x0000             // and    ebx, 16383
	WORD $0x5989; BYTE $0x04                   // mov    dword [rcx + 4], ebx
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x1cefc148                           // shr    rdi, 28
	LONG $0x3fffe781; WORD $0x0000             // and    edi, 16383
	WORD $0x7989; BYTE $0x08                   // mov    dword [rcx + 8], edi
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0xc7a40f48; BYTE $0x08               // shld    rdi, rax, 8
	LONG $0x2ae8c148                           // shr    rax, 42
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x0c                   // mov    dword [rcx + 12], eax
	LONG $0x3fffe781; WORD $0x0000             // and    edi, 16383
	WORD $0x7989; BYTE $0x10                   // mov    dword [rcx + 16], edi
	WORD $0xf089                               // mov    eax, esi
	WORD $0xe8c1; BYTE $0x06                   // shr    eax, 6
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x14                   // mov    dword [rcx + 20], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x14e8c148                           // shr    rax, 20
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x18                   // mov    dword [rcx + 24], eax
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x22e8c148                           // shr    rax, 34
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x1c                   // mov    dword [rcx + 28], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xf0a40f48; BYTE $0x02               // shld    rax, rsi, 2
	LONG $0x30eec148                           // shr    rsi, 48
	LONG $0x3fffe681; WORD $0x0000             // and    esi, 16383
	WORD $0x7189; BYTE $0x20                   // mov    dword [rcx + 32], esi
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x24                   // mov    dword [rcx + 36], eax
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe8c1; BYTE $0x0c                   // shr    eax, 12
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x28                   // mov    dword [rcx + 40], eax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x1ae8c148                           // shr    rax, 26
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x2c                   // mov    dword [rcx + 44], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0xd0a40f48; BYTE $0x0a               // shld    rax, rdx, 10
	LONG $0x28eac148                           // shr    rdx, 40
	LONG $0x3fffe281; WORD $0x0000             // and    edx, 16383
	WORD $0x5189; BYTE $0x30                   // mov    dword [rcx + 48], edx
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x34                   // mov    dword [rcx + 52], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x04                   // shr    eax, 4
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x38                   // mov    dword [rcx + 56], eax
	WORD $0x8944; BYTE $0xd8                   // mov    eax, r11d
	WORD $0xe8c1; BYTE $0x12                   // shr    eax, 18
	WORD $0x4189; BYTE $0x3c                   // mov    dword [rcx + 60], eax
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x20e8c148                           // shr    rax, 32
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x40                   // mov    dword [rcx + 64], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0xd8a40f4c; BYTE $0x04               // shld    rax, r11, 4
	LONG $0x2eebc149                           // shr    r11, 46
	LONG $0xffe38141; WORD $0x003f; BYTE $0x00 // and    r11d, 16383
	LONG $0x44598944                           // mov    dword [rcx + 68], r11d
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x48                   // mov    dword [rcx + 72], eax
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xe8c1; BYTE $0x0a                   // shr    eax, 10
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x4c                   // mov    dword [rcx + 76], eax
	WORD $0x894c; BYTE $0xc8                   // mov    rax, r9
	LONG $0x18e8c148                           // shr    rax, 24
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x50                   // mov    dword [rcx + 80], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0xc8a40f4c; BYTE $0x0c               // shld    rax, r9, 12
	LONG $0x26e9c149                           // shr    r9, 38
	LONG $0xffe18141; WORD $0x003f; BYTE $0x00 // and    r9d, 16383
	LONG $0x54498944                           // mov    dword [rcx + 84], r9d
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x58                   // mov    dword [rcx + 88], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x02                   // shr    eax, 2
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x5c                   // mov    dword [rcx + 92], eax
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xe8c1; BYTE $0x10                   // shr    eax, 16
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x60                   // mov    dword [rcx + 96], eax
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10
	LONG $0x1ee8c148                           // shr    rax, 30
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x64                   // mov    dword [rcx + 100], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0xd0a40f4c; BYTE $0x06               // shld    rax, r10, 6
	LONG $0x2ceac149                           // shr    r10, 44
	LONG $0xffe28141; WORD $0x003f; BYTE $0x00 // and    r10d, 16383
	LONG $0x68518944                           // mov    dword [rcx + 104], r10d
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x6c                   // mov    dword [rcx + 108], eax
	WORD $0x8944; BYTE $0xc0                   // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x08                   // shr    eax, 8
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x70                   // mov    dword [rcx + 112], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x16e8c148                           // shr    rax, 22
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x74                   // mov    dword [rcx + 116], eax
	WORD $0x894c; BYTE $0xc0                   // mov    rax, r8
	LONG $0x24e8c148                           // shr    rax, 36
	LONG $0x003fff25; BYTE $0x00               // and    eax, 16383
	WORD $0x4189; BYTE $0x78                   // mov    dword [rcx + 120], eax
	LONG $0x32e8c149                           // shr    r8, 50

LBB1_83:
	LONG $0x7c418944 // mov    dword [rcx + 124], r8d

LBB1_84:
	LONG $0x80e98348 // sub    rcx, -128

LBB1_85:
	LONG $0x3c24448b         // mov    eax, dword [rsp + 60]
	WORD $0xc083; BYTE $0x20 // add    eax, 32
	LONG $0x3c244489         // mov    dword [rsp + 60], eax
	LONG $0x5424443b         // cmp    eax, dword [rsp + 84]
	JB   LBB1_2

LBB1_86:
	SUBQ $8, SP
	RET
