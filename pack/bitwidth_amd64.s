//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_maxbits(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ size+8(FP), SI

	WORD $0xf685             // test    esi, esi
	JE   LBB0_3
	BYTE $0x55               // push    rbp
	WORD $0x8948; BYTE $0xe5 // mov    rbp, rsp
	LONG $0xf8e48348         // and    rsp, -8
	WORD $0xf089             // mov    eax, esi
	WORD $0xfe83; BYTE $0x20 // cmp    esi, 32
	JAE  LBB0_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xd231             // xor    edx, edx
	JMP  LBB0_10

LBB0_4:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0518d48         // lea    rdx, [rcx - 32]
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_14
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0xfee28348         // and    rdx, -2
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xf631             // xor    esi, esi
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB0_6:
	LONG $0x04ebfdc5; BYTE $0xb7         // vpor    ymm0, ymm0, yword [rdi + 4*rsi]
	LONG $0x4cebf5c5; WORD $0x20b7       // vpor    ymm1, ymm1, yword [rdi + 4*rsi + 32]
	LONG $0x54ebedc5; WORD $0x40b7       // vpor    ymm2, ymm2, yword [rdi + 4*rsi + 64]
	LONG $0x5cebe5c5; WORD $0x60b7       // vpor    ymm3, ymm3, yword [rdi + 4*rsi + 96]
	QUAD $0x000080b784ebfdc5; BYTE $0x00 // vpor    ymm0, ymm0, yword [rdi + 4*rsi + 128]
	QUAD $0x0000a0b78cebf5c5; BYTE $0x00 // vpor    ymm1, ymm1, yword [rdi + 4*rsi + 160]
	QUAD $0x0000c0b794ebedc5; BYTE $0x00 // vpor    ymm2, ymm2, yword [rdi + 4*rsi + 192]
	QUAD $0x0000e0b79cebe5c5; BYTE $0x00 // vpor    ymm3, ymm3, yword [rdi + 4*rsi + 224]
	LONG $0x40c68348                     // add    rsi, 64
	LONG $0x02c28348                     // add    rdx, 2
	JNE  LBB0_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB0_9

LBB0_8:
	LONG $0x5cebe5c5; WORD $0x60b7 // vpor    ymm3, ymm3, yword [rdi + 4*rsi + 96]
	LONG $0x54ebedc5; WORD $0x40b7 // vpor    ymm2, ymm2, yword [rdi + 4*rsi + 64]
	LONG $0x4cebf5c5; WORD $0x20b7 // vpor    ymm1, ymm1, yword [rdi + 4*rsi + 32]
	LONG $0x04ebfdc5; BYTE $0xb7   // vpor    ymm0, ymm0, yword [rdi + 4*rsi]

LBB0_9:
	LONG $0xcbebf5c5               // vpor    ymm1, ymm1, ymm3
	LONG $0xc2ebfdc5               // vpor    ymm0, ymm0, ymm2
	LONG $0xc1ebfdc5               // vpor    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1ebf9c5               // vpor    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd    xmm1, xmm0, 238
	LONG $0xc1ebf9c5               // vpor    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x55   // vpshufd    xmm1, xmm0, 85
	LONG $0xc1ebf9c5               // vpor    xmm0, xmm0, xmm1
	LONG $0xc27ef9c5               // vmovd    edx, xmm0
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JE   LBB0_11

LBB0_10:
	WORD $0x140b; BYTE $0x8f // or    edx, dword [rdi + 4*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB0_10

LBB0_11:
	WORD $0xd285             // test    edx, edx
	WORD $0x8948; BYTE $0xec // mov    rsp, rbp
	BYTE $0x5d               // pop    rbp
	JE   LBB0_3
	WORD $0xbd0f; BYTE $0xc2 // bsr    eax, edx
	WORD $0xf083; BYTE $0xe0 // xor    eax, -32
	WORD $0xc083; BYTE $0x21 // add    eax, 33
	VZEROUPPER
	MOVQ AX, bits+16(FP)
	RET

LBB0_3:
	WORD $0xc031             // xor    eax, eax
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_14:
	LONG $0xc0eff9c5 // vpxor    xmm0, xmm0, xmm0
	WORD $0xf631     // xor    esi, esi
	LONG $0xc9eff1c5 // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5 // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5 // vpxor    xmm3, xmm3, xmm3
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB0_8
	JMP  LBB0_9
